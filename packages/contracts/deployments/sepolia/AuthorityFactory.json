{
  "address": "0x519421Bd7843e0D1E2F280490962850e31c86087",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Authority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorityOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "calculateAuthorityAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorityOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorityOwner",
          "type": "address"
        }
      ],
      "name": "newAuthority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e8a982a0715312ad9bdd6eb90488afb9441082fbeccfc03f25e310a18bab235",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xd8464d1B3592b6c3786B32931E2a2AdAC501Aaad",
    "contractAddress": null,
    "transactionIndex": 41,
    "gasUsed": "2729818",
    "logsBloom": "0x
    "blockHash": "0x5edcf19515070c0ad04290ed99bb82c9769f07cad20fc98a7f614cede0530305",
    "transactionHash": "0x2e8a982a0715312ad9bdd6eb90488afb9441082fbeccfc03f25e310a18bab235",
    "logs": [],
    "blockNumber": 3982032,
    "cumulativeGasUsed": "5469160",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b88412d72bfae65ee63b1882aa12299b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Authority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorityOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"calculateAuthorityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorityOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorityOwner\",\"type\":\"address\"}],\"name\":\"newAuthority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorityCreated(address)\":{\"details\":\"MUST be triggered on a successful call to `newAuthority`.\",\"params\":{\"authority\":\"The authority\"}}},\"kind\":\"dev\",\"methods\":{\"calculateAuthorityAddress(address,bytes32)\":{\"details\":\"Beware that only the `newAuthority` function with the `_salt` parameter      is able to deterministically deploy an authority.\",\"params\":{\"_authorityOwner\":\"The initial authority owner\",\"_salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The deterministic authority address\"}},\"newAuthority()\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"returns\":{\"_0\":\"The authority\"}},\"newAuthority(address)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"params\":{\"_authorityOwner\":\"The initial authority owner\"},\"returns\":{\"_0\":\"The authority\"}},\"newAuthority(address,bytes32)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"params\":{\"_authorityOwner\":\"The initial authority owner\",\"_salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The authority\"}},\"newAuthority(bytes32)\":{\"details\":\"On success, MUST emit an `AuthorityCreated` event.\",\"params\":{\"_salt\":\"The salt used to deterministically generate the authority address\"},\"returns\":{\"_0\":\"The authority\"}}},\"title\":\"Authority-History Pair Factory\",\"version\":1},\"userdoc\":{\"events\":{\"AuthorityCreated(address)\":{\"notice\":\"A new authority was deployed.\"}},\"kind\":\"user\",\"methods\":{\"calculateAuthorityAddress(address,bytes32)\":{\"notice\":\"Calculate the address of an authority to be deployed deterministically.\"},\"newAuthority()\":{\"notice\":\"Deploy a new authority.\"},\"newAuthority(address)\":{\"notice\":\"Deploy a new authority.\"},\"newAuthority(address,bytes32)\":{\"notice\":\"Deploy a new authority deterministically.\"},\"newAuthority(bytes32)\":{\"notice\":\"Deploy a new authority deterministically.\"}},\"notice\":\"Allows anyone to reliably deploy a new Authority-History pair.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/authority/AuthorityFactory.sol\":\"AuthorityFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/rollups/contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\n/// @title Abstract Consensus\\n/// @notice An abstract contract that partially implements `IConsensus`.\\nabstract contract AbstractConsensus is IConsensus {\\n    /// @notice Emits an `ApplicationJoined` event with the message sender.\\n    function join() external override {\\n        emit ApplicationJoined(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xced9c940ccbbe81fbfcf3bc087c04b9ae90325d6bba68a8cee9ebfa3dd9d231d\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Consensus interface\\n///\\n/// @notice This contract defines a generic interface for consensuses.\\n/// We use the word \\\"consensus\\\" to designate a contract that provides claims\\n/// in the base layer regarding the state of off-chain machines running in\\n/// the execution layer. How this contract is able to reach consensus, who is\\n/// able to submit claims, and how are claims stored in the base layer are\\n/// some of the implementation details left unspecified by this interface.\\n///\\n/// From the point of view of a DApp, these claims are necessary to validate\\n/// on-chain action allowed by the off-chain machine in the form of vouchers\\n/// and notices. Each claim is composed of three parts: an epoch hash, a first\\n/// index, and a last index. We'll explain each of these parts below.\\n///\\n/// First, let us define the word \\\"epoch\\\". For finality reasons, we need to\\n/// divide the stream of inputs being fed into the off-chain machine into\\n/// batches of inputs, which we call \\\"epoches\\\". At the end of every epoch,\\n/// we summarize the state of the off-chain machine in a single hash, called\\n/// \\\"epoch hash\\\". Please note that this interface does not define how this\\n/// stream of inputs is being chopped up into epoches.\\n///\\n/// The other two parts are simply the indices of the first and last inputs\\n/// accepted during the epoch. Logically, the first index MUST BE less than\\n/// or equal to the last index. As a result, every epoch MUST accept at least\\n/// one input. This assumption stems from the fact that the state of a machine\\n/// can only change after an input is fed into it.\\n///\\n/// Examples of possible implementations of this interface include:\\n///\\n/// * An authority consensus, controlled by a single address who has full\\n///   control over epoch boundaries, claim submission, asset management, etc.\\n///\\n/// * A quorum consensus, controlled by a limited set of validators, that\\n///   vote on the state of the machine at the end of every epoch. Also, epoch\\n///   boundaries are determined by the timestamp in the base layer, and assets\\n///   are split equally amongst the validators.\\n///\\n/// * An NxN consensus, which allows anyone to submit and dispute claims\\n///   in the base layer. Epoch boundaries are determined in the same fashion\\n///   as in the quorum example.\\n///\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set.\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join`.\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Signal the consensus that the message sender wants to join its validation set.\\n    /// @dev MUST fire an `ApplicationJoined` event with the message sender as argument.\\n    function join() external;\\n}\\n\",\"keccak256\":\"0xc9d295fada66eb0602e0f1e2e236708e52f959927abb4ab6b04173a98b92ac16\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/consensus/authority/Authority.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {IHistory} from \\\"../../history/IHistory.sol\\\";\\n\\n/// @title Authority consensus\\n/// @notice A consensus model controlled by a single address, the owner.\\n///         Claims are stored in an auxiliary contract called `History`.\\n/// @dev This contract inherits `AbstractConsensus` and OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract Authority is AbstractConsensus, Ownable {\\n    /// @notice The current history contract.\\n    /// @dev See the `getHistory` and `setHistory` functions.\\n    IHistory internal history;\\n\\n    /// @notice A new history contract is used to store claims.\\n    /// @param history The new history contract\\n    /// @dev MUST be triggered on a successful call to `setHistory`.\\n    event NewHistory(IHistory history);\\n\\n    /// @notice Raised when a transfer of tokens from an authority to a recipient fails.\\n    error AuthorityWithdrawalFailed();\\n\\n    /// @notice Constructs an `Authority` contract.\\n    /// @param _owner The initial contract owner\\n    constructor(address _owner) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (msg.sender != _owner) {\\n            transferOwnership(_owner);\\n        }\\n    }\\n\\n    /// @notice Submits a claim to the current history contract.\\n    ///         The encoding of `_claimData` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function submitClaim(bytes calldata _claimData) external onlyOwner {\\n        history.submitClaim(_claimData);\\n    }\\n\\n    /// @notice Transfer ownership over the current history contract to `_consensus`.\\n    /// @param _consensus The new owner of the current history contract\\n    /// @dev Can only be called by the `Authority` owner,\\n    ///      and the `Authority` contract must have ownership over\\n    ///      its current history contract.\\n    function migrateHistoryToConsensus(address _consensus) external onlyOwner {\\n        history.migrateToConsensus(_consensus);\\n    }\\n\\n    /// @notice Make `Authority` point to another history contract.\\n    /// @param _history The new history contract\\n    /// @dev Emits a `NewHistory` event.\\n    ///      Can only be called by the `Authority` owner.\\n    function setHistory(IHistory _history) external onlyOwner {\\n        history = _history;\\n        emit NewHistory(_history);\\n    }\\n\\n    /// @notice Get the current history contract.\\n    /// @return The current history contract\\n    function getHistory() external view returns (IHistory) {\\n        return history;\\n    }\\n\\n    /// @notice Get a claim from the current history.\\n    ///         The encoding of `_proofContext` might vary depending on the\\n    ///         implementation of the current history contract.\\n    /// @inheritdoc IConsensus\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        return history.getClaim(_dapp, _proofContext);\\n    }\\n\\n    /// @notice Transfer some amount of ERC-20 tokens to a recipient.\\n    /// @param _token The token contract\\n    /// @param _recipient The recipient address\\n    /// @param _amount The amount of tokens to be withdrawn\\n    /// @dev Can only be called by the `Authority` owner.\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        bool success = _token.transfer(_recipient, _amount);\\n\\n        if (!success) {\\n            revert AuthorityWithdrawalFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc71ea13163833684ce576861fbb19dc40e7096a022c6976b61a99dfc9e1c0903\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/history/History.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IHistory} from \\\"./IHistory.sol\\\";\\n\\n/// @title Simple History\\n///\\n/// @notice This contract stores claims for each DApp individually.\\n/// This means that, for each DApp, the contract stores an array of\\n/// `Claim` entries, where each `Claim` is composed of:\\n///\\n/// * An epoch hash (`bytes32`)\\n/// * A closed interval of input indices (`uint128`, `uint128`)\\n///\\n/// The contract guarantees that the first interval starts at index 0,\\n/// and that the following intervals don't have gaps or overlaps.\\n///\\n/// Furthermore, claims can only be submitted by the contract owner\\n/// through `submitClaim`, but can be retrieved by anyone with `getClaim`.\\n///\\n/// @dev This contract inherits OpenZeppelin's `Ownable` contract.\\n///      For more information on `Ownable`, please consult OpenZeppelin's official documentation.\\ncontract History is IHistory, Ownable {\\n    struct Claim {\\n        bytes32 epochHash;\\n        uint128 firstIndex;\\n        uint128 lastIndex;\\n    }\\n\\n    /// @notice Mapping from DApp address to number of claims.\\n    mapping(address => uint256) internal numClaims;\\n\\n    /// @notice Mapping from DApp address and claim index to claim.\\n    /// @dev See the `getClaim` and `submitClaim` functions.\\n    mapping(address => mapping(uint256 => Claim)) internal claims;\\n\\n    /// @notice A new claim regarding a specific DApp was submitted.\\n    /// @param dapp The address of the DApp\\n    /// @param claim The newly-submitted claim\\n    /// @dev MUST be triggered on a successful call to `submitClaim`.\\n    event NewClaimToHistory(address indexed dapp, Claim claim);\\n\\n    /// @notice Raised when one tries to submit a claim whose first input index\\n    ///         is not less than or equal to its last input index.\\n    error InvalidInputIndices();\\n\\n    /// @notice Raised when one tries to submit a claim that skips some input.\\n    ///         For example, when the 1st claim starts at index 5 (instead of 0)\\n    ///         or when the 1st claim ends at index 20 but the 2nd claim starts at\\n    ///         index 22 (instead of 21).\\n    error UnclaimedInputs();\\n\\n    /// @notice Raised when one tries to retrieve a claim with an invalid index.\\n    error InvalidClaimIndex();\\n\\n    /// @notice Creates a `History` contract.\\n    /// @param _owner The initial owner\\n    constructor(address _owner) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (_owner != msg.sender) {\\n            transferOwnership(_owner);\\n        }\\n    }\\n\\n    /// @notice Submit a claim regarding a DApp.\\n    /// There are several requirements for this function to be called successfully.\\n    ///\\n    /// * `_claimData` MUST be well-encoded. In Solidity, it can be constructed\\n    ///   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)\\n    ///   and `claim` is the claim structure (type `Claim`).\\n    ///\\n    /// * `firstIndex` MUST be less than or equal to `lastIndex`.\\n    ///   As a result, every claim MUST encompass AT LEAST one input.\\n    ///\\n    /// * If this is the DApp's first claim, then `firstIndex` MUST be `0`.\\n    ///   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.\\n    ///   In other words, claims MUST NOT skip inputs.\\n    ///\\n    /// @inheritdoc IHistory\\n    /// @dev Emits a `NewClaimToHistory` event. Should have access control.\\n    ///      Incorrect claim input indices could raise two errors:\\n    ///      `InvalidInputIndices` if first index is posterior than last index or\\n    ///      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or\\n    ///                        if the first index of the first claim is not zero.\\n    function submitClaim(\\n        bytes calldata _claimData\\n    ) external override onlyOwner {\\n        (address dapp, Claim memory claim) = abi.decode(\\n            _claimData,\\n            (address, Claim)\\n        );\\n\\n        if (claim.firstIndex > claim.lastIndex) {\\n            revert InvalidInputIndices();\\n        }\\n\\n        uint256 numDAppClaims = numClaims[dapp];\\n\\n        if (\\n            claim.firstIndex !=\\n            (\\n                (numDAppClaims == 0)\\n                    ? 0\\n                    : (claims[dapp][numDAppClaims - 1].lastIndex + 1)\\n            )\\n        ) {\\n            revert UnclaimedInputs();\\n        }\\n\\n        claims[dapp][numDAppClaims] = claim;\\n        numClaims[dapp] = numDAppClaims + 1;\\n\\n        emit NewClaimToHistory(dapp, claim);\\n    }\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    /// There are several requirements for this function to be called successfully.\\n    ///\\n    /// * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed\\n    ///   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`).\\n    ///\\n    /// * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims\\n    ///   that have been submitted to `_dapp` already.\\n    ///\\n    /// @inheritdoc IHistory\\n    /// @dev If `claimIndex` is not inside the interval `[0, n)`, then\\n    ///      an `InvalidClaimIndex` error is raised.\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        uint256 claimIndex = abi.decode(_proofContext, (uint256));\\n\\n        uint256 numDAppClaims = numClaims[_dapp];\\n\\n        if (claimIndex >= numDAppClaims) {\\n            revert InvalidClaimIndex();\\n        }\\n\\n        Claim memory claim = claims[_dapp][claimIndex];\\n\\n        return (claim.epochHash, claim.firstIndex, claim.lastIndex);\\n    }\\n\\n    /// @inheritdoc IHistory\\n    /// @dev Emits an `OwnershipTransferred` event. Should have access control.\\n    function migrateToConsensus(\\n        address _consensus\\n    ) external override onlyOwner {\\n        transferOwnership(_consensus);\\n    }\\n}\\n\",\"keccak256\":\"0x9fa2563961c1769c3bba2b6b27ec90eca8423dd7b5b5f47e3ef90451a31d66c8\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/history/IHistory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title History interface\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim.\\n    ///         The encoding of `_claimData` might vary\\n    ///         depending on the history implementation.\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev Should have access control.\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Transfer ownership to another consensus.\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control.\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the history implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0x1378cbc831833abae8e2a565b88899d6416ea1208aa9724bd4df28e74848ffcf\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"contracts/authority/AuthorityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport {Authority} from \\\"@cartesi/rollups/contracts/consensus/authority/Authority.sol\\\";\\nimport {History} from \\\"@cartesi/rollups/contracts/history/History.sol\\\";\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport {IAuthorityFactory} from \\\"./IAuthorityFactory.sol\\\";\\n\\n/// @title Authority-History Pair Factory\\n/// @notice Allows anyone to reliably deploy a new Authority-History pair.\\ncontract AuthorityFactory is IAuthorityFactory {\\n    function newAuthority(\\n        address _authorityOwner\\n    ) public override returns (Authority) {\\n        Authority authority = new Authority(address(this));\\n        History history = new History(address(authority));\\n        authority.setHistory(history);\\n        authority.transferOwnership(_authorityOwner);\\n\\n        emit AuthorityCreated(authority);\\n\\n        return authority;\\n    }\\n\\n    function newAuthority() external override returns (Authority) {\\n        return newAuthority(msg.sender);\\n    }\\n\\n    function newAuthority(\\n        address _authorityOwner,\\n        bytes32 _salt\\n    ) public override returns (Authority) {\\n        _salt = calculateSalt(_authorityOwner, _salt);\\n        Authority authority = new Authority{salt: _salt}(address(this));\\n        History history = new History{salt: _salt}(address(authority));\\n        authority.setHistory(history);\\n        authority.transferOwnership(_authorityOwner);\\n\\n        emit AuthorityCreated(authority);\\n\\n        return authority;\\n    }\\n\\n    function newAuthority(bytes32 _salt) external override returns (Authority) {\\n        return newAuthority(msg.sender, _salt);\\n    }\\n\\n    function calculateAuthorityAddress(\\n        address _authorityOwner,\\n        bytes32 _salt\\n    ) external view override returns (address) {\\n        _salt = calculateSalt(_authorityOwner, _salt);\\n        return\\n            Create2.computeAddress(\\n                _salt,\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(Authority).creationCode,\\n                        abi.encode(_authorityOwner)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function calculateSalt(\\n        address _authorityOwner,\\n        bytes32 _salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_authorityOwner, _salt));\\n    }\\n}\\n\",\"keccak256\":\"0xcf7c2c93cc51056a7db919bfcbed3e9a0cb245efe570834647a51145c28e0340\",\"license\":\"Apache-2.0\"},\"contracts/authority/IAuthorityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport {Authority} from \\\"@cartesi/rollups/contracts/consensus/authority/Authority.sol\\\";\\n\\n/// @title Authority Factory interface\\ninterface IAuthorityFactory {\\n    // Events\\n\\n    /// @notice A new authority was deployed.\\n    /// @param authority The authority\\n    /// @dev MUST be triggered on a successful call to `newAuthority`.\\n    event AuthorityCreated(Authority authority);\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new authority.\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority() external returns (Authority);\\n\\n    /// @notice Deploy a new authority.\\n    /// @param _authorityOwner The initial authority owner\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority(address _authorityOwner) external returns (Authority);\\n\\n    /// @notice Deploy a new authority deterministically.\\n    /// @param _authorityOwner The initial authority owner\\n    /// @param _salt The salt used to deterministically generate the authority address\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority(\\n        address _authorityOwner,\\n        bytes32 _salt\\n    ) external returns (Authority);\\n\\n    /// @notice Deploy a new authority deterministically.\\n    /// @param _salt The salt used to deterministically generate the authority address\\n    /// @return The authority\\n    /// @dev On success, MUST emit an `AuthorityCreated` event.\\n    function newAuthority(bytes32 _salt) external returns (Authority);\\n\\n    /// @notice Calculate the address of an authority to be deployed deterministically.\\n    /// @param _authorityOwner The initial authority owner\\n    /// @param _salt The salt used to deterministically generate the authority address\\n    /// @return The deterministic authority address\\n    /// @dev Beware that only the `newAuthority` function with the `_salt` parameter\\n    ///      is able to deterministically deploy an authority.\\n    function calculateAuthorityAddress(\\n        address _authorityOwner,\\n        bytes32 _salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4eca04f227e848ec78841d9148f57f3e111aa8d4dfe7345fa250b6d5ce919a05\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613083806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200005d5760003560e01c80629c578414620000625780631361ab5e14620000985780634ba7c12014620000ba5780635a3f27d314620000f0578063b3a51b841462000126575b600080fd5b6200008060048036038101906200007a9190620006a1565b6200015c565b6040516200008f9190620006f9565b60405180910390f35b620000a2620001f0565b604051620000b1919062000781565b60405180910390f35b620000d86004803603810190620000d291906200079e565b62000202565b604051620000e7919062000781565b60405180910390f35b6200010e6004803603810190620001089190620006a1565b62000217565b6040516200011d919062000781565b60405180910390f35b6200014460048036038101906200013e9190620007d0565b620003cd565b60405162000153919062000781565b60405180910390f35b60006200016a838362000569565b9150620001e882604051806020016200018390620005e0565b6020820181038252601f19601f8201166040525085604051602001620001aa9190620006f9565b604051602081830303815290604052604051602001620001cc9291906200087b565b604051602081830303815290604052805190602001206200059e565b905092915050565b6000620001fd33620003cd565b905090565b600062000210338362000217565b9050919050565b600062000225838362000569565b9150600082306040516200023990620005e0565b620002459190620006f9565b8190604051809103906000f590508015801562000266573d6000803e3d6000fd5b509050600083826040516200027b90620005ee565b620002879190620006f9565b8190604051809103906000f5905080158015620002a8573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff1663159c5ea1826040518263ffffffff1660e01b8152600401620002e69190620008c8565b600060405180830381600087803b1580156200030157600080fd5b505af115801562000316573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b866040518263ffffffff1660e01b8152600401620003559190620006f9565b600060405180830381600087803b1580156200037057600080fd5b505af115801562000385573d6000803e3d6000fd5b505050507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f82604051620003ba919062000781565b60405180910390a1819250505092915050565b60008030604051620003df90620005e0565b620003eb9190620006f9565b604051809103906000f08015801562000408573d6000803e3d6000fd5b5090506000816040516200041c90620005ee565b620004289190620006f9565b604051809103906000f08015801562000445573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff1663159c5ea1826040518263ffffffff1660e01b8152600401620004839190620008c8565b600060405180830381600087803b1580156200049e57600080fd5b505af1158015620004b3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b856040518263ffffffff1660e01b8152600401620004f29190620006f9565b600060405180830381600087803b1580156200050d57600080fd5b505af115801562000522573d6000803e3d6000fd5b505050507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f8260405162000557919062000781565b60405180910390a18192505050919050565b60008282604051602001620005809291906200095a565b60405160208183030381529060405280519060200120905092915050565b6000620005ad838330620005b5565b905092915050565b6000604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b6112cd806200098b83390190565b6113f68062001c5883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200062e8262000601565b9050919050565b620006408162000621565b81146200064c57600080fd5b50565b600081359050620006608162000635565b92915050565b6000819050919050565b6200067b8162000666565b81146200068757600080fd5b50565b6000813590506200069b8162000670565b92915050565b60008060408385031215620006bb57620006ba620005fc565b5b6000620006cb858286016200064f565b9250506020620006de858286016200068a565b9150509250929050565b620006f38162000621565b82525050565b6000602082019050620007106000830184620006e8565b92915050565b6000819050919050565b6000620007416200073b620007358462000601565b62000716565b62000601565b9050919050565b6000620007558262000720565b9050919050565b6000620007698262000748565b9050919050565b6200077b816200075c565b82525050565b600060208201905062000798600083018462000770565b92915050565b600060208284031215620007b757620007b6620005fc565b5b6000620007c7848285016200068a565b91505092915050565b600060208284031215620007e957620007e8620005fc565b5b6000620007f9848285016200064f565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015620008385780820151818401526020810190506200081b565b60008484015250505050565b6000620008518262000802565b6200085d81856200080d565b93506200086f81856020860162000818565b80840191505092915050565b600062000889828562000844565b915062000897828462000844565b91508190509392505050565b6000620008b08262000748565b9050919050565b620008c281620008a3565b82525050565b6000602082019050620008df6000830184620008b7565b92915050565b60008160601b9050919050565b6000620008ff82620008e5565b9050919050565b60006200091382620008f2565b9050919050565b6200092f620009298262000621565b62000906565b82525050565b6000819050919050565b620009546200094e8262000666565b62000935565b82525050565b60006200096882856200091a565b6014820191506200097a82846200093f565b602082019150819050939250505056fe60806040523480156200001157600080fd5b50604051620012cd380380620012cd83398181016040528101906200003791906200032a565b620000576200004b620000a460201b60201c565b620000ac60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200009d576200009c816200017060201b60201c565b5b5062000477565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001806200020660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e990620003e3565b60405180910390fd5b6200020381620000ac60201b60201c565b50565b62000216620000a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200023c6200029760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000295576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028c9062000455565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f282620002c5565b9050919050565b6200030481620002e5565b81146200031057600080fd5b50565b6000815190506200032481620002f9565b92915050565b600060208284031215620003435762000342620002c0565b5b6000620003538482850162000313565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620003cb6026836200035c565b9150620003d8826200036d565b604082019050919050565b60006020820190508181036000830152620003fe81620003bc565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200043d6020836200035c565b91506200044a8262000405565b602082019050919050565b6000602082019050818103600083015262000470816200042e565b9050919050565b610e4680620004876000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a36314610121578063bcdd1e131461012b578063d79a824014610147578063ddfdfbb014610179578063f2fde38b146101955761009e565b8063159c5ea1146100a3578063715018a6146100bf5780638da5cb5b146100c95780639368a3d3146100e7578063aa15efc814610103575b600080fd5b6100bd60048036038101906100b891906107c9565b6101b1565b005b6100c7610234565b005b6100d1610248565b6040516100de9190610805565b60405180910390f35b61010160048036038101906100fc919061084c565b610271565b005b61010b610309565b60405161011891906108d8565b60405180910390f35b610129610333565b005b61014560048036038101906101409190610967565b61036c565b005b610161600480360381019061015c9190610a1f565b610433565b60405161017093929190610aa7565b60405180910390f35b610193600480360381019061018e9190610ade565b6104e7565b005b6101af60048036038101906101aa919061084c565b610582565b005b6101b9610605565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e8160405161022991906108d8565b60405180910390a150565b61023c610605565b6102466000610683565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610279610605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc411683826040518263ffffffff1660e01b81526004016102d49190610805565b600060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce5336040516103629190610805565b60405180910390a1565b610374610605565b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016103b1929190610b2b565b6020604051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610b8c565b90508061042d576040517f133c394e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79a82408787876040518463ffffffff1660e01b815260040161049793929190610c17565b606060405180830381865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610c8a565b92509250925093509350939050565b6104ef610605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddfdfbb083836040518363ffffffff1660e01b815260040161054c929190610cdd565b600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050505050565b61058a610605565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090610d84565b60405180910390fd5b61060281610683565b50565b61060d610747565b73ffffffffffffffffffffffffffffffffffffffff1661062b610248565b73ffffffffffffffffffffffffffffffffffffffff1614610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890610df0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078482610759565b9050919050565b600061079682610779565b9050919050565b6107a68161078b565b81146107b157600080fd5b50565b6000813590506107c38161079d565b92915050565b6000602082840312156107df576107de61074f565b5b60006107ed848285016107b4565b91505092915050565b6107ff81610779565b82525050565b600060208201905061081a60008301846107f6565b92915050565b61082981610779565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b6000602082840312156108625761086161074f565b5b600061087084828501610837565b91505092915050565b6000819050919050565b600061089e61089961089484610759565b610879565b610759565b9050919050565b60006108b082610883565b9050919050565b60006108c2826108a5565b9050919050565b6108d2816108b7565b82525050565b60006020820190506108ed60008301846108c9565b92915050565b60006108fe82610779565b9050919050565b61090e816108f3565b811461091957600080fd5b50565b60008135905061092b81610905565b92915050565b6000819050919050565b61094481610931565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b6000806000606084860312156109805761097f61074f565b5b600061098e8682870161091c565b935050602061099f86828701610837565b92505060406109b086828701610952565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126109df576109de6109ba565b5b8235905067ffffffffffffffff8111156109fc576109fb6109bf565b5b602083019150836001820283011115610a1857610a176109c4565b5b9250929050565b600080600060408486031215610a3857610a3761074f565b5b6000610a4686828701610837565b935050602084013567ffffffffffffffff811115610a6757610a66610754565b5b610a73868287016109c9565b92509250509250925092565b6000819050919050565b610a9281610a7f565b82525050565b610aa181610931565b82525050565b6000606082019050610abc6000830186610a89565b610ac96020830185610a98565b610ad66040830184610a98565b949350505050565b60008060208385031215610af557610af461074f565b5b600083013567ffffffffffffffff811115610b1357610b12610754565b5b610b1f858286016109c9565b92509250509250929050565b6000604082019050610b4060008301856107f6565b610b4d6020830184610a98565b9392505050565b60008115159050919050565b610b6981610b54565b8114610b7457600080fd5b50565b600081519050610b8681610b60565b92915050565b600060208284031215610ba257610ba161074f565b5b6000610bb084828501610b77565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610bf68385610bb9565b9350610c03838584610bca565b610c0c83610bd9565b840190509392505050565b6000604082019050610c2c60008301866107f6565b8181036020830152610c3f818486610bea565b9050949350505050565b610c5281610a7f565b8114610c5d57600080fd5b50565b600081519050610c6f81610c49565b92915050565b600081519050610c848161093b565b92915050565b600080600060608486031215610ca357610ca261074f565b5b6000610cb186828701610c60565b9350506020610cc286828701610c75565b9250506040610cd386828701610c75565b9150509250925092565b60006020820190508181036000830152610cf8818486610bea565b90509392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d6e602683610d01565b9150610d7982610d12565b604082019050919050565b60006020820190508181036000830152610d9d81610d61565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610dda602083610d01565b9150610de582610da4565b602082019050919050565b60006020820190508181036000830152610e0981610dcd565b905091905056fea264697066735822122095c7ee4fe2ae0dfe34ed7b33ad72bdfa698f2e0522e01466f06d974910f2fa3d64736f6c6343000814003360806040523480156200001157600080fd5b50604051620013f6380380620013f683398181016040528101906200003791906200032a565b620000576200004b620000a460201b60201c565b620000ac60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200009d576200009c816200017060201b60201c565b5b5062000477565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001806200020660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e990620003e3565b60405180910390fd5b6200020381620000ac60201b60201c565b50565b62000216620000a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200023c6200029760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000295576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028c9062000455565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f282620002c5565b9050919050565b6200030481620002e5565b81146200031057600080fd5b50565b6000815190506200032481620002f9565b92915050565b600060208284031215620003435762000342620002c0565b5b6000620003538482850162000313565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620003cb6026836200035c565b9150620003d8826200036d565b604082019050919050565b60006020820190508181036000830152620003fe81620003bc565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200043d6020836200035c565b91506200044a8262000405565b602082019050919050565b6000602082019050818103600083015262000470816200042e565b9050919050565b610f6f80620004876000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a82401461008f578063ddfdfbb0146100c1578063f2fde38b146100dd578063fc411683146100f9575b600080fd5b61006f610115565b005b610079610129565b6040516100869190610891565b60405180910390f35b6100a960048036038101906100a49190610951565b610152565b6040516100b8939291906109e3565b60405180910390f35b6100db60048036038101906100d69190610a1a565b61032e565b005b6100f760048036038101906100f29190610a67565b61066f565b005b610113600480360381019061010e9190610a67565b6106f2565b005b61011d610706565b6101276000610784565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008085858101906101679190610ac0565b90506000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508082106101e6576040517f87332c0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050806000015181602001518260400151816fffffffffffffffffffffffffffffffff169150806fffffffffffffffffffffffffffffffff16905095509550955050505093509350939050565b610336610706565b60008083838101906103489190610c94565b9150915080604001516fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff1611156103b2576040517f123974fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811461048b576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461044e9190610d03565b815260200190815260200160002060010160109054906101000a90046fffffffffffffffffffffffffffffffff166104869190610d37565b61048e565b60005b6fffffffffffffffffffffffffffffffff1682602001516fffffffffffffffffffffffffffffffff16146104ee576040517f118b891b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506001816105d79190610d7b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f836040516106609190610e0f565b60405180910390a25050505050565b610677610706565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610ead565b60405180910390fd5b6106ef81610784565b50565b6106fa610706565b6107038161066f565b50565b61070e610848565b73ffffffffffffffffffffffffffffffffffffffff1661072c610129565b73ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990610f19565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087b82610850565b9050919050565b61088b81610870565b82525050565b60006020820190506108a66000830184610882565b92915050565b6000604051905090565b600080fd5b600080fd5b6108c981610870565b81146108d457600080fd5b50565b6000813590506108e6816108c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610911576109106108ec565b5b8235905067ffffffffffffffff81111561092e5761092d6108f1565b5b60208301915083600182028301111561094a576109496108f6565b5b9250929050565b60008060006040848603121561096a576109696108b6565b5b6000610978868287016108d7565b935050602084013567ffffffffffffffff811115610999576109986108bb565b5b6109a5868287016108fb565b92509250509250925092565b6000819050919050565b6109c4816109b1565b82525050565b6000819050919050565b6109dd816109ca565b82525050565b60006060820190506109f860008301866109bb565b610a0560208301856109d4565b610a1260408301846109d4565b949350505050565b60008060208385031215610a3157610a306108b6565b5b600083013567ffffffffffffffff811115610a4f57610a4e6108bb565b5b610a5b858286016108fb565b92509250509250929050565b600060208284031215610a7d57610a7c6108b6565b5b6000610a8b848285016108d7565b91505092915050565b610a9d816109ca565b8114610aa857600080fd5b50565b600081359050610aba81610a94565b92915050565b600060208284031215610ad657610ad56108b6565b5b6000610ae484828501610aab565b91505092915050565b6000610af882610850565b9050919050565b610b0881610aed565b8114610b1357600080fd5b50565b600081359050610b2581610aff565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b7982610b30565b810181811067ffffffffffffffff82111715610b9857610b97610b41565b5b80604052505050565b6000610bab6108ac565b9050610bb78282610b70565b919050565b610bc5816109b1565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610c0d81610be8565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b600060608284031215610c4657610c45610b2b565b5b610c506060610ba1565b90506000610c6084828501610bd3565b6000830152506020610c7484828501610c1b565b6020830152506040610c8884828501610c1b565b60408301525092915050565b60008060808385031215610cab57610caa6108b6565b5b6000610cb985828601610b16565b9250506020610cca85828601610c30565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0e826109ca565b9150610d19836109ca565b9250828203905081811115610d3157610d30610cd4565b5b92915050565b6000610d4282610be8565b9150610d4d83610be8565b925082820190506fffffffffffffffffffffffffffffffff811115610d7557610d74610cd4565b5b92915050565b6000610d86826109ca565b9150610d91836109ca565b9250828201905080821115610da957610da8610cd4565b5b92915050565b610db8816109b1565b82525050565b610dc781610be8565b82525050565b606082016000820151610de36000850182610daf565b506020820151610df66020850182610dbe565b506040820151610e096040850182610dbe565b50505050565b6000606082019050610e246000830184610dcd565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e97602683610e2a565b9150610ea282610e3b565b604082019050919050565b60006020820190508181036000830152610ec681610e8a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f03602083610e2a565b9150610f0e82610ecd565b602082019050919050565b60006020820190508181036000830152610f3281610ef6565b905091905056fea2646970667358221220daac46135698179a60376d66ab5483c8649983a4e859bbc1c36f1cb3a0a197d064736f6c63430008140033a2646970667358221220a739f3195eb048da8a65bbdeb4ede0e9fe43a68c418898f1008786949d99d91964736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005d5760003560e01c80629c578414620000625780631361ab5e14620000985780634ba7c12014620000ba5780635a3f27d314620000f0578063b3a51b841462000126575b600080fd5b6200008060048036038101906200007a9190620006a1565b6200015c565b6040516200008f9190620006f9565b60405180910390f35b620000a2620001f0565b604051620000b1919062000781565b60405180910390f35b620000d86004803603810190620000d291906200079e565b62000202565b604051620000e7919062000781565b60405180910390f35b6200010e6004803603810190620001089190620006a1565b62000217565b6040516200011d919062000781565b60405180910390f35b6200014460048036038101906200013e9190620007d0565b620003cd565b60405162000153919062000781565b60405180910390f35b60006200016a838362000569565b9150620001e882604051806020016200018390620005e0565b6020820181038252601f19601f8201166040525085604051602001620001aa9190620006f9565b604051602081830303815290604052604051602001620001cc9291906200087b565b604051602081830303815290604052805190602001206200059e565b905092915050565b6000620001fd33620003cd565b905090565b600062000210338362000217565b9050919050565b600062000225838362000569565b9150600082306040516200023990620005e0565b620002459190620006f9565b8190604051809103906000f590508015801562000266573d6000803e3d6000fd5b509050600083826040516200027b90620005ee565b620002879190620006f9565b8190604051809103906000f5905080158015620002a8573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff1663159c5ea1826040518263ffffffff1660e01b8152600401620002e69190620008c8565b600060405180830381600087803b1580156200030157600080fd5b505af115801562000316573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b866040518263ffffffff1660e01b8152600401620003559190620006f9565b600060405180830381600087803b1580156200037057600080fd5b505af115801562000385573d6000803e3d6000fd5b505050507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f82604051620003ba919062000781565b60405180910390a1819250505092915050565b60008030604051620003df90620005e0565b620003eb9190620006f9565b604051809103906000f08015801562000408573d6000803e3d6000fd5b5090506000816040516200041c90620005ee565b620004289190620006f9565b604051809103906000f08015801562000445573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff1663159c5ea1826040518263ffffffff1660e01b8152600401620004839190620008c8565b600060405180830381600087803b1580156200049e57600080fd5b505af1158015620004b3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b856040518263ffffffff1660e01b8152600401620004f29190620006f9565b600060405180830381600087803b1580156200050d57600080fd5b505af115801562000522573d6000803e3d6000fd5b505050507fdca1fad70bee4ba7a4e17a1c6e99e657d2251af7a279124758bc01588abe2d2f8260405162000557919062000781565b60405180910390a18192505050919050565b60008282604051602001620005809291906200095a565b60405160208183030381529060405280519060200120905092915050565b6000620005ad838330620005b5565b905092915050565b6000604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b6112cd806200098b83390190565b6113f68062001c5883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200062e8262000601565b9050919050565b620006408162000621565b81146200064c57600080fd5b50565b600081359050620006608162000635565b92915050565b6000819050919050565b6200067b8162000666565b81146200068757600080fd5b50565b6000813590506200069b8162000670565b92915050565b60008060408385031215620006bb57620006ba620005fc565b5b6000620006cb858286016200064f565b9250506020620006de858286016200068a565b9150509250929050565b620006f38162000621565b82525050565b6000602082019050620007106000830184620006e8565b92915050565b6000819050919050565b6000620007416200073b620007358462000601565b62000716565b62000601565b9050919050565b6000620007558262000720565b9050919050565b6000620007698262000748565b9050919050565b6200077b816200075c565b82525050565b600060208201905062000798600083018462000770565b92915050565b600060208284031215620007b757620007b6620005fc565b5b6000620007c7848285016200068a565b91505092915050565b600060208284031215620007e957620007e8620005fc565b5b6000620007f9848285016200064f565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015620008385780820151818401526020810190506200081b565b60008484015250505050565b6000620008518262000802565b6200085d81856200080d565b93506200086f81856020860162000818565b80840191505092915050565b600062000889828562000844565b915062000897828462000844565b91508190509392505050565b6000620008b08262000748565b9050919050565b620008c281620008a3565b82525050565b6000602082019050620008df6000830184620008b7565b92915050565b60008160601b9050919050565b6000620008ff82620008e5565b9050919050565b60006200091382620008f2565b9050919050565b6200092f620009298262000621565b62000906565b82525050565b6000819050919050565b620009546200094e8262000666565b62000935565b82525050565b60006200096882856200091a565b6014820191506200097a82846200093f565b602082019150819050939250505056fe60806040523480156200001157600080fd5b50604051620012cd380380620012cd83398181016040528101906200003791906200032a565b620000576200004b620000a460201b60201c565b620000ac60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200009d576200009c816200017060201b60201c565b5b5062000477565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001806200020660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e990620003e3565b60405180910390fd5b6200020381620000ac60201b60201c565b50565b62000216620000a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200023c6200029760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000295576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028c9062000455565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f282620002c5565b9050919050565b6200030481620002e5565b81146200031057600080fd5b50565b6000815190506200032481620002f9565b92915050565b600060208284031215620003435762000342620002c0565b5b6000620003538482850162000313565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620003cb6026836200035c565b9150620003d8826200036d565b604082019050919050565b60006020820190508181036000830152620003fe81620003bc565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200043d6020836200035c565b91506200044a8262000405565b602082019050919050565b6000602082019050818103600083015262000470816200042e565b9050919050565b610e4680620004876000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a36314610121578063bcdd1e131461012b578063d79a824014610147578063ddfdfbb014610179578063f2fde38b146101955761009e565b8063159c5ea1146100a3578063715018a6146100bf5780638da5cb5b146100c95780639368a3d3146100e7578063aa15efc814610103575b600080fd5b6100bd60048036038101906100b891906107c9565b6101b1565b005b6100c7610234565b005b6100d1610248565b6040516100de9190610805565b60405180910390f35b61010160048036038101906100fc919061084c565b610271565b005b61010b610309565b60405161011891906108d8565b60405180910390f35b610129610333565b005b61014560048036038101906101409190610967565b61036c565b005b610161600480360381019061015c9190610a1f565b610433565b60405161017093929190610aa7565b60405180910390f35b610193600480360381019061018e9190610ade565b6104e7565b005b6101af60048036038101906101aa919061084c565b610582565b005b6101b9610605565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e8160405161022991906108d8565b60405180910390a150565b61023c610605565b6102466000610683565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610279610605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc411683826040518263ffffffff1660e01b81526004016102d49190610805565b600060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce5336040516103629190610805565b60405180910390a1565b610374610605565b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016103b1929190610b2b565b6020604051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610b8c565b90508061042d576040517f133c394e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79a82408787876040518463ffffffff1660e01b815260040161049793929190610c17565b606060405180830381865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610c8a565b92509250925093509350939050565b6104ef610605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddfdfbb083836040518363ffffffff1660e01b815260040161054c929190610cdd565b600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050505050565b61058a610605565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090610d84565b60405180910390fd5b61060281610683565b50565b61060d610747565b73ffffffffffffffffffffffffffffffffffffffff1661062b610248565b73ffffffffffffffffffffffffffffffffffffffff1614610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890610df0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078482610759565b9050919050565b600061079682610779565b9050919050565b6107a68161078b565b81146107b157600080fd5b50565b6000813590506107c38161079d565b92915050565b6000602082840312156107df576107de61074f565b5b60006107ed848285016107b4565b91505092915050565b6107ff81610779565b82525050565b600060208201905061081a60008301846107f6565b92915050565b61082981610779565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b6000602082840312156108625761086161074f565b5b600061087084828501610837565b91505092915050565b6000819050919050565b600061089e61089961089484610759565b610879565b610759565b9050919050565b60006108b082610883565b9050919050565b60006108c2826108a5565b9050919050565b6108d2816108b7565b82525050565b60006020820190506108ed60008301846108c9565b92915050565b60006108fe82610779565b9050919050565b61090e816108f3565b811461091957600080fd5b50565b60008135905061092b81610905565b92915050565b6000819050919050565b61094481610931565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b6000806000606084860312156109805761097f61074f565b5b600061098e8682870161091c565b935050602061099f86828701610837565b92505060406109b086828701610952565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126109df576109de6109ba565b5b8235905067ffffffffffffffff8111156109fc576109fb6109bf565b5b602083019150836001820283011115610a1857610a176109c4565b5b9250929050565b600080600060408486031215610a3857610a3761074f565b5b6000610a4686828701610837565b935050602084013567ffffffffffffffff811115610a6757610a66610754565b5b610a73868287016109c9565b92509250509250925092565b6000819050919050565b610a9281610a7f565b82525050565b610aa181610931565b82525050565b6000606082019050610abc6000830186610a89565b610ac96020830185610a98565b610ad66040830184610a98565b949350505050565b60008060208385031215610af557610af461074f565b5b600083013567ffffffffffffffff811115610b1357610b12610754565b5b610b1f858286016109c9565b92509250509250929050565b6000604082019050610b4060008301856107f6565b610b4d6020830184610a98565b9392505050565b60008115159050919050565b610b6981610b54565b8114610b7457600080fd5b50565b600081519050610b8681610b60565b92915050565b600060208284031215610ba257610ba161074f565b5b6000610bb084828501610b77565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610bf68385610bb9565b9350610c03838584610bca565b610c0c83610bd9565b840190509392505050565b6000604082019050610c2c60008301866107f6565b8181036020830152610c3f818486610bea565b9050949350505050565b610c5281610a7f565b8114610c5d57600080fd5b50565b600081519050610c6f81610c49565b92915050565b600081519050610c848161093b565b92915050565b600080600060608486031215610ca357610ca261074f565b5b6000610cb186828701610c60565b9350506020610cc286828701610c75565b9250506040610cd386828701610c75565b9150509250925092565b60006020820190508181036000830152610cf8818486610bea565b90509392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d6e602683610d01565b9150610d7982610d12565b604082019050919050565b60006020820190508181036000830152610d9d81610d61565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610dda602083610d01565b9150610de582610da4565b602082019050919050565b60006020820190508181036000830152610e0981610dcd565b905091905056fea264697066735822122095c7ee4fe2ae0dfe34ed7b33ad72bdfa698f2e0522e01466f06d974910f2fa3d64736f6c6343000814003360806040523480156200001157600080fd5b50604051620013f6380380620013f683398181016040528101906200003791906200032a565b620000576200004b620000a460201b60201c565b620000ac60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200009d576200009c816200017060201b60201c565b5b5062000477565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001806200020660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e990620003e3565b60405180910390fd5b6200020381620000ac60201b60201c565b50565b62000216620000a460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200023c6200029760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000295576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028c9062000455565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f282620002c5565b9050919050565b6200030481620002e5565b81146200031057600080fd5b50565b6000815190506200032481620002f9565b92915050565b600060208284031215620003435762000342620002c0565b5b6000620003538482850162000313565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620003cb6026836200035c565b9150620003d8826200036d565b604082019050919050565b60006020820190508181036000830152620003fe81620003bc565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200043d6020836200035c565b91506200044a8262000405565b602082019050919050565b6000602082019050818103600083015262000470816200042e565b9050919050565b610f6f80620004876000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a82401461008f578063ddfdfbb0146100c1578063f2fde38b146100dd578063fc411683146100f9575b600080fd5b61006f610115565b005b610079610129565b6040516100869190610891565b60405180910390f35b6100a960048036038101906100a49190610951565b610152565b6040516100b8939291906109e3565b60405180910390f35b6100db60048036038101906100d69190610a1a565b61032e565b005b6100f760048036038101906100f29190610a67565b61066f565b005b610113600480360381019061010e9190610a67565b6106f2565b005b61011d610706565b6101276000610784565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008085858101906101679190610ac0565b90506000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508082106101e6576040517f87332c0100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050806000015181602001518260400151816fffffffffffffffffffffffffffffffff169150806fffffffffffffffffffffffffffffffff16905095509550955050505093509350939050565b610336610706565b60008083838101906103489190610c94565b9150915080604001516fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff1611156103b2576040517f123974fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811461048b576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018461044e9190610d03565b815260200190815260200160002060010160109054906101000a90046fffffffffffffffffffffffffffffffff166104869190610d37565b61048e565b60005b6fffffffffffffffffffffffffffffffff1682602001516fffffffffffffffffffffffffffffffff16146104ee576040517f118b891b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506001816105d79190610d7b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f836040516106609190610e0f565b60405180910390a25050505050565b610677610706565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd90610ead565b60405180910390fd5b6106ef81610784565b50565b6106fa610706565b6107038161066f565b50565b61070e610848565b73ffffffffffffffffffffffffffffffffffffffff1661072c610129565b73ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990610f19565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087b82610850565b9050919050565b61088b81610870565b82525050565b60006020820190506108a66000830184610882565b92915050565b6000604051905090565b600080fd5b600080fd5b6108c981610870565b81146108d457600080fd5b50565b6000813590506108e6816108c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610911576109106108ec565b5b8235905067ffffffffffffffff81111561092e5761092d6108f1565b5b60208301915083600182028301111561094a576109496108f6565b5b9250929050565b60008060006040848603121561096a576109696108b6565b5b6000610978868287016108d7565b935050602084013567ffffffffffffffff811115610999576109986108bb565b5b6109a5868287016108fb565b92509250509250925092565b6000819050919050565b6109c4816109b1565b82525050565b6000819050919050565b6109dd816109ca565b82525050565b60006060820190506109f860008301866109bb565b610a0560208301856109d4565b610a1260408301846109d4565b949350505050565b60008060208385031215610a3157610a306108b6565b5b600083013567ffffffffffffffff811115610a4f57610a4e6108bb565b5b610a5b858286016108fb565b92509250509250929050565b600060208284031215610a7d57610a7c6108b6565b5b6000610a8b848285016108d7565b91505092915050565b610a9d816109ca565b8114610aa857600080fd5b50565b600081359050610aba81610a94565b92915050565b600060208284031215610ad657610ad56108b6565b5b6000610ae484828501610aab565b91505092915050565b6000610af882610850565b9050919050565b610b0881610aed565b8114610b1357600080fd5b50565b600081359050610b2581610aff565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b7982610b30565b810181811067ffffffffffffffff82111715610b9857610b97610b41565b5b80604052505050565b6000610bab6108ac565b9050610bb78282610b70565b919050565b610bc5816109b1565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610c0d81610be8565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b600060608284031215610c4657610c45610b2b565b5b610c506060610ba1565b90506000610c6084828501610bd3565b6000830152506020610c7484828501610c1b565b6020830152506040610c8884828501610c1b565b60408301525092915050565b60008060808385031215610cab57610caa6108b6565b5b6000610cb985828601610b16565b9250506020610cca85828601610c30565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0e826109ca565b9150610d19836109ca565b9250828203905081811115610d3157610d30610cd4565b5b92915050565b6000610d4282610be8565b9150610d4d83610be8565b925082820190506fffffffffffffffffffffffffffffffff811115610d7557610d74610cd4565b5b92915050565b6000610d86826109ca565b9150610d91836109ca565b9250828201905080821115610da957610da8610cd4565b5b92915050565b610db8816109b1565b82525050565b610dc781610be8565b82525050565b606082016000820151610de36000850182610daf565b506020820151610df66020850182610dbe565b506040820151610e096040850182610dbe565b50505050565b6000606082019050610e246000830184610dcd565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e97602683610e2a565b9150610ea282610e3b565b604082019050919050565b60006020820190508181036000830152610ec681610e8a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f03602083610e2a565b9150610f0e82610ecd565b602082019050919050565b60006020820190508181036000830152610f3281610ef6565b905091905056fea2646970667358221220daac46135698179a60376d66ab5483c8649983a4e859bbc1c36f1cb3a0a197d064736f6c63430008140033a2646970667358221220a739f3195eb048da8a65bbdeb4ede0e9fe43a68c418898f1008786949d99d91964736f6c63430008140033",
  "devdoc": {
    "events": {
      "AuthorityCreated(address)": {
        "details": "MUST be triggered on a successful call to `newAuthority`.",
        "params": {
          "authority": "The authority"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateAuthorityAddress(address,bytes32)": {
        "details": "Beware that only the `newAuthority` function with the `_salt` parameter      is able to deterministically deploy an authority.",
        "params": {
          "_authorityOwner": "The initial authority owner",
          "_salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The deterministic authority address"
        }
      },
      "newAuthority()": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "returns": {
          "_0": "The authority"
        }
      },
      "newAuthority(address)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "params": {
          "_authorityOwner": "The initial authority owner"
        },
        "returns": {
          "_0": "The authority"
        }
      },
      "newAuthority(address,bytes32)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "params": {
          "_authorityOwner": "The initial authority owner",
          "_salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The authority"
        }
      },
      "newAuthority(bytes32)": {
        "details": "On success, MUST emit an `AuthorityCreated` event.",
        "params": {
          "_salt": "The salt used to deterministically generate the authority address"
        },
        "returns": {
          "_0": "The authority"
        }
      }
    },
    "title": "Authority-History Pair Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AuthorityCreated(address)": {
        "notice": "A new authority was deployed."
      }
    },
    "kind": "user",
    "methods": {
      "calculateAuthorityAddress(address,bytes32)": {
        "notice": "Calculate the address of an authority to be deployed deterministically."
      },
      "newAuthority()": {
        "notice": "Deploy a new authority."
      },
      "newAuthority(address)": {
        "notice": "Deploy a new authority."
      },
      "newAuthority(address,bytes32)": {
        "notice": "Deploy a new authority deterministically."
      },
      "newAuthority(bytes32)": {
        "notice": "Deploy a new authority deterministically."
      }
    },
    "notice": "Allows anyone to reliably deploy a new Authority-History pair.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}