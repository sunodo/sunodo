{
  "address": "0x666881026AD77F8c77A3aEc0e22B555B3E9462dB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICartesiIPFSDAppFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20DAppFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ERC20DAppFactoryCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ICartesiIPFSDAppFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "newERC20DAppFactory",
      "outputs": [
        {
          "internalType": "contract ERC20DAppFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec54e3139851716595734d81880b90d43c582eb73b323927fe54e1f219554fc0",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xd8464d1B3592b6c3786B32931E2a2AdAC501Aaad",
    "contractAddress": null,
    "transactionIndex": 37,
    "gasUsed": "2872767",
    "logsBloom": "0x
    "blockHash": "0x90b73096e3d5209ae0ec2422ffde1de509ca33b76d50d98c24e14b27710e5f53",
    "transactionHash": "0xec54e3139851716595734d81880b90d43c582eb73b323927fe54e1f219554fc0",
    "logs": [],
    "blockNumber": 3976539,
    "cumulativeGasUsed": "7397150",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3450e47CcDbcaA57A93BC3E3d6D94E928Fb0B668"
  ],
  "numDeployments": 1,
  "solcInputHash": "10837a4c101a5daacb5f95564f85b717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICartesiIPFSDAppFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20DAppFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC20DAppFactoryCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ICartesiIPFSDAppFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"newERC20DAppFactory\",\"outputs\":[{\"internalType\":\"contract ERC20DAppFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC20DAppFactoryCreated(address,address)\":{\"params\":{\"factory\":\"The address of the factory\",\"token\":\"The token used for billing\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ERC20DAppFactoryCreated(address,address)\":{\"notice\":\"A new factory was created\"}},\"kind\":\"user\",\"methods\":{\"newERC20DAppFactory(address)\":{\"notice\":\"Create a new ERC20 based DApp factory using the specified token\"}},\"notice\":\"Factory for creating new ERC20 based DApp factories\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/ERC20DAppSystem.sol\":\"ERC20DAppSystem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/rollups/contracts/common/CanonicalMachine.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Base-2 logarithm of number of bytes.\\n    type Log2Size is uint64;\\n\\n    /// @notice Machine word size (8 bytes).\\n    Log2Size constant WORD_LOG2_SIZE = Log2Size.wrap(3);\\n\\n    /// @notice Machine address space size (2^64 bytes).\\n    Log2Size constant MACHINE_LOG2_SIZE = Log2Size.wrap(64);\\n\\n    /// @notice Keccak-256 output size (32 bytes).\\n    Log2Size constant KECCAK_LOG2_SIZE = Log2Size.wrap(5);\\n\\n    /// @notice Maximum input size (~2 megabytes).\\n    /// @dev The offset and size fields use up the extra 64 bytes.\\n    uint256 constant INPUT_MAX_SIZE = (1 << 21) - 64;\\n\\n    /// @notice Maximum voucher metadata memory range (2 megabytes).\\n    Log2Size constant VOUCHER_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum notice metadata memory range (2 megabytes).\\n    Log2Size constant NOTICE_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum epoch voucher memory range (128 megabytes).\\n    Log2Size constant EPOCH_VOUCHER_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Maximum epoch notice memory range (128 megabytes).\\n    Log2Size constant EPOCH_NOTICE_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Unwrap `s` into its underlying uint64 value.\\n    /// @param s Base-2 logarithm of some number of bytes\\n    function uint64OfSize(Log2Size s) internal pure returns (uint64) {\\n        return Log2Size.unwrap(s);\\n    }\\n\\n    /// @notice Return the position of an intra memory range on a memory range\\n    ///         with contents with the same size.\\n    /// @param index Index of intra memory range\\n    /// @param log2Size Base-2 logarithm of intra memory range size\\n    function getIntraMemoryRangePosition(\\n        uint64 index,\\n        Log2Size log2Size\\n    ) internal pure returns (uint64) {\\n        return index << Log2Size.unwrap(log2Size);\\n    }\\n}\\n\",\"keccak256\":\"0x97cdce56cdb4f0b4164e6be3a72e50469a3124e4716e753a1792aa70eac614f5\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/common/OutputEncoding.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Output Encoding Library\\n///\\n/// @notice Defines the encoding of outputs generated by the off-chain machine.\\nlibrary OutputEncoding {\\n    /// @notice Encode a notice.\\n    /// @param notice The notice\\n    /// @return The encoded output\\n    function encodeNotice(\\n        bytes calldata notice\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(notice);\\n    }\\n\\n    /// @notice Encode a voucher.\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @return The encoded output\\n    function encodeVoucher(\\n        address destination,\\n        bytes calldata payload\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(destination, payload);\\n    }\\n}\\n\",\"keccak256\":\"0xfbf8bd40a11aeb380c77910ef7a8c3a4b358dddbd8bc795529de39c955dd6f60\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Consensus interface\\n///\\n/// @notice This contract defines a generic interface for consensuses.\\n/// We use the word \\\"consensus\\\" to designate a contract that provides claims\\n/// in the base layer regarding the state of off-chain machines running in\\n/// the execution layer. How this contract is able to reach consensus, who is\\n/// able to submit claims, and how are claims stored in the base layer are\\n/// some of the implementation details left unspecified by this interface.\\n///\\n/// From the point of view of a DApp, these claims are necessary to validate\\n/// on-chain action allowed by the off-chain machine in the form of vouchers\\n/// and notices. Each claim is composed of three parts: an epoch hash, a first\\n/// index, and a last index. We'll explain each of these parts below.\\n///\\n/// First, let us define the word \\\"epoch\\\". For finality reasons, we need to\\n/// divide the stream of inputs being fed into the off-chain machine into\\n/// batches of inputs, which we call \\\"epoches\\\". At the end of every epoch,\\n/// we summarize the state of the off-chain machine in a single hash, called\\n/// \\\"epoch hash\\\". Please note that this interface does not define how this\\n/// stream of inputs is being chopped up into epoches.\\n///\\n/// The other two parts are simply the indices of the first and last inputs\\n/// accepted during the epoch. Logically, the first index MUST BE less than\\n/// or equal to the last index. As a result, every epoch MUST accept at least\\n/// one input. This assumption stems from the fact that the state of a machine\\n/// can only change after an input is fed into it.\\n///\\n/// Examples of possible implementations of this interface include:\\n///\\n/// * An authority consensus, controlled by a single address who has full\\n///   control over epoch boundaries, claim submission, asset management, etc.\\n///\\n/// * A quorum consensus, controlled by a limited set of validators, that\\n///   vote on the state of the machine at the end of every epoch. Also, epoch\\n///   boundaries are determined by the timestamp in the base layer, and assets\\n///   are split equally amongst the validators.\\n///\\n/// * An NxN consensus, which allows anyone to submit and dispute claims\\n///   in the base layer. Epoch boundaries are determined in the same fashion\\n///   as in the quorum example.\\n///\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set.\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join`.\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Signal the consensus that the message sender wants to join its validation set.\\n    /// @dev MUST fire an `ApplicationJoined` event with the message sender as argument.\\n    function join() external;\\n}\\n\",\"keccak256\":\"0xc9d295fada66eb0602e0f1e2e236708e52f959927abb4ab6b04173a98b92ac16\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {ICartesiDApp, Proof} from \\\"./ICartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {LibOutputValidation, OutputValidityProof} from \\\"../library/LibOutputValidation.sol\\\";\\nimport {Bitmask} from \\\"@cartesi/util/contracts/Bitmask.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Cartesi DApp\\n///\\n/// @notice This contract acts as the base layer incarnation of a DApp running on the execution layer.\\n/// The DApp is hereby able to interact with other smart contracts through the execution of vouchers\\n/// and the validation of notices. These outputs are generated by the DApp backend on the execution\\n/// layer and can be proven in the base layer thanks to claims submitted by a consensus contract.\\n///\\n/// A voucher is a one-time message call to another contract. It can encode asset transfers, approvals,\\n/// or any other message call that doesn't require Ether to be sent along. A voucher will only be consumed\\n/// if the underlying message call succeeds (that is, it doesn't revert). Furthermore, the return data of\\n/// the message call is discarded entirely. As a protective measure against reentrancy attacks, nested\\n/// voucher executions are prohibited.\\n///\\n/// A notice, on the other hand, constitutes an arbitrary piece of data that can be proven any number of times.\\n/// On their own, they do not trigger any type of contract-to-contract interaction.\\n/// Rather, they merely serve to attest off-chain results, e.g. which player won a particular chess match.\\n///\\n/// Every DApp is subscribed to a consensus contract, and governed by a single address, the owner.\\n/// The consensus has the power of submitting claims, which, in turn, are used to validate vouchers and notices.\\n/// Meanwhile, the owner has complete power over the DApp, as it can replace the consensus at any time.\\n/// Therefore, the users of a DApp must trust both the consensus and the DApp owner.\\n///\\n/// The DApp developer can choose whichever ownership and consensus models it wants.\\n///\\n/// Examples of DApp ownership models include:\\n///\\n/// * no owner (address zero)\\n/// * individual signer (externally-owned account)\\n/// * multiple signers (multi-sig)\\n/// * DAO (decentralized autonomous organization)\\n/// * self-owned DApp (off-chain governance logic)\\n///\\n/// See `IConsensus` for examples of consensus models.\\n///\\n/// This contract inherits the following OpenZeppelin contracts.\\n/// For more information, please consult OpenZeppelin's official documentation.\\n///\\n/// * `Ownable`\\n/// * `ERC721Holder`\\n/// * `ERC1155Holder`\\n/// * `ReentrancyGuard`\\n///\\ncontract CartesiDApp is\\n    ICartesiDApp,\\n    Ownable,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard\\n{\\n    using Bitmask for mapping(uint256 => uint256);\\n    using LibOutputValidation for OutputValidityProof;\\n\\n    /// @notice Raised when executing an already executed voucher.\\n    error VoucherReexecutionNotAllowed();\\n\\n    /// @notice Raised when the transfer fails.\\n    error EtherTransferFailed();\\n\\n    /// @notice Raised when a mehtod is not called by DApp itself.\\n    error OnlyDApp();\\n\\n    /// @notice The initial machine state hash.\\n    /// @dev See the `getTemplateHash` function.\\n    bytes32 internal immutable templateHash;\\n\\n    /// @notice The executed voucher bitmask, which keeps track of which vouchers\\n    ///         were executed already in order to avoid re-execution.\\n    /// @dev See the `wasVoucherExecuted` function.\\n    mapping(uint256 => uint256) internal voucherBitmask;\\n\\n    /// @notice The current consensus contract.\\n    /// @dev See the `getConsensus` and `migrateToConsensus` functions.\\n    IConsensus internal consensus;\\n\\n    /// @notice Creates a `CartesiDApp` contract.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _owner The initial DApp owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @dev Calls the `join` function on `_consensus`.\\n    constructor(IConsensus _consensus, address _owner, bytes32 _templateHash) {\\n        transferOwnership(_owner);\\n        templateHash = _templateHash;\\n        consensus = _consensus;\\n\\n        _consensus.join();\\n    }\\n\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external override nonReentrant returns (bool) {\\n        bytes32 epochHash;\\n        uint256 firstInputIndex;\\n        uint256 lastInputIndex;\\n        uint256 inputIndex;\\n\\n        // query the current consensus for the desired claim\\n        (epochHash, firstInputIndex, lastInputIndex) = getClaim(_proof.context);\\n\\n        // validate input index range and calculate the input index\\n        // based on the input index range provided by the consensus\\n        inputIndex = _proof.validity.validateInputIndexRange(\\n            firstInputIndex,\\n            lastInputIndex\\n        );\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateVoucher(_destination, _payload, epochHash);\\n\\n        uint256 voucherPosition = LibOutputValidation.getBitMaskPosition(\\n            _proof.validity.outputIndexWithinInput,\\n            inputIndex\\n        );\\n\\n        // check if voucher has been executed\\n        if (_wasVoucherExecuted(voucherPosition)) {\\n            revert VoucherReexecutionNotAllowed();\\n        }\\n\\n        // execute voucher\\n        (bool succ, ) = _destination.call(_payload);\\n\\n        // if properly executed, mark it as executed and emit event\\n        if (succ) {\\n            voucherBitmask.setBit(voucherPosition, true);\\n            emit VoucherExecuted(voucherPosition);\\n        }\\n\\n        return succ;\\n    }\\n\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view override returns (bool) {\\n        uint256 voucherPosition = LibOutputValidation.getBitMaskPosition(\\n            _outputIndexWithinInput,\\n            _inputIndex\\n        );\\n        return _wasVoucherExecuted(voucherPosition);\\n    }\\n\\n    function _wasVoucherExecuted(\\n        uint256 _voucherPosition\\n    ) internal view returns (bool) {\\n        return voucherBitmask.getBit(_voucherPosition);\\n    }\\n\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view override returns (bool) {\\n        bytes32 epochHash;\\n        uint256 firstInputIndex;\\n        uint256 lastInputIndex;\\n\\n        // query the current consensus for the desired claim\\n        (epochHash, firstInputIndex, lastInputIndex) = getClaim(_proof.context);\\n\\n        // validate the epoch input index based on the input index range\\n        // provided by the consensus\\n        _proof.validity.validateInputIndexRange(\\n            firstInputIndex,\\n            lastInputIndex\\n        );\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateNotice(_notice, epochHash);\\n\\n        return true;\\n    }\\n\\n    /// @notice Retrieve a claim about the DApp from the current consensus.\\n    ///         The encoding of `_proofContext` might vary depending on the implementation.\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return The claimed epoch hash\\n    /// @return The index of the first input of the epoch in the input box\\n    /// @return The index of the last input of the epoch in the input box\\n    function getClaim(\\n        bytes calldata _proofContext\\n    ) internal view returns (bytes32, uint256, uint256) {\\n        return consensus.getClaim(address(this), _proofContext);\\n    }\\n\\n    function migrateToConsensus(\\n        IConsensus _newConsensus\\n    ) external override onlyOwner {\\n        consensus = _newConsensus;\\n\\n        _newConsensus.join();\\n\\n        emit NewConsensus(_newConsensus);\\n    }\\n\\n    function getTemplateHash() external view override returns (bytes32) {\\n        return templateHash;\\n    }\\n\\n    function getConsensus() external view override returns (IConsensus) {\\n        return consensus;\\n    }\\n\\n    /// @notice Accept Ether transfers.\\n    /// @dev If you wish to transfer Ether to a DApp while informing\\n    ///      the DApp backend of it, then please do so through the Ether portal contract.\\n    receive() external payable {}\\n\\n    /// @notice Transfer some amount of Ether to some recipient.\\n    /// @param _receiver The address which will receive the amount of Ether\\n    /// @param _value The amount of Ether to be transferred in Wei\\n    /// @dev This function can only be called by the DApp itself through vouchers.\\n    ///      If this method is not called by DApp itself, `OnlyDApp` error is raised.\\n    ///      If the transfer fails, `EtherTransferFailed` error is raised.\\n    function withdrawEther(address _receiver, uint256 _value) external {\\n        if (msg.sender != address(this)) {\\n            revert OnlyDApp();\\n        }\\n\\n        (bool sent, ) = _receiver.call{value: _value}(\\\"\\\");\\n\\n        if (!sent) {\\n            revert EtherTransferFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe54766db1afcbb9578fffc1a87927d95673f1a630d88a7889941878a89761128\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {OutputValidityProof} from \\\"../library/LibOutputValidation.sol\\\";\\n\\n/// @notice Data for validating outputs.\\n/// @param validity A validity proof for the output\\n/// @param context Data for querying the right claim from the current consensus contract\\n/// @dev The encoding of `context` might vary depending on the implementation of the consensus contract.\\nstruct Proof {\\n    OutputValidityProof validity;\\n    bytes context;\\n}\\n\\n/// @title Cartesi DApp interface\\ninterface ICartesiDApp {\\n    // Events\\n\\n    /// @notice The DApp has migrated to another consensus contract.\\n    /// @param newConsensus The new consensus contract\\n    /// @dev MUST be triggered on a successful call to `migrateToConsensus`.\\n    event NewConsensus(IConsensus newConsensus);\\n\\n    /// @notice A voucher was executed from the DApp.\\n    /// @param voucherId A number that uniquely identifies the voucher\\n    ///                  amongst all vouchers emitted by this DApp\\n    event VoucherExecuted(uint256 voucherId);\\n\\n    // Permissioned functions\\n\\n    /// @notice Migrate the DApp to a new consensus.\\n    /// @param _newConsensus The new consensus\\n    /// @dev Can only be called by the DApp owner.\\n    function migrateToConsensus(IConsensus _newConsensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Try to execute a voucher.\\n    ///\\n    /// Reverts if voucher was already successfully executed.\\n    ///\\n    /// @param _destination The address that will receive the payload through a message call\\n    /// @param _payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param _proof The proof used to validate the voucher against\\n    ///               a claim submitted by the current consensus contract\\n    /// @return Whether the execution was successful or not\\n    /// @dev On a successful execution, emits a `VoucherExecuted` event.\\n    ///      Execution of already executed voucher will raise a `VoucherReexecutionNotAllowed` error.\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external returns (bool);\\n\\n    /// @notice Check whether a voucher has been executed.\\n    /// @param _inputIndex The index of the input in the input box\\n    /// @param _outputIndexWithinInput The index of output emitted by the input\\n    /// @return Whether the voucher has been executed before\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view returns (bool);\\n\\n    /// @notice Validate a notice.\\n    /// @param _notice The notice\\n    /// @param _proof Data for validating outputs\\n    /// @return Whether the notice is valid or not\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view returns (bool);\\n\\n    /// @notice Get the DApp's template hash.\\n    /// @return The DApp's template hash\\n    function getTemplateHash() external view returns (bytes32);\\n\\n    /// @notice Get the current consensus.\\n    /// @return The current consensus\\n    function getConsensus() external view returns (IConsensus);\\n}\\n\",\"keccak256\":\"0x7bb375a4deb593af06955bbf1d88e096f4288f25fa032349796f93705d29386f\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/library/LibOutputValidation.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\nimport {MerkleV2} from \\\"@cartesi/util/contracts/MerkleV2.sol\\\";\\nimport {OutputEncoding} from \\\"../common/OutputEncoding.sol\\\";\\n\\n/// @param inputIndexWithinEpoch Which input, inside the epoch, the output belongs to\\n/// @param outputIndexWithinInput Index of output emitted by the input\\n/// @param outputHashesRootHash Merkle root of hashes of outputs emitted by the input\\n/// @param vouchersEpochRootHash Merkle root of all epoch's voucher metadata hashes\\n/// @param noticesEpochRootHash Merkle root of all epoch's notice metadata hashes\\n/// @param machineStateHash Hash of the machine state claimed this epoch\\n/// @param outputHashInOutputHashesSiblings Proof that this output metadata is in metadata memory range\\n/// @param outputHashesInEpochSiblings Proof that this output metadata is in epoch's output memory range\\nstruct OutputValidityProof {\\n    uint64 inputIndexWithinEpoch;\\n    uint64 outputIndexWithinInput;\\n    bytes32 outputHashesRootHash;\\n    bytes32 vouchersEpochRootHash;\\n    bytes32 noticesEpochRootHash;\\n    bytes32 machineStateHash;\\n    bytes32[] outputHashInOutputHashesSiblings;\\n    bytes32[] outputHashesInEpochSiblings;\\n}\\n\\n/// @title Output Validation Library\\nlibrary LibOutputValidation {\\n    using CanonicalMachine for CanonicalMachine.Log2Size;\\n\\n    /// @notice Raised when some `OutputValidityProof` variables does not match\\n    ///         the presented finalized epoch.\\n    error IncorrectEpochHash();\\n\\n    /// @notice Raised when `OutputValidityProof` metadata memory range is NOT\\n    ///         contained in epoch's output memory range.\\n    error IncorrectOutputsEpochRootHash();\\n\\n    /// @notice Raised when Merkle root of output hash is NOT contained\\n    ///         in the output metadata array memory range.\\n    error IncorrectOutputHashesRootHash();\\n\\n    /// @notice Raised when epoch input index is NOT compatible with the\\n    ///         provided input index range.\\n    error InputIndexOutOfClaimBounds();\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param encodedOutput The encoded output\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    /// @param outputsEpochRootHash Either `v.vouchersEpochRootHash` (for vouchers)\\n    ///                             or `v.noticesEpochRootHash` (for notices)\\n    /// @param outputEpochLog2Size Either `EPOCH_VOUCHER_LOG2_SIZE` (for vouchers)\\n    ///                            or `EPOCH_NOTICE_LOG2_SIZE` (for notices)\\n    /// @param outputHashesLog2Size Either `VOUCHER_METADATA_LOG2_SIZE` (for vouchers)\\n    ///                             or `NOTICE_METADATA_LOG2_SIZE` (for notices)\\n    function validateEncodedOutput(\\n        OutputValidityProof calldata v,\\n        bytes memory encodedOutput,\\n        bytes32 epochHash,\\n        bytes32 outputsEpochRootHash,\\n        uint256 outputEpochLog2Size,\\n        uint256 outputHashesLog2Size\\n    ) internal pure {\\n        // prove that outputs hash is represented in a finalized epoch\\n        if (\\n            keccak256(\\n                abi.encodePacked(\\n                    v.vouchersEpochRootHash,\\n                    v.noticesEpochRootHash,\\n                    v.machineStateHash\\n                )\\n            ) != epochHash\\n        ) {\\n            revert IncorrectEpochHash();\\n        }\\n\\n        // prove that output metadata memory range is contained in epoch's output memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.inputIndexWithinEpoch,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputEpochLog2Size,\\n                v.outputHashesRootHash,\\n                v.outputHashesInEpochSiblings\\n            ) != outputsEpochRootHash\\n        ) {\\n            revert IncorrectOutputsEpochRootHash();\\n        }\\n\\n        // The hash of the output is converted to bytes (abi.encode) and\\n        // treated as data. The metadata output memory range stores that data while\\n        // being indifferent to its contents. To prove that the received\\n        // output is contained in the metadata output memory range we need to\\n        // prove that x, where:\\n        // x = keccak(\\n        //          keccak(\\n        //              keccak(hashOfOutput[0:7]),\\n        //              keccak(hashOfOutput[8:15])\\n        //          ),\\n        //          keccak(\\n        //              keccak(hashOfOutput[16:23]),\\n        //              keccak(hashOfOutput[24:31])\\n        //          )\\n        //     )\\n        // is contained in it. We can't simply use hashOfOutput because the\\n        // log2size of the leaf is three (8 bytes) not  five (32 bytes)\\n        bytes32 merkleRootOfHashOfOutput = MerkleV2.getMerkleRootFromBytes(\\n            abi.encodePacked(keccak256(encodedOutput)),\\n            CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize()\\n        );\\n\\n        // prove that Merkle root of bytes(hashOfOutput) is contained\\n        // in the output metadata array memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.outputIndexWithinInput,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputHashesLog2Size,\\n                merkleRootOfHashOfOutput,\\n                v.outputHashInOutputHashesSiblings\\n            ) != v.outputHashesRootHash\\n        ) {\\n            revert IncorrectOutputHashesRootHash();\\n        }\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateVoucher(\\n        OutputValidityProof calldata v,\\n        address destination,\\n        bytes calldata payload,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedVoucher = OutputEncoding.encodeVoucher(\\n            destination,\\n            payload\\n        );\\n        validateEncodedOutput(\\n            v,\\n            encodedVoucher,\\n            epochHash,\\n            v.vouchersEpochRootHash,\\n            CanonicalMachine.EPOCH_VOUCHER_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.VOUCHER_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param notice The notice\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateNotice(\\n        OutputValidityProof calldata v,\\n        bytes calldata notice,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedNotice = OutputEncoding.encodeNotice(notice);\\n        validateEncodedOutput(\\n            v,\\n            encodedNotice,\\n            epochHash,\\n            v.noticesEpochRootHash,\\n            CanonicalMachine.EPOCH_NOTICE_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.NOTICE_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Get the position of a voucher on the bit mask.\\n    /// @param voucher The index of voucher from those generated by such input\\n    /// @param input The index of the input in the DApp's input box\\n    /// @return Position of the voucher on the bit mask\\n    function getBitMaskPosition(\\n        uint256 voucher,\\n        uint256 input\\n    ) internal pure returns (uint256) {\\n        // voucher * 2 ** 128 + input\\n        // this shouldn't overflow because it is impossible to have > 2**128 vouchers\\n        // and because we are assuming there will be < 2 ** 128 inputs on the input box\\n        return (((voucher << 128) | input));\\n    }\\n\\n    /// @notice Validate input index range and get the input index.\\n    /// @param v The output validity proof\\n    /// @param firstInputIndex The index of the first input of the epoch in the input box\\n    /// @param lastInputIndex The index of the last input of the epoch in the input box\\n    /// @return The index of the input in the DApp's input box\\n    /// @dev Reverts if epoch input index is not compatible with the provided input index range.\\n    function validateInputIndexRange(\\n        OutputValidityProof calldata v,\\n        uint256 firstInputIndex,\\n        uint256 lastInputIndex\\n    ) internal pure returns (uint256) {\\n        uint256 inputIndex = firstInputIndex + v.inputIndexWithinEpoch;\\n\\n        if (inputIndex > lastInputIndex) {\\n            revert InputIndexOutOfClaimBounds();\\n        }\\n\\n        return inputIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x874ef478bd265acc94f2480a97191da907f05c6b46dc9e901c534b6acab14e03\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/util/contracts/Bitmask.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Bit Mask Library\\n/// @author Stephen Chen\\n/// @notice Implements bit mask with dynamic array\\nlibrary Bitmask {\\n    /// @notice Set a bit in the bit mask\\n    function setBit(mapping(uint256 => uint256) storage bitmask, uint256 _bit, bool _value) public {\\n        // calculate the number of bits has been store in bitmask now\\n        uint256 positionOfMask = uint256(_bit / 256);\\n        uint256 positionOfBit = _bit % 256;\\n\\n        if (_value) {\\n            bitmask[positionOfMask] = bitmask[positionOfMask] | (1 << positionOfBit);\\n        } else {\\n            bitmask[positionOfMask] = bitmask[positionOfMask] & ~(1 << positionOfBit);\\n        }\\n    }\\n\\n    /// @notice Get a bit in the bit mask\\n    function getBit(mapping(uint256 => uint256) storage bitmask, uint256 _bit) public view returns (bool) {\\n        // calculate the number of bits has been store in bitmask now\\n        uint256 positionOfMask = uint256(_bit / 256);\\n        uint256 positionOfBit = _bit % 256;\\n\\n        return ((bitmask[positionOfMask] & (1 << positionOfBit)) != 0);\\n    }\\n}\\n\",\"keccak256\":\"0x606a3967f7444ce1dc07726e6c5cdcf48360000817c65b631e6ebd8fb96f6e1d\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/CartesiMathV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.8.0;\\n\\nlibrary CartesiMathV2 {\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    /// @return approximate log2 times 1M\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading * uint256(1000000)) + (getLog2TableTimes1M(_num));\\n    }\\n\\n    /// @notice navigates log2tableTimes1M\\n    /// @param _num number to take log2 of\\n    /// @return result after table look-up\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n\\n    /// @notice get floor of log2 of number\\n    /// @param _num number to take floor(log2) of\\n    /// @return floor(log2) of _num\\n    function getLog2Floor(uint256 _num) public pure returns (uint8) {\\n        require(_num != 0, \\\"log of zero is undefined\\\");\\n\\n        return uint8(255 - clz(_num));\\n    }\\n\\n    /// @notice checks if a number is Power of 2\\n    /// @param _num number to check\\n    /// @return true if number is power of 2, false if not\\n    function isPowerOf2(uint256 _num) public pure returns (bool) {\\n        if (_num == 0) return false;\\n\\n        return _num & (_num - 1) == 0;\\n    }\\n\\n    /// @notice count trailing zeros\\n    /// @param _num number you want the ctz of\\n    /// @dev this a binary search implementation\\n    function ctz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n            n = n + 128;\\n            _num = _num >> 128;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF == 0) {\\n            n = n + 64;\\n            _num = _num >> 64;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF == 0) {\\n            n = n + 32;\\n            _num = _num >> 32;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000FFFF == 0) {\\n            n = n + 16;\\n            _num = _num >> 16;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000000000FF == 0) {\\n            n = n + 8;\\n            _num = _num >> 8;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000000F == 0) {\\n            n = n + 4;\\n            _num = _num >> 4;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000003 == 0) {\\n            n = n + 2;\\n            _num = _num >> 2;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000001 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n            n = n + 128;\\n            _num = _num << 128;\\n        }\\n        if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 64;\\n            _num = _num << 64;\\n        }\\n        if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 32;\\n            _num = _num << 32;\\n        }\\n        if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 16;\\n            _num = _num << 16;\\n        }\\n        if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 8;\\n            _num = _num << 8;\\n        }\\n        if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 4;\\n            _num = _num << 4;\\n        }\\n        if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 2;\\n            _num = _num << 2;\\n        }\\n        if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n}\\n\",\"keccak256\":\"0x98fb8d20c05b7c39c44171b6c524cf023da646749eb90157463538da8b2e13d3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/MerkleV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CartesiMathV2.sol\\\";\\n\\nlibrary MerkleV2 {\\n    using CartesiMathV2 for uint256;\\n\\n    uint128 constant L_WORD_SIZE = 3; // word = 8 bytes, log = 3\\n    // number of hashes in EMPTY_TREE_HASHES\\n    uint128 constant EMPTY_TREE_SIZE = 1952; // 61*32=1952. 32 bytes per 61 indexes (64 words)\\n\\n    // merkle root hashes of trees of zero concatenated\\n    // 32 bytes for each root, first one is keccak(0), second one is\\n    // keccak(keccack(0), keccak(0)) and so on\\n\\n    bytes constant EMPTY_TREE_HASHES =\\n        hex\\\"011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce4d9470a821fbe90117ec357e30bad9305732fb19ddf54a07dd3e29f440619254ae39ce8537aca75e2eff3e38c98011dfe934e700a0967732fc07b430dd656a233fc9a15f5b4869c872f81087bb6104b7d63e6f9ab47f2c43f3535eae7172aa7f17d2dd614cddaa4d879276b11e0672c9560033d3e8453a1d045339d34ba601b9c37b8b13ca95166fb7af16988a70fcc90f38bf9126fd833da710a47fb37a55e68e7a427fa943d9966b389f4f257173676090c6e95f43e2cb6d65f8758111e30930b0b9deb73e155c59740bacf14a6ff04b64bb8e201a506409c3fe381ca4ea90cd5deac729d0fdaccc441d09d7325f41586ba13c801b7eccae0f95d8f3933efed8b96e5b7f6f459e9cb6a2f41bf276c7b85c10cd4662c04cbbb365434726c0a0c9695393027fb106a8153109ac516288a88b28a93817899460d6310b71cf1e6163e8806fa0d4b197a259e8c3ac28864268159d0ac85f8581ca28fa7d2c0c03eb91e3eee5ca7a3da2b3053c9770db73599fb149f620e3facef95e947c0ee860b72122e31e4bbd2b7c783d79cc30f60c6238651da7f0726f767d22747264fdb046f7549f26cc70ed5e18baeb6c81bb0625cb95bb4019aeecd40774ee87ae29ec517a71f6ee264c5d761379b3d7d617ca83677374b49d10aec50505ac087408ca892b573c267a712a52e1d06421fe276a03efb1889f337201110fdc32a81f8e152499af665835aabfdc6740c7e2c3791a31c3cdc9f5ab962f681b12fc092816a62f27d86025599a41233848702f0cfc0437b445682df51147a632a0a083d2d38b5e13e466a8935afff58bb533b3ef5d27fba63ee6b0fd9e67ff20af9d50deee3f8bf065ec220c1fd4ba57e341261d55997f85d66d32152526736872693d2b437a233e2337b715f6ac9a6a272622fdc2d67fcfe1da3459f8dab4ed7e40a657a54c36766c5e8ac9a88b35b05c34747e6507f6b044ab66180dc76ac1a696de03189593fedc0d0dbbd855c8ead673544899b0960e4a5a7ca43b4ef90afe607de7698caefdc242788f654b57a4fb32a71b335ef6ff9a4cc118b282b53bdd6d6192b7a82c3c5126b9c7e33c8e5a5ac9738b8bd31247fb7402054f97b573e8abb9faad219f4fd085aceaa7f542d787ee4196d365f3cc566e7bbcfbfd451230c48d804c017d21e2d8fa914e2559bb72bf0ab78c8ab92f00ef0d0d576eccdd486b64138a4172674857e543d1d5b639058dd908186597e366ad5f3d9c7ceaff44d04d1550b8d33abc751df07437834ba5acb32328a396994aebb3c40f759c2d6d7a3cb5377e55d5d218ef5a296dda8ddc355f3f50c3d0b660a51dfa4d98a6a5a33564556cf83c1373a814641d6a1dcef97b883fee61bb84fe60a3409340217e629cc7e4dcc93b85d8820921ff5826148b60e6939acd7838e1d7f20562bff8ee4b5ec4a05ad997a57b9796fdcb2eda87883c2640b072b140b946bfdf6575cacc066fdae04f6951e63624cbd316a677cad529bbe4e97b9144e4bc06c4afd1de55dd3e1175f90423847a230d34dfb71ed56f2965a7f6c72e6aa33c24c303fd67745d632656c5ef90bec80f4f5d1daa251988826cef375c81c36bf457e09687056f924677cb0bccf98dff81e014ce25f2d132497923e267363963cdf4302c5049d63131dc03fd95f65d8b6aa5934f817252c028c90f56d413b9d5d10d89790707dae2fabb249f649929927c21dd71e3f656826de5451c5da375aadecbd59d5ebf3a31fae65ac1b316a1611f1b276b26530f58d7247df459ce1f86db1d734f6f811932f042cee45d0e455306d01081bc3384f82c5fb2aacaa19d89cdfa46cc916eac61121475ba2e6191b4feecbe1789717021a158ace5d06744b40f551076b67cd63af60007f8c99876e1424883a45ec49d497ddaf808a5521ca74a999ab0b3c7aa9c80f85e93977ec61ce68b20307a1a81f71ca645b568fcd319ccbb5f651e87b707d37c39e15f945ea69e2f7c7d2ccc85b7e654c07e96f0636ae4044fe0e38590b431795ad0f8647bdd613713ada493cc17efd313206380e6a685b8198475bbd021c6e9d94daab2214947127506073e44d5408ba166c512a0b86805d07f5a44d3c41706be2bc15e712e55805248b92e8677d90f6d284d1d6ffaff2c430657042a0e82624fa3717b06cc0a6fd12230ea586dae83019fb9e06034ed2803c98d554b93c9a52348cafff75c40174a91f9ae6b8647854a156029f0b88b83316663ce574a4978277bb6bb27a31085634b6ec78864b6d8201c7e93903d75815067e378289a3d072ae172dafa6a452470f8d645bebfad9779594fc0784bb764a22e3a8181d93db7bf97893c414217a618ccb14caa9e92e8c61673afc9583662e812adba1f87a9c68202d60e909efab43c42c0cb00695fc7f1ffe67c75ca894c3c51e1e5e731360199e600f6ced9a87b2a6a87e70bf251bb5075ab222138288164b2eda727515ea7de12e2496d4fe42ea8d1a120c03cf9c50622c2afe4acb0dad98fd62d07ab4e828a94495f6d1ab973982c7ccbe6c1fae02788e4422ae22282fa49cbdb04ba54a7a238c6fc41187451383460762c06d1c8a72b9cd718866ad4b689e10c9a8c38fe5ef045bd785b01e980fc82c7e3532ce81876b778dd9f1ceeba4478e86411fb6fdd790683916ca832592485093644e8760cd7b4c01dba1ccc82b661bf13f0e3f34acd6b88\\\";\\n\\n    /// @notice Gets merkle root hash of drive with a replacement\\n    /// @param _position position of _drive\\n    /// @param _logSizeOfReplacement log2 of size the replacement\\n    /// @param _logSizeOfFullDrive log2 of size the full drive, which can be the entire machine\\n    /// @param _replacement hash of the replacement\\n    /// @param siblings of replacement that merkle root can be calculated\\n    function getRootAfterReplacementInDrive(\\n        uint256 _position,\\n        uint256 _logSizeOfReplacement,\\n        uint256 _logSizeOfFullDrive,\\n        bytes32 _replacement,\\n        bytes32[] calldata siblings\\n    ) public pure returns (bytes32) {\\n        require(\\n            _logSizeOfFullDrive >= _logSizeOfReplacement && _logSizeOfReplacement >= 3 && _logSizeOfFullDrive <= 64,\\n            \\\"3 <= logSizeOfReplacement <= logSizeOfFullDrive <= 64\\\"\\n        );\\n\\n        uint256 size = 1 << _logSizeOfReplacement;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == _logSizeOfFullDrive - _logSizeOfReplacement, \\\"Proof length does not match\\\");\\n\\n        for (uint256 i; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                _replacement = keccak256(abi.encodePacked(_replacement, siblings[i]));\\n            } else {\\n                _replacement = keccak256(abi.encodePacked(siblings[i], _replacement));\\n            }\\n        }\\n\\n        return _replacement;\\n    }\\n\\n    /// @notice Gets precomputed hash of zero in empty tree hashes\\n    /// @param _index of hash wanted\\n    /// @dev first index is keccak(0), second index is keccak(keccak(0), keccak(0))\\n    function getEmptyTreeHashAtIndex(uint256 _index) public pure returns (bytes32) {\\n        uint256 start = _index * 32;\\n        require(EMPTY_TREE_SIZE >= start + 32, \\\"index out of bounds\\\");\\n        bytes32 hashedZeros;\\n        bytes memory zeroTree = EMPTY_TREE_HASHES;\\n\\n        // first word is length, then skip index words\\n        assembly {\\n            hashedZeros := mload(add(add(zeroTree, 0x20), start))\\n        }\\n        return hashedZeros;\\n    }\\n\\n    /// @notice get merkle root of generic array of bytes\\n    /// @param _data array of bytes to be merklelized\\n    /// @param _log2Size log2 of total size of the drive\\n    /// @dev _data is padded with zeroes until is multiple of 8\\n    /// @dev root is completed with zero tree until log2size is complete\\n    /// @dev hashes are taken word by word (8 bytes by 8 bytes)\\n    function getMerkleRootFromBytes(bytes calldata _data, uint256 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3 && _log2Size <= 64, \\\"range of log2Size: [3,64]\\\");\\n\\n        // if _data is empty return pristine drive of size log2size\\n        if (_data.length == 0) return getEmptyTreeHashAtIndex(_log2Size - 3);\\n\\n        // total size of the drive in words\\n        uint256 size = 1 << (_log2Size - 3);\\n        require(size << L_WORD_SIZE >= _data.length, \\\"data is bigger than drive\\\");\\n        // the stack depth is log2(_data.length / 8) + 2\\n        uint256 stack_depth = 2 + ((_data.length) >> L_WORD_SIZE).getLog2Floor();\\n        bytes32[] memory stack = new bytes32[](stack_depth);\\n\\n        uint256 numOfHashes; // total number of hashes on stack (counting levels)\\n        uint256 stackLength; // total length of stack\\n        uint256 numOfJoins; // number of hashes of the same level on stack\\n        uint256 topStackLevel; // hash level of the top of the stack\\n\\n        while (numOfHashes < size) {\\n            if ((numOfHashes << L_WORD_SIZE) < _data.length) {\\n                // we still have words to hash\\n                stack[stackLength] = getHashOfWordAtIndex(_data, numOfHashes);\\n                numOfHashes++;\\n\\n                numOfJoins = numOfHashes;\\n            } else {\\n                // since padding happens in hashOfWordAtIndex function\\n                // we only need to complete the stack with pre-computed\\n                // hash(0), hash(hash(0),hash(0)) and so on\\n                topStackLevel = numOfHashes.ctz();\\n\\n                stack[stackLength] = getEmptyTreeHashAtIndex(topStackLevel);\\n\\n                //Empty Tree Hash summarizes many hashes\\n                numOfHashes = numOfHashes + (1 << topStackLevel);\\n                numOfJoins = numOfHashes >> topStackLevel;\\n            }\\n\\n            stackLength++;\\n\\n            // while there are joins, hash top of stack together\\n            while (numOfJoins & 1 == 0) {\\n                bytes32 h2 = stack[stackLength - 1];\\n                bytes32 h1 = stack[stackLength - 2];\\n\\n                stack[stackLength - 2] = keccak256(abi.encodePacked(h1, h2));\\n                stackLength = stackLength - 1; // remove hashes from stack\\n\\n                numOfJoins = numOfJoins >> 1;\\n            }\\n        }\\n        require(stackLength == 1, \\\"stack error\\\");\\n\\n        return stack[0];\\n    }\\n\\n    /// @notice Get the hash of a word in an array of bytes\\n    /// @param _data array of bytes\\n    /// @param _wordIndex index of word inside the bytes to get the hash of\\n    /// @dev if word is incomplete (< 8 bytes) it gets padded with zeroes\\n    function getHashOfWordAtIndex(bytes calldata _data, uint256 _wordIndex) public pure returns (bytes32) {\\n        uint256 start = _wordIndex << L_WORD_SIZE;\\n        uint256 end = start + (1 << L_WORD_SIZE);\\n\\n        // TODO: in .lua this just returns zero, but this might be more consistent\\n        require(start <= _data.length, \\\"word out of bounds\\\");\\n\\n        if (end <= _data.length) {\\n            return keccak256(abi.encodePacked(_data[start:end]));\\n        }\\n\\n        // word is incomplete\\n        // fill paddedSlice with incomplete words - the rest is going to be bytes(0)\\n        bytes memory paddedSlice = new bytes(8);\\n        uint256 remaining = _data.length - start;\\n\\n        for (uint256 i; i < remaining; i++) {\\n            paddedSlice[i] = _data[start + i];\\n        }\\n\\n        return keccak256(paddedSlice);\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require((hashes.length).isPowerOf2(), \\\"array len not power of 2\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        } else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73d86cb2dfa2ca887987c6da8d193d523c6a65ea89e296d1f47f190ebda7fa9b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/deploy/ERC20DAppFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title ERC20 DApp Factory\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {ICartesiIPFSDAppFactory} from \\\"../factory/ICartesiIPFSDAppFactory.sol\\\";\\nimport {IConsensusPaymentSystem} from \\\"../payment/IConsensusPaymentSystem.sol\\\";\\nimport {ConsensusPaymentSystem} from \\\"../payment/ConsensusPaymentSystem.sol\\\";\\nimport {IPayableDAppFactory} from \\\"./IPayableDAppFactory.sol\\\";\\n\\n/// @notice This contract implements an IPayableDAppFactory based on a IERC20 token\\n/// @dev This contract is a proxy to a ICartesiIPFSDAppFactory, and it registers the dapp\\n/// to a ConsensusPaymentSystem managed by the specified token\\ncontract ERC20DAppFactory is IPayableDAppFactory {\\n    ICartesiIPFSDAppFactory public immutable factory;\\n    IConsensusPaymentSystem public immutable paymentSystem;\\n\\n    /// @notice Construct a new ERC20DAppFactory with the given token as payment method\\n    constructor(ICartesiIPFSDAppFactory _factory, IERC20 _token) {\\n        factory = _factory;\\n        paymentSystem = new ConsensusPaymentSystem(_token);\\n    }\\n\\n    /// @dev This function deploys a new application, and registers it with the payment system\\n    function newApplication(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash,\\n        string memory _cid,\\n        uint128 _salary,\\n        uint128 _funds\\n    ) external override returns (CartesiDApp) {\\n        // delegate call to factory, owner must be this contract, so we can register with payment system\\n        CartesiDApp dapp = factory.newApplication(\\n            _consensus,\\n            address(this),\\n            _templateHash,\\n            _cid\\n        );\\n\\n        // register with payment system with given salary and funds\\n        paymentSystem.registerDApp(dapp, _salary, _funds);\\n\\n        // now we transfer ownership to the given owner\\n        dapp.transferOwnership(_dappOwner);\\n\\n        // return application\\n        return dapp;\\n    }\\n}\\n\",\"keccak256\":\"0xdc627dda2d43c6edd15d9b0f6895606e975d1919725b4bd8666dcdc3dace5034\",\"license\":\"Apache-2.0\"},\"contracts/deploy/ERC20DAppSystem.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Sunodo DApp Factory Factory\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICartesiIPFSDAppFactory} from \\\"../factory/ICartesiIPFSDAppFactory.sol\\\";\\nimport {IERC20DAppSystem} from \\\"./IERC20DAppSystem.sol\\\";\\nimport {IPayableDAppFactory} from \\\"./IPayableDAppFactory.sol\\\";\\nimport {ERC20DAppFactory} from \\\"./ERC20DAppFactory.sol\\\";\\n\\n/// @notice Factory for creating new ERC20 based DApp factories\\ncontract ERC20DAppSystem is IERC20DAppSystem {\\n    ICartesiIPFSDAppFactory public immutable factory;\\n\\n    constructor(ICartesiIPFSDAppFactory _factory) {\\n        factory = _factory;\\n    }\\n\\n    /// @notice Create a new ERC20 based DApp factory using the specified token\\n    function newERC20DAppFactory(\\n        IERC20 _token\\n    ) external returns (ERC20DAppFactory) {\\n        // create factory using that token\\n        ERC20DAppFactory erc20Factory = new ERC20DAppFactory(factory, _token);\\n\\n        // emit event\\n        emit ERC20DAppFactoryCreated(erc20Factory, _token);\\n\\n        return erc20Factory;\\n    }\\n}\\n\",\"keccak256\":\"0x52e4c84e3799a0c173168eddbd2563abcd97ba35031d6c11019458cb3fd4230e\",\"license\":\"Apache-2.0\"},\"contracts/deploy/IERC20DAppSystem.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title ERC20 Payment System factory\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICartesiIPFSDAppFactory} from \\\"../factory/ICartesiIPFSDAppFactory.sol\\\";\\nimport {ERC20DAppFactory} from \\\"./ERC20DAppFactory.sol\\\";\\n\\n/// @notice Interface for creating new ERC20 based DApp factories\\ninterface IERC20DAppSystem {\\n    /// @notice A new factory was created\\n    /// @param factory The address of the factory\\n    /// @param token The token used for billing\\n    event ERC20DAppFactoryCreated(ERC20DAppFactory factory, IERC20 token);\\n\\n    /// @notice Create a new ERC20 based DApp factory using the specified token\\n    function newERC20DAppFactory(\\n        IERC20 _token\\n    ) external returns (ERC20DAppFactory);\\n}\\n\",\"keccak256\":\"0x9149c328876d12b3e70c6f2a1361204ef2df2e3f3296a631d1c6d32bd9bbe4c1\",\"license\":\"Apache-2.0\"},\"contracts/deploy/IPayableDAppFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Payment DApp Factory interface\\npragma solidity ^0.8.13;\\n\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\n\\n/// @notice DApp factory interface that adds a payment specification to the instantiation of dapps\\n/// @dev The implemented model is that the dapp instantiator will define how much he is willing to pay per time unit\\n/// of validation, and how much he is commiting in advance. This interface is not bounded to tokens, but any uint unit\\n/// of measure.\\ninterface IPayableDAppFactory {\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application\\n    /// @param _consensus The consensus to which the DApp should be subscribed\\n    /// @param _dappOwner The address that should own the DApp\\n    /// @param _templateHash The hash of the initial state of the Cartesi Machine\\n    /// @param _cid The IPFS CID of the cartesi machine snapshot\\n    /// @param _salary the amount of tokens the DApp pays to\\n    ///                its consensus every second, a.k.a. salary\\n    /// @param _funds the amount of tokens to be deposited into\\n    ///               the DApp's funds account\\n    /// @return The application\\n    function newApplication(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash,\\n        string memory _cid,\\n        uint128 _salary,\\n        uint128 _funds\\n    ) external returns (CartesiDApp);\\n}\\n\",\"keccak256\":\"0xb8e9914d1b8623d39699d488a4e942be119a875a63ab37426af015a3a28715fd\",\"license\":\"Apache-2.0\"},\"contracts/factory/ICartesiIPFSDAppFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title IPFS DApp Factory interface\\npragma solidity ^0.8.13;\\n\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\n\\n/// @notice Interface that wraps the ICartesiDAppFactory and adds the IPFS CID information to the dapp\\n/// instantiation process\\ninterface ICartesiIPFSDAppFactory {\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application\\n    /// @dev Adds an IPFS CID parameter to the original ICartesiDAppFactory interface\\n    /// @param _consensus The consensus to which the DApp should be subscribed\\n    /// @param _dappOwner The address that should own the DApp\\n    /// @param _templateHash The hash of the initial state of the Cartesi Machine\\n    /// @param _cid The IPFS CID of the cartesi machine snapshot\\n    /// @return The application\\n    function newApplication(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash,\\n        string memory _cid\\n    ) external returns (CartesiDApp);\\n}\\n\",\"keccak256\":\"0xbf6e27bc7954c94440cb78c631cb9e34116ccf049205d3047d3ed9a45d57a51f\",\"license\":\"Apache-2.0\"},\"contracts/payment/ConsensusPaymentSystem.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Consensus Payment System\\n/// @dev Assumes block.timestamp <= type(uint96).max\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\\\";\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\nimport {IFinancialProtocol} from \\\"../protocol/IFinancialProtocol.sol\\\";\\nimport {IConsensusPaymentSystem} from \\\"./IConsensusPaymentSystem.sol\\\";\\n\\ncontract ConsensusPaymentSystem is IConsensusPaymentSystem, IFinancialProtocol {\\n    /// @notice Information about a specific DApp\\n    /// @param funds tokens reserved for paying consensus\\n    /// @param salary tokens to be paid to consensus per second\\n    /// @param clock time of last payment\\n    /// @param consensus current consensus (might be outdated)\\n    struct DAppInfo {\\n        uint128 funds;\\n        uint128 salary;\\n        uint96 clock;\\n        IConsensus consensus;\\n    }\\n\\n    IERC20 public immutable token;\\n    mapping(ICartesiDApp => DAppInfo) dappInfos;\\n    mapping(IConsensus => uint256) consensusBalances;\\n\\n    /* CONSTRUCTOR */\\n\\n    constructor(IERC20 _token) {\\n        token = _token;\\n    }\\n\\n    /* EXTERNAL FUNCTIONS */\\n\\n    function registerDApp(\\n        CartesiDApp _dapp,\\n        uint128 _salary,\\n        uint128 _funds\\n    ) external override onlyDAppOwner(_dapp) {\\n        require(_salary > 0, \\\"CPS: Salary cannot be 0\\\");\\n        require(\\n            token.transferFrom(msg.sender, address(this), _funds),\\n            \\\"CPS: Failed token transfer\\\"\\n        );\\n        IConsensus consensus = _dapp.getConsensus();\\n        require(!isDAppRegistered(_dapp), \\\"CPS: DApp is already registered\\\");\\n        dappInfos[_dapp] = DAppInfo({\\n            funds: _funds,\\n            salary: _salary,\\n            clock: uint96(block.timestamp),\\n            consensus: consensus\\n        });\\n    }\\n\\n    function depositFunds(\\n        CartesiDApp _dapp,\\n        uint128 _amount\\n    ) external override onlyRegisteredDApp(_dapp) {\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"CPS: Failed token transfer\\\"\\n        );\\n        dappInfos[_dapp].funds += _amount;\\n    }\\n\\n    function withdrawPaymentToConsensus(\\n        CartesiDApp[] calldata _dapps,\\n        IConsensus _consensus\\n    ) external override {\\n        for (uint256 i; i < _dapps.length; ++i) {\\n            updateDAppInfo(_dapps[i]);\\n        }\\n        uint256 amount = consensusBalances[_consensus];\\n        consensusBalances[_consensus] = 0;\\n        require(\\n            token.transfer(address(_consensus), amount),\\n            \\\"CPS: Failed token transfer\\\"\\n        );\\n    }\\n\\n    function updateDAppInfo(\\n        CartesiDApp _dapp\\n    ) public override onlyRegisteredDApp(_dapp) {\\n        _updateDAppInfo(_dapp, 0);\\n    }\\n\\n    function withdrawFundsToDAppOwner(\\n        CartesiDApp _dapp,\\n        uint128 _amount\\n    ) external override onlyRegisteredDApp(_dapp) onlyDAppOwner(_dapp) {\\n        _updateDAppInfo(_dapp, 0);\\n        uint128 funds = dappInfos[_dapp].funds;\\n        require(funds >= _amount, \\\"CPS: Not enough funds\\\");\\n        unchecked {\\n            dappInfos[_dapp].funds = funds - _amount;\\n        }\\n        require(\\n            token.transfer(msg.sender, _amount),\\n            \\\"CPS: Failed token transfer\\\"\\n        );\\n    }\\n\\n    function setDAppSalary(\\n        CartesiDApp _dapp,\\n        uint128 _salary\\n    ) external override onlyRegisteredDApp(_dapp) onlyDAppOwner(_dapp) {\\n        require(_salary > 0, \\\"CPS: Salary cannot be 0\\\");\\n        _updateDAppInfo(_dapp, _salary);\\n    }\\n\\n    function getDAppFunds(\\n        CartesiDApp _dapp\\n    ) external view override returns (uint128) {\\n        return dappInfos[_dapp].funds;\\n    }\\n\\n    function getDAppSalary(\\n        CartesiDApp _dapp\\n    ) external view override returns (uint128) {\\n        return dappInfos[_dapp].salary;\\n    }\\n\\n    function getDAppClock(\\n        CartesiDApp _dapp\\n    ) external view override returns (uint96) {\\n        return dappInfos[_dapp].clock;\\n    }\\n\\n    function getDAppConsensus(\\n        CartesiDApp _dapp\\n    ) external view override returns (IConsensus) {\\n        return dappInfos[_dapp].consensus;\\n    }\\n\\n    function getConsensusBalance(\\n        IConsensus _consensus\\n    ) external view override returns (uint256) {\\n        return consensusBalances[_consensus];\\n    }\\n\\n    function isDAppRegistered(\\n        CartesiDApp _dapp\\n    ) public view override returns (bool) {\\n        return dappInfos[_dapp].salary > 0;\\n    }\\n\\n    /* MODIFIERS */\\n\\n    modifier onlyDAppOwner(CartesiDApp _dapp) {\\n        require(msg.sender == _dapp.owner(), \\\"CPS: Not DApp owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredDApp(CartesiDApp _dapp) {\\n        require(isDAppRegistered(_dapp), \\\"CPS: Unregistered DApp\\\");\\n        _;\\n    }\\n\\n    /* INTERNAL FUNCTIONS */\\n\\n    // Assumes _dapp is registered\\n    // If _newSalary is 0, uses current salary\\n    function _updateDAppInfo(ICartesiDApp _dapp, uint128 _newSalary) internal {\\n        IConsensus newConsensus = _dapp.getConsensus();\\n\\n        DAppInfo memory dappInfo = dappInfos[_dapp];\\n\\n        uint96 timedelta = uint96(block.timestamp) - dappInfo.clock;\\n        uint256 payment = timedelta * uint256(dappInfo.salary);\\n\\n        if (payment > dappInfo.funds) {\\n            timedelta = uint96(dappInfo.funds / dappInfo.salary);\\n            payment = timedelta * uint256(dappInfo.salary);\\n        }\\n\\n        consensusBalances[dappInfo.consensus] += payment;\\n\\n        // TODO: implement IFinancialProtocol\\n\\n        dappInfos[_dapp] = DAppInfo({\\n            funds: dappInfo.funds - uint128(payment),\\n            salary: _newSalary > 0 ? _newSalary : dappInfo.salary,\\n            clock: dappInfo.clock + timedelta,\\n            consensus: newConsensus\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xc8933c3ad313aa5c8b95f8a1b924343341226801069cd38e8c5dde254cfc7bf3\",\"license\":\"Apache-2.0\"},\"contracts/payment/IConsensusPaymentSystem.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Consensus Payment System\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\n\\n/// @title Consensus Payment System interface\\n/// @notice Manages the funding of DApps and payment of consensuses, using\\n///         an ERC-20 token as currency\\ninterface IConsensusPaymentSystem {\\n    // Permissioned functions\\n\\n    /// @notice Register a DApp\\n    /// @param _dapp the DApp\\n    /// @param _salary the amount of tokens the DApp pays to\\n    ///                its consensus every second, a.k.a. salary\\n    /// @param _funds the amount of tokens to be deposited into\\n    ///               the DApp's funds account\\n    /// @dev The DApp must not have been registered yet\\n    /// @dev This function can only be called by the DApp's owner\\n    /// @dev The salary must be greater than zero\\n    /// @dev This contract must have enough allowance to transfer\\n    ///      the funds from the caller's account\\n    function registerDApp(\\n        CartesiDApp _dapp,\\n        uint128 _salary,\\n        uint128 _funds\\n    ) external;\\n\\n    /// @notice Withdraw tokens from a DApp's funds account\\n    ///         to the DApp's owner's account\\n    /// @param _dapp the DApp\\n    /// @param _amount the amount of tokens to be withdrawn\\n    /// @dev The DApp must be registered\\n    /// @dev This function can only be called by the DApp's owner\\n    /// @dev Updates the DApp's info before the withdrawal\\n    /// @dev The DApp must have enough funds for the withdrawal\\n    function withdrawFundsToDAppOwner(\\n        CartesiDApp _dapp,\\n        uint128 _amount\\n    ) external;\\n\\n    /// @notice Update the amount of tokens a DApp pays\\n    ///         to its consensus every second, a.k.a. salary\\n    /// @param _dapp the DApp\\n    /// @param _salary the new salary\\n    /// @dev The DApp must be registered\\n    /// @dev This function can only be called by the DApp's owner\\n    /// @dev The salary must be greater than zero\\n    /// @dev Updates the DApp's info before the salary update\\n    function setDAppSalary(CartesiDApp _dapp, uint128 _salary) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Deposit tokens into a DApp's funds account\\n    /// @param _dapp the DApp\\n    /// @param _amount the amount of tokens to be deposited\\n    /// @dev The DApp must be registered\\n    /// @dev This contract must have enough allowance to transfer\\n    ///      the funds from the caller's account\\n    function depositFunds(CartesiDApp _dapp, uint128 _amount) external;\\n\\n    /// @notice Update information regarding several DApps and withdraw\\n    ///         all tokens from a consensus' payment account\\n    /// @param _dapps the DApps to be updated\\n    /// @param _consensus the consensus\\n    /// @dev The DApps must be registered\\n    /// @dev The tokens are all transferred directly to the consensus\\n    function withdrawPaymentToConsensus(\\n        CartesiDApp[] calldata _dapps,\\n        IConsensus _consensus\\n    ) external;\\n\\n    /// @notice Update information regarding a DApp\\n    /// @param _dapp the DApp\\n    /// @dev The DApp must be registered\\n    /// @dev Information include current consensus, funds, timestamp of\\n    ///      last payment, and consensus' payment account balance\\n    function updateDAppInfo(CartesiDApp _dapp) external;\\n\\n    // View functions\\n\\n    /// @notice Get the ERC-20 token used as currency\\n    /// @return The ERC-20 token\\n    function token() external view returns (IERC20);\\n\\n    /// @notice Get the balance of a DApp's funds account\\n    /// @param _dapp The DApp\\n    /// @return The balance of the DApp's funds account\\n    /// @dev The DApp must be registered\\n    function getDAppFunds(CartesiDApp _dapp) external view returns (uint128);\\n\\n    /// @notice Get the amount of tokens a DApp pays\\n    ///         to its consensus every second, a.k.a. salary\\n    /// @param _dapp The DApp\\n    /// @return The DApp's salary\\n    /// @dev The DApp must be registered\\n    function getDAppSalary(CartesiDApp _dapp) external view returns (uint128);\\n\\n    /// @notice Get the timestamp of the last time the DApp and its consensus\\n    ///         were even in terms of payment, a.k.a. clock\\n    /// @param _dapp The DApp\\n    /// @return The DApp's clock\\n    /// @dev The DApp must be registered\\n    function getDAppClock(CartesiDApp _dapp) external view returns (uint96);\\n\\n    /// @notice Get the last known consensus of a DApp\\n    /// @param _dapp The DApp\\n    /// @return The DApp's last known consensus\\n    /// @dev The DApp must be registered\\n    /// @dev This might not correspond to the current consensus\\n    function getDAppConsensus(\\n        CartesiDApp _dapp\\n    ) external view returns (IConsensus);\\n\\n    /// @notice Get the balance of a consensus' payment account\\n    /// @param _consensus The consensus\\n    /// @return The balance of the consensus' payment account\\n    function getConsensusBalance(\\n        IConsensus _consensus\\n    ) external view returns (uint256);\\n\\n    /// @notice Check whether a DApp has been registered or not\\n    /// @param _dapp The DApp\\n    /// @return Whether the DApp is registered\\n    function isDAppRegistered(CartesiDApp _dapp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e51c1933fa22a998e2e9e00ade31f293da19222f75dbad2bd9ec953e0e9c963\",\"license\":\"Apache-2.0\"},\"contracts/protocol/IFinancialProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title DApp Financial Protocol\\npragma solidity ^0.8.13;\\n\\n/// @notice Interface that should be implemented by any contract which dictates the financial incentives\\n/// of the execution of validator nodes for Cartesi DApps.\\ninterface IFinancialProtocol {\\n    // Events\\n\\n    /// @notice Signals until when a dapp has enough funds to be validated\\n    /// @dev This event signals until when the validator node for the dapp should be running.\\n    /// The offchain implementation which controls the execution of validator nodes is free\\n    /// to choose which implementation contracts they will rely on for this information.\\n    /// The dapp can be deployed on a different network than the one this event is emitted on.\\n    /// @param chainid The chainid of the network the dapp is deployed\\n    /// @param dapp The dapp address\\n    /// @param until The point in time when the dapp will run out of funds (seconds since epoch)\\n    event FinancialRunway(uint256 chainid, address dapp, uint256 until);\\n}\\n\",\"keccak256\":\"0x1c61432f7205a073a100a76a4479013f9464c2afb38474fce57bc0611c622a0c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161343a38038061343a833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b60805161330c61012e60003960008181608b015260b2015261330c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c45a01551461003b578063c8c746ce14610059575b600080fd5b610043610089565b60405161005091906101d6565b60405180910390f35b610073600480360381019061006e9190610246565b6100ad565b6040516100809190610294565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f0000000000000000000000000000000000000000000000000000000000000000836040516100de9061014a565b6100e99291906102d0565b604051809103906000f080158015610105573d6000803e3d6000fd5b5090507f5377c11cc1f04abd38d7e354b69bb3e8b029362b35bc99749087f0d6700e64a681846040516101399291906102f9565b60405180910390a180915050919050565b612fb48061032383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061019c61019761019284610157565b610177565b610157565b9050919050565b60006101ae82610181565b9050919050565b60006101c0826101a3565b9050919050565b6101d0816101b5565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b600080fd5b600061020182610157565b9050919050565b6000610213826101f6565b9050919050565b61022381610208565b811461022e57600080fd5b50565b6000813590506102408161021a565b92915050565b60006020828403121561025c5761025b6101f1565b5b600061026a84828501610231565b91505092915050565b600061027e826101a3565b9050919050565b61028e81610273565b82525050565b60006020820190506102a96000830184610285565b92915050565b60006102ba826101a3565b9050919050565b6102ca816102af565b82525050565b60006040820190506102e560008301856101c7565b6102f260208301846102c1565b9392505050565b600060408201905061030e6000830185610285565b61031b60208301846102c1565b939250505056fe60c06040523480156200001157600080fd5b5060405162002fb438038062002fb48339818101604052810190620000379190620001b0565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806040516200007a90620000df565b62000086919062000262565b604051809103906000f080158015620000a3573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200027f565b61241a8062000b9a83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011f82620000f2565b9050919050565b6000620001338262000112565b9050919050565b620001458162000126565b81146200015157600080fd5b50565b60008151905062000165816200013a565b92915050565b6000620001788262000112565b9050919050565b6200018a816200016b565b81146200019657600080fd5b50565b600081519050620001aa816200017f565b92915050565b60008060408385031215620001ca57620001c9620000ed565b5b6000620001da8582860162000154565b9250506020620001ed8582860162000199565b9150509250929050565b6000819050919050565b6000620002226200021c6200021684620000f2565b620001f7565b620000f2565b9050919050565b6000620002368262000201565b9050919050565b60006200024a8262000229565b9050919050565b6200025c816200023d565b82525050565b600060208201905062000279600083018462000251565b92915050565b60805160a0516108e8620002b26000396000818161015b015261026301526000818160b7015261028701526108e86000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632f091468146100465780633596f3d614610076578063c45a015514610094575b600080fd5b610060600480360381019061005b919061051d565b6100b2565b60405161006d9190610625565b60405180910390f35b61007e610261565b60405161008b9190610673565b60405180910390f35b61009c610285565b6040516100a991906106af565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ac05d74e893089896040518563ffffffff1660e01b81526004016101149493929190610788565b6020604051808303816000875af1158015610133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101579190610824565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f0e087ed8286866040518463ffffffff1660e01b81526004016101b693929190610860565b600060405180830381600087803b1580156101d057600080fd5b505af11580156101e4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b886040518263ffffffff1660e01b81526004016102219190610897565b600060405180830381600087803b15801561023b57600080fd5b505af115801561024f573d6000803e3d6000fd5b50505050809150509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102e8826102bd565b9050919050565b60006102fa826102dd565b9050919050565b61030a816102ef565b811461031557600080fd5b50565b60008135905061032781610301565b92915050565b610336816102dd565b811461034157600080fd5b50565b6000813590506103538161032d565b92915050565b6000819050919050565b61036c81610359565b811461037757600080fd5b50565b60008135905061038981610363565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103e282610399565b810181811067ffffffffffffffff82111715610401576104006103aa565b5b80604052505050565b60006104146102a9565b905061042082826103d9565b919050565b600067ffffffffffffffff8211156104405761043f6103aa565b5b61044982610399565b9050602081019050919050565b82818337600083830152505050565b600061047861047384610425565b61040a565b90508281526020810184848401111561049457610493610394565b5b61049f848285610456565b509392505050565b600082601f8301126104bc576104bb61038f565b5b81356104cc848260208601610465565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6104fa816104d5565b811461050557600080fd5b50565b600081359050610517816104f1565b92915050565b60008060008060008060c0878903121561053a576105396102b3565b5b600061054889828a01610318565b965050602061055989828a01610344565b955050604061056a89828a0161037a565b945050606087013567ffffffffffffffff81111561058b5761058a6102b8565b5b61059789828a016104a7565b93505060806105a889828a01610508565b92505060a06105b989828a01610508565b9150509295509295509295565b6000819050919050565b60006105eb6105e66105e1846102bd565b6105c6565b6102bd565b9050919050565b60006105fd826105d0565b9050919050565b600061060f826105f2565b9050919050565b61061f81610604565b82525050565b600060208201905061063a6000830184610616565b92915050565b600061064b826105d0565b9050919050565b600061065d82610640565b9050919050565b61066d81610652565b82525050565b60006020820190506106886000830184610664565b92915050565b600061069982610640565b9050919050565b6106a98161068e565b82525050565b60006020820190506106c460008301846106a0565b92915050565b60006106d582610640565b9050919050565b6106e5816106ca565b82525050565b6106f4816102dd565b82525050565b61070381610359565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610743578082015181840152602081019050610728565b60008484015250505050565b600061075a82610709565b6107648185610714565b9350610774818560208601610725565b61077d81610399565b840191505092915050565b600060808201905061079d60008301876106dc565b6107aa60208301866106eb565b6107b760408301856106fa565b81810360608301526107c9818461074f565b905095945050505050565b60006107df826102bd565b9050919050565b60006107f1826107d4565b9050919050565b610801816107e6565b811461080c57600080fd5b50565b60008151905061081e816107f8565b92915050565b60006020828403121561083a576108396102b3565b5b60006108488482850161080f565b91505092915050565b61085a816104d5565b82525050565b60006060820190506108756000830186610616565b6108826020830185610851565b61088f6040830184610851565b949350505050565b60006020820190506108ac60008301846106eb565b9291505056fea2646970667358221220648c1d8bc555c4ba746400695aa7ef78d800727f7290bf388929d0408149482c64736f6c6343000814003360a06040523480156200001157600080fd5b506040516200241a3803806200241a8339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b6080516122c06200015a600039600081816104970152818161075d01528181610b0c01528181610f14015261125c01526122c06000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638494cef91161008c578063de3fa3b811610066578063de3fa3b814610234578063e155887614610250578063f0e087ed14610280578063fc0c546a1461029c576100cf565b80638494cef9146101e05780639eb48800146101fc578063c6d13dd614610218576100cf565b80632a31e2bb146100d45780633e2b9e16146101045780634a179fe41461013457806351b256e214610164578063578a4d7a1461019457806366c8ec9b146101b0575b600080fd5b6100ee60048036038101906100e991906117da565b6102ba565b6040516100fb919061182e565b60405180910390f35b61011e600480360381019061011991906117da565b61031d565b60405161012b9190611864565b60405180910390f35b61014e600480360381019061014991906117da565b610398565b60405161015b91906118de565b60405180910390f35b61017e60048036038101906101799190611949565b610403565b60405161018b919061198f565b60405180910390f35b6101ae60048036038101906101a991906119f2565b61044c565b005b6101ca60048036038101906101c591906117da565b61061b565b6040516101d79190611a41565b60405180910390f35b6101fa60048036038101906101f59190611ac1565b610682565b005b610216600480360381019061021191906117da565b61083e565b005b610232600480360381019061022d91906119f2565b610896565b005b61024e600480360381019061024991906119f2565b610bee565b005b61026a600480360381019061026591906117da565b610d79565b6040516102779190611a41565b60405180910390f35b61029a60048036038101906102959190611b21565b610de0565b005b6102a461125a565b6040516102b19190611b95565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046bffffffffffffffffffffffff169050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16119050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b816104568161031d565b610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611c0d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104f293929190611c6d565b6020604051808303816000875af1158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190611cd0565b610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90611d49565b60405180910390fd5b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a90046fffffffffffffffffffffffffffffffff166105e09190611d98565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff169050919050565b60005b838390508110156106d1576106c08484838181106106a6576106a5611ddc565b5b90506020020160208101906106bb91906117da565b61083e565b806106ca90611e0b565b9050610685565b506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016107b6929190611e53565b6020604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f99190611cd0565b610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90611d49565b60405180910390fd5b50505050565b806108488161031d565b610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611c0d565b60405180910390fd5b61089282600061127e565b5050565b816108a08161031d565b6108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690611c0d565b60405180910390fd5b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390611f21565b60405180910390fd5b6109c784600061127e565b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff169050836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790611f8d565b60405180910390fd5b8381036000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610b65929190611fad565b6020604051808303816000875af1158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190611cd0565b610be7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bde90611d49565b60405180910390fd5b5050505050565b81610bf88161031d565b610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e90611c0d565b60405180910390fd5b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90611f21565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090612022565b60405180910390fd5b610d73848461127e565b50505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff169050919050565b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb490611f21565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990612022565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610f6f93929190611c6d565b6020604051808303816000875af1158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190611cd0565b610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe890611d49565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663179e740b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190612057565b905061106d8561031d565b156110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a4906120d0565b60405180910390fd5b6040518060800160405280846fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001426bffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606082015181600101600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008273ffffffffffffffffffffffffffffffffffffffff1663179e740b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190612057565b905060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160018201600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081604001514261147891906120f0565b9050600082602001516fffffffffffffffffffffffffffffffff16826bffffffffffffffffffffffff166114ac9190612130565b905082600001516fffffffffffffffffffffffffffffffff1681111561151557826020015183600001516114e091906121a1565b915082602001516fffffffffffffffffffffffffffffffff16826bffffffffffffffffffffffff166115129190612130565b90505b8060016000856060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156891906121d2565b92505081905550604051806080016040528082856000015161158a9190612206565b6fffffffffffffffffffffffffffffffff1681526020016000876fffffffffffffffffffffffffffffffff16116115c55784602001516115c7565b865b6fffffffffffffffffffffffffffffffff1681526020018385604001516115ee919061224a565b6bffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606082015181600101600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117958261176a565b9050919050565b60006117a78261178a565b9050919050565b6117b78161179c565b81146117c257600080fd5b50565b6000813590506117d4816117ae565b92915050565b6000602082840312156117f0576117ef611760565b5b60006117fe848285016117c5565b91505092915050565b60006bffffffffffffffffffffffff82169050919050565b61182881611807565b82525050565b6000602082019050611843600083018461181f565b92915050565b60008115159050919050565b61185e81611849565b82525050565b60006020820190506118796000830184611855565b92915050565b6000819050919050565b60006118a461189f61189a8461176a565b61187f565b61176a565b9050919050565b60006118b682611889565b9050919050565b60006118c8826118ab565b9050919050565b6118d8816118bd565b82525050565b60006020820190506118f360008301846118cf565b92915050565b60006119048261176a565b9050919050565b6000611916826118f9565b9050919050565b6119268161190b565b811461193157600080fd5b50565b6000813590506119438161191d565b92915050565b60006020828403121561195f5761195e611760565b5b600061196d84828501611934565b91505092915050565b6000819050919050565b61198981611976565b82525050565b60006020820190506119a46000830184611980565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119cf816119aa565b81146119da57600080fd5b50565b6000813590506119ec816119c6565b92915050565b60008060408385031215611a0957611a08611760565b5b6000611a17858286016117c5565b9250506020611a28858286016119dd565b9150509250929050565b611a3b816119aa565b82525050565b6000602082019050611a566000830184611a32565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611a8157611a80611a5c565b5b8235905067ffffffffffffffff811115611a9e57611a9d611a61565b5b602083019150836020820283011115611aba57611ab9611a66565b5b9250929050565b600080600060408486031215611ada57611ad9611760565b5b600084013567ffffffffffffffff811115611af857611af7611765565b5b611b0486828701611a6b565b93509350506020611b1786828701611934565b9150509250925092565b600080600060608486031215611b3a57611b39611760565b5b6000611b48868287016117c5565b9350506020611b59868287016119dd565b9250506040611b6a868287016119dd565b9150509250925092565b6000611b7f826118ab565b9050919050565b611b8f81611b74565b82525050565b6000602082019050611baa6000830184611b86565b92915050565b600082825260208201905092915050565b7f4350533a20556e72656769737465726564204441707000000000000000000000600082015250565b6000611bf7601683611bb0565b9150611c0282611bc1565b602082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b611c36816118f9565b82525050565b6000611c57611c52611c4d846119aa565b61187f565b611976565b9050919050565b611c6781611c3c565b82525050565b6000606082019050611c826000830186611c2d565b611c8f6020830185611c2d565b611c9c6040830184611c5e565b949350505050565b611cad81611849565b8114611cb857600080fd5b50565b600081519050611cca81611ca4565b92915050565b600060208284031215611ce657611ce5611760565b5b6000611cf484828501611cbb565b91505092915050565b7f4350533a204661696c656420746f6b656e207472616e73666572000000000000600082015250565b6000611d33601a83611bb0565b9150611d3e82611cfd565b602082019050919050565b60006020820190508181036000830152611d6281611d26565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611da3826119aa565b9150611dae836119aa565b925082820190506fffffffffffffffffffffffffffffffff811115611dd657611dd5611d69565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611e1682611976565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e4857611e47611d69565b5b600182019050919050565b6000604082019050611e686000830185611c2d565b611e756020830184611980565b9392505050565b611e85816118f9565b8114611e9057600080fd5b50565b600081519050611ea281611e7c565b92915050565b600060208284031215611ebe57611ebd611760565b5b6000611ecc84828501611e93565b91505092915050565b7f4350533a204e6f742044417070206f776e657200000000000000000000000000600082015250565b6000611f0b601383611bb0565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b9050919050565b7f4350533a204e6f7420656e6f7567682066756e64730000000000000000000000600082015250565b6000611f77601583611bb0565b9150611f8282611f41565b602082019050919050565b60006020820190508181036000830152611fa681611f6a565b9050919050565b6000604082019050611fc26000830185611c2d565b611fcf6020830184611c5e565b9392505050565b7f4350533a2053616c6172792063616e6e6f742062652030000000000000000000600082015250565b600061200c601783611bb0565b915061201782611fd6565b602082019050919050565b6000602082019050818103600083015261203b81611fff565b9050919050565b6000815190506120518161191d565b92915050565b60006020828403121561206d5761206c611760565b5b600061207b84828501612042565b91505092915050565b7f4350533a204441707020697320616c7265616479207265676973746572656400600082015250565b60006120ba601f83611bb0565b91506120c582612084565b602082019050919050565b600060208201905081810360008301526120e9816120ad565b9050919050565b60006120fb82611807565b915061210683611807565b925082820390506bffffffffffffffffffffffff81111561212a57612129611d69565b5b92915050565b600061213b82611976565b915061214683611976565b925082820261215481611976565b9150828204841483151761216b5761216a611d69565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121ac826119aa565b91506121b7836119aa565b9250826121c7576121c6612172565b5b828204905092915050565b60006121dd82611976565b91506121e883611976565b9250828201905080821115612200576121ff611d69565b5b92915050565b6000612211826119aa565b915061221c836119aa565b925082820390506fffffffffffffffffffffffffffffffff81111561224457612243611d69565b5b92915050565b600061225582611807565b915061226083611807565b925082820190506bffffffffffffffffffffffff81111561228457612283611d69565b5b9291505056fea2646970667358221220ceb0a879af1d88dd20eb49ce3321d9066f9ce1ba4d9d05ba842f3dcfe1768ce764736f6c63430008140033a2646970667358221220c72403802a8c80d03915963827887c5394598820e97b0e829f1471ad557c631464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063c45a01551461003b578063c8c746ce14610059575b600080fd5b610043610089565b60405161005091906101d6565b60405180910390f35b610073600480360381019061006e9190610246565b6100ad565b6040516100809190610294565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f0000000000000000000000000000000000000000000000000000000000000000836040516100de9061014a565b6100e99291906102d0565b604051809103906000f080158015610105573d6000803e3d6000fd5b5090507f5377c11cc1f04abd38d7e354b69bb3e8b029362b35bc99749087f0d6700e64a681846040516101399291906102f9565b60405180910390a180915050919050565b612fb48061032383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061019c61019761019284610157565b610177565b610157565b9050919050565b60006101ae82610181565b9050919050565b60006101c0826101a3565b9050919050565b6101d0816101b5565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b600080fd5b600061020182610157565b9050919050565b6000610213826101f6565b9050919050565b61022381610208565b811461022e57600080fd5b50565b6000813590506102408161021a565b92915050565b60006020828403121561025c5761025b6101f1565b5b600061026a84828501610231565b91505092915050565b600061027e826101a3565b9050919050565b61028e81610273565b82525050565b60006020820190506102a96000830184610285565b92915050565b60006102ba826101a3565b9050919050565b6102ca816102af565b82525050565b60006040820190506102e560008301856101c7565b6102f260208301846102c1565b9392505050565b600060408201905061030e6000830185610285565b61031b60208301846102c1565b939250505056fe60c06040523480156200001157600080fd5b5060405162002fb438038062002fb48339818101604052810190620000379190620001b0565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806040516200007a90620000df565b62000086919062000262565b604051809103906000f080158015620000a3573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200027f565b61241a8062000b9a83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011f82620000f2565b9050919050565b6000620001338262000112565b9050919050565b620001458162000126565b81146200015157600080fd5b50565b60008151905062000165816200013a565b92915050565b6000620001788262000112565b9050919050565b6200018a816200016b565b81146200019657600080fd5b50565b600081519050620001aa816200017f565b92915050565b60008060408385031215620001ca57620001c9620000ed565b5b6000620001da8582860162000154565b9250506020620001ed8582860162000199565b9150509250929050565b6000819050919050565b6000620002226200021c6200021684620000f2565b620001f7565b620000f2565b9050919050565b6000620002368262000201565b9050919050565b60006200024a8262000229565b9050919050565b6200025c816200023d565b82525050565b600060208201905062000279600083018462000251565b92915050565b60805160a0516108e8620002b26000396000818161015b015261026301526000818160b7015261028701526108e86000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632f091468146100465780633596f3d614610076578063c45a015514610094575b600080fd5b610060600480360381019061005b919061051d565b6100b2565b60405161006d9190610625565b60405180910390f35b61007e610261565b60405161008b9190610673565b60405180910390f35b61009c610285565b6040516100a991906106af565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ac05d74e893089896040518563ffffffff1660e01b81526004016101149493929190610788565b6020604051808303816000875af1158015610133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101579190610824565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f0e087ed8286866040518463ffffffff1660e01b81526004016101b693929190610860565b600060405180830381600087803b1580156101d057600080fd5b505af11580156101e4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b886040518263ffffffff1660e01b81526004016102219190610897565b600060405180830381600087803b15801561023b57600080fd5b505af115801561024f573d6000803e3d6000fd5b50505050809150509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102e8826102bd565b9050919050565b60006102fa826102dd565b9050919050565b61030a816102ef565b811461031557600080fd5b50565b60008135905061032781610301565b92915050565b610336816102dd565b811461034157600080fd5b50565b6000813590506103538161032d565b92915050565b6000819050919050565b61036c81610359565b811461037757600080fd5b50565b60008135905061038981610363565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103e282610399565b810181811067ffffffffffffffff82111715610401576104006103aa565b5b80604052505050565b60006104146102a9565b905061042082826103d9565b919050565b600067ffffffffffffffff8211156104405761043f6103aa565b5b61044982610399565b9050602081019050919050565b82818337600083830152505050565b600061047861047384610425565b61040a565b90508281526020810184848401111561049457610493610394565b5b61049f848285610456565b509392505050565b600082601f8301126104bc576104bb61038f565b5b81356104cc848260208601610465565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6104fa816104d5565b811461050557600080fd5b50565b600081359050610517816104f1565b92915050565b60008060008060008060c0878903121561053a576105396102b3565b5b600061054889828a01610318565b965050602061055989828a01610344565b955050604061056a89828a0161037a565b945050606087013567ffffffffffffffff81111561058b5761058a6102b8565b5b61059789828a016104a7565b93505060806105a889828a01610508565b92505060a06105b989828a01610508565b9150509295509295509295565b6000819050919050565b60006105eb6105e66105e1846102bd565b6105c6565b6102bd565b9050919050565b60006105fd826105d0565b9050919050565b600061060f826105f2565b9050919050565b61061f81610604565b82525050565b600060208201905061063a6000830184610616565b92915050565b600061064b826105d0565b9050919050565b600061065d82610640565b9050919050565b61066d81610652565b82525050565b60006020820190506106886000830184610664565b92915050565b600061069982610640565b9050919050565b6106a98161068e565b82525050565b60006020820190506106c460008301846106a0565b92915050565b60006106d582610640565b9050919050565b6106e5816106ca565b82525050565b6106f4816102dd565b82525050565b61070381610359565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610743578082015181840152602081019050610728565b60008484015250505050565b600061075a82610709565b6107648185610714565b9350610774818560208601610725565b61077d81610399565b840191505092915050565b600060808201905061079d60008301876106dc565b6107aa60208301866106eb565b6107b760408301856106fa565b81810360608301526107c9818461074f565b905095945050505050565b60006107df826102bd565b9050919050565b60006107f1826107d4565b9050919050565b610801816107e6565b811461080c57600080fd5b50565b60008151905061081e816107f8565b92915050565b60006020828403121561083a576108396102b3565b5b60006108488482850161080f565b91505092915050565b61085a816104d5565b82525050565b60006060820190506108756000830186610616565b6108826020830185610851565b61088f6040830184610851565b949350505050565b60006020820190506108ac60008301846106eb565b9291505056fea2646970667358221220648c1d8bc555c4ba746400695aa7ef78d800727f7290bf388929d0408149482c64736f6c6343000814003360a06040523480156200001157600080fd5b506040516200241a3803806200241a8339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b6080516122c06200015a600039600081816104970152818161075d01528181610b0c01528181610f14015261125c01526122c06000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638494cef91161008c578063de3fa3b811610066578063de3fa3b814610234578063e155887614610250578063f0e087ed14610280578063fc0c546a1461029c576100cf565b80638494cef9146101e05780639eb48800146101fc578063c6d13dd614610218576100cf565b80632a31e2bb146100d45780633e2b9e16146101045780634a179fe41461013457806351b256e214610164578063578a4d7a1461019457806366c8ec9b146101b0575b600080fd5b6100ee60048036038101906100e991906117da565b6102ba565b6040516100fb919061182e565b60405180910390f35b61011e600480360381019061011991906117da565b61031d565b60405161012b9190611864565b60405180910390f35b61014e600480360381019061014991906117da565b610398565b60405161015b91906118de565b60405180910390f35b61017e60048036038101906101799190611949565b610403565b60405161018b919061198f565b60405180910390f35b6101ae60048036038101906101a991906119f2565b61044c565b005b6101ca60048036038101906101c591906117da565b61061b565b6040516101d79190611a41565b60405180910390f35b6101fa60048036038101906101f59190611ac1565b610682565b005b610216600480360381019061021191906117da565b61083e565b005b610232600480360381019061022d91906119f2565b610896565b005b61024e600480360381019061024991906119f2565b610bee565b005b61026a600480360381019061026591906117da565b610d79565b6040516102779190611a41565b60405180910390f35b61029a60048036038101906102959190611b21565b610de0565b005b6102a461125a565b6040516102b19190611b95565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a90046bffffffffffffffffffffffff169050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16119050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b816104568161031d565b610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611c0d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104f293929190611c6d565b6020604051808303816000875af1158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190611cd0565b610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90611d49565b60405180910390fd5b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a90046fffffffffffffffffffffffffffffffff166105e09190611d98565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff169050919050565b60005b838390508110156106d1576106c08484838181106106a6576106a5611ddc565b5b90506020020160208101906106bb91906117da565b61083e565b806106ca90611e0b565b9050610685565b506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016107b6929190611e53565b6020604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f99190611cd0565b610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90611d49565b60405180910390fd5b50505050565b806108488161031d565b610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611c0d565b60405180910390fd5b61089282600061127e565b5050565b816108a08161031d565b6108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690611c0d565b60405180910390fd5b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390611f21565b60405180910390fd5b6109c784600061127e565b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff169050836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790611f8d565b60405180910390fd5b8381036000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610b65929190611fad565b6020604051808303816000875af1158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190611cd0565b610be7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bde90611d49565b60405180910390fd5b5050505050565b81610bf88161031d565b610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e90611c0d565b60405180910390fd5b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90611f21565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090612022565b60405180910390fd5b610d73848461127e565b50505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160109054906101000a90046fffffffffffffffffffffffffffffffff169050919050565b828073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190611ea8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb490611f21565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990612022565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610f6f93929190611c6d565b6020604051808303816000875af1158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190611cd0565b610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe890611d49565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663179e740b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190612057565b905061106d8561031d565b156110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a4906120d0565b60405180910390fd5b6040518060800160405280846fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001426bffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606082015181600101600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008273ffffffffffffffffffffffffffffffffffffffff1663179e740b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190612057565b905060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160018201600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081604001514261147891906120f0565b9050600082602001516fffffffffffffffffffffffffffffffff16826bffffffffffffffffffffffff166114ac9190612130565b905082600001516fffffffffffffffffffffffffffffffff1681111561151557826020015183600001516114e091906121a1565b915082602001516fffffffffffffffffffffffffffffffff16826bffffffffffffffffffffffff166115129190612130565b90505b8060016000856060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156891906121d2565b92505081905550604051806080016040528082856000015161158a9190612206565b6fffffffffffffffffffffffffffffffff1681526020016000876fffffffffffffffffffffffffffffffff16116115c55784602001516115c7565b865b6fffffffffffffffffffffffffffffffff1681526020018385604001516115ee919061224a565b6bffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606082015181600101600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117958261176a565b9050919050565b60006117a78261178a565b9050919050565b6117b78161179c565b81146117c257600080fd5b50565b6000813590506117d4816117ae565b92915050565b6000602082840312156117f0576117ef611760565b5b60006117fe848285016117c5565b91505092915050565b60006bffffffffffffffffffffffff82169050919050565b61182881611807565b82525050565b6000602082019050611843600083018461181f565b92915050565b60008115159050919050565b61185e81611849565b82525050565b60006020820190506118796000830184611855565b92915050565b6000819050919050565b60006118a461189f61189a8461176a565b61187f565b61176a565b9050919050565b60006118b682611889565b9050919050565b60006118c8826118ab565b9050919050565b6118d8816118bd565b82525050565b60006020820190506118f360008301846118cf565b92915050565b60006119048261176a565b9050919050565b6000611916826118f9565b9050919050565b6119268161190b565b811461193157600080fd5b50565b6000813590506119438161191d565b92915050565b60006020828403121561195f5761195e611760565b5b600061196d84828501611934565b91505092915050565b6000819050919050565b61198981611976565b82525050565b60006020820190506119a46000830184611980565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119cf816119aa565b81146119da57600080fd5b50565b6000813590506119ec816119c6565b92915050565b60008060408385031215611a0957611a08611760565b5b6000611a17858286016117c5565b9250506020611a28858286016119dd565b9150509250929050565b611a3b816119aa565b82525050565b6000602082019050611a566000830184611a32565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611a8157611a80611a5c565b5b8235905067ffffffffffffffff811115611a9e57611a9d611a61565b5b602083019150836020820283011115611aba57611ab9611a66565b5b9250929050565b600080600060408486031215611ada57611ad9611760565b5b600084013567ffffffffffffffff811115611af857611af7611765565b5b611b0486828701611a6b565b93509350506020611b1786828701611934565b9150509250925092565b600080600060608486031215611b3a57611b39611760565b5b6000611b48868287016117c5565b9350506020611b59868287016119dd565b9250506040611b6a868287016119dd565b9150509250925092565b6000611b7f826118ab565b9050919050565b611b8f81611b74565b82525050565b6000602082019050611baa6000830184611b86565b92915050565b600082825260208201905092915050565b7f4350533a20556e72656769737465726564204441707000000000000000000000600082015250565b6000611bf7601683611bb0565b9150611c0282611bc1565b602082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b611c36816118f9565b82525050565b6000611c57611c52611c4d846119aa565b61187f565b611976565b9050919050565b611c6781611c3c565b82525050565b6000606082019050611c826000830186611c2d565b611c8f6020830185611c2d565b611c9c6040830184611c5e565b949350505050565b611cad81611849565b8114611cb857600080fd5b50565b600081519050611cca81611ca4565b92915050565b600060208284031215611ce657611ce5611760565b5b6000611cf484828501611cbb565b91505092915050565b7f4350533a204661696c656420746f6b656e207472616e73666572000000000000600082015250565b6000611d33601a83611bb0565b9150611d3e82611cfd565b602082019050919050565b60006020820190508181036000830152611d6281611d26565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611da3826119aa565b9150611dae836119aa565b925082820190506fffffffffffffffffffffffffffffffff811115611dd657611dd5611d69565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611e1682611976565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e4857611e47611d69565b5b600182019050919050565b6000604082019050611e686000830185611c2d565b611e756020830184611980565b9392505050565b611e85816118f9565b8114611e9057600080fd5b50565b600081519050611ea281611e7c565b92915050565b600060208284031215611ebe57611ebd611760565b5b6000611ecc84828501611e93565b91505092915050565b7f4350533a204e6f742044417070206f776e657200000000000000000000000000600082015250565b6000611f0b601383611bb0565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b9050919050565b7f4350533a204e6f7420656e6f7567682066756e64730000000000000000000000600082015250565b6000611f77601583611bb0565b9150611f8282611f41565b602082019050919050565b60006020820190508181036000830152611fa681611f6a565b9050919050565b6000604082019050611fc26000830185611c2d565b611fcf6020830184611c5e565b9392505050565b7f4350533a2053616c6172792063616e6e6f742062652030000000000000000000600082015250565b600061200c601783611bb0565b915061201782611fd6565b602082019050919050565b6000602082019050818103600083015261203b81611fff565b9050919050565b6000815190506120518161191d565b92915050565b60006020828403121561206d5761206c611760565b5b600061207b84828501612042565b91505092915050565b7f4350533a204441707020697320616c7265616479207265676973746572656400600082015250565b60006120ba601f83611bb0565b91506120c582612084565b602082019050919050565b600060208201905081810360008301526120e9816120ad565b9050919050565b60006120fb82611807565b915061210683611807565b925082820390506bffffffffffffffffffffffff81111561212a57612129611d69565b5b92915050565b600061213b82611976565b915061214683611976565b925082820261215481611976565b9150828204841483151761216b5761216a611d69565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121ac826119aa565b91506121b7836119aa565b9250826121c7576121c6612172565b5b828204905092915050565b60006121dd82611976565b91506121e883611976565b9250828201905080821115612200576121ff611d69565b5b92915050565b6000612211826119aa565b915061221c836119aa565b925082820390506fffffffffffffffffffffffffffffffff81111561224457612243611d69565b5b92915050565b600061225582611807565b915061226083611807565b925082820190506bffffffffffffffffffffffff81111561228457612283611d69565b5b9291505056fea2646970667358221220ceb0a879af1d88dd20eb49ce3321d9066f9ce1ba4d9d05ba842f3dcfe1768ce764736f6c63430008140033a2646970667358221220c72403802a8c80d03915963827887c5394598820e97b0e829f1471ad557c631464736f6c63430008140033",
  "devdoc": {
    "events": {
      "ERC20DAppFactoryCreated(address,address)": {
        "params": {
          "factory": "The address of the factory",
          "token": "The token used for billing"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "ERC20DAppFactoryCreated(address,address)": {
        "notice": "A new factory was created"
      }
    },
    "kind": "user",
    "methods": {
      "newERC20DAppFactory(address)": {
        "notice": "Create a new ERC20 based DApp factory using the specified token"
      }
    },
    "notice": "Factory for creating new ERC20 based DApp factories",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}