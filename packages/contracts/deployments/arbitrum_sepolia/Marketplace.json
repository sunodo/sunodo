{
  "address": "0x85c77207642c51F6Cf8Ad76b5E777805cA5148B6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract ICartesiDAppFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IReaderNodeProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ReaderNodeProviderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IValidatorNodeProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IConsensus",
          "name": "consensus",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ValidatorNodeProviderCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ICartesiDAppFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "newReaderNodeProvider",
      "outputs": [
        {
          "internalType": "contract IReaderNodeProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "_consensus",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "newValidatorNodeProvider",
      "outputs": [
        {
          "internalType": "contract IValidatorNodeProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c4f36d8fe1a87d7f50858508176f7831a17351d6046ed1fb374659b97492e39",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xd8464d1B3592b6c3786B32931E2a2AdAC501Aaad",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "27646923",
    "logsBloom": "0x
    "blockHash": "0xb8d2461cf2e26699012eb94bf2e4a19d6d64fc3fe507592c2eb50786f0cbd9bc",
    "transactionHash": "0x9c4f36d8fe1a87d7f50858508176f7831a17351d6046ed1fb374659b97492e39",
    "logs": [],
    "blockNumber": 22947662,
    "cumulativeGasUsed": "27646923",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x7122cd1221C20892234186facfE8615e6743Ab02"
  ],
  "numDeployments": 3,
  "solcInputHash": "4ba25856d29734d15a8ed08e725891de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract ICartesiDAppFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IReaderNodeProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ReaderNodeProviderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IValidatorNodeProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ValidatorNodeProviderCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ICartesiDAppFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newReaderNodeProvider\",\"outputs\":[{\"internalType\":\"contract IReaderNodeProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConsensus\",\"name\":\"_consensus\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newValidatorNodeProvider\",\"outputs\":[{\"internalType\":\"contract IValidatorNodeProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ReaderNodeProviderCreated(address,address,address,uint256)\":{\"params\":{\"payee\":\"The address that will receive the payments\",\"price\":\"The price per second of application node execution\",\"provider\":\"The address of the provider\",\"token\":\"The token used for billing\"}},\"ValidatorNodeProviderCreated(address,address,address,address,uint256)\":{\"params\":{\"consensus\":\"The consensus associated with the provider\",\"payee\":\"The address that will receive the payments\",\"price\":\"The price per second of application node execution\",\"provider\":\"The address of the provider\",\"token\":\"The token used for billing\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ReaderNodeProviderCreated(address,address,address,uint256)\":{\"notice\":\"A new provider was created\"},\"ValidatorNodeProviderCreated(address,address,address,address,uint256)\":{\"notice\":\"A new provider was created\"}},\"kind\":\"user\",\"methods\":{\"newReaderNodeProvider(address,address,uint256)\":{\"notice\":\"Create a new ERC20 based ReaderNodeProvider using the specified token\"},\"newValidatorNodeProvider(address,address,address,uint256)\":{\"notice\":\"Create a new ERC20 based ValidatorNodeProvider using the specified token\"}},\"notice\":\"Factory for creating new ERC20 based providers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/rollups/contracts/common/CanonicalMachine.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Base-2 logarithm of number of bytes.\\n    type Log2Size is uint64;\\n\\n    /// @notice Machine word size (8 bytes).\\n    Log2Size constant WORD_LOG2_SIZE = Log2Size.wrap(3);\\n\\n    /// @notice Machine address space size (2^64 bytes).\\n    Log2Size constant MACHINE_LOG2_SIZE = Log2Size.wrap(64);\\n\\n    /// @notice Keccak-256 output size (32 bytes).\\n    Log2Size constant KECCAK_LOG2_SIZE = Log2Size.wrap(5);\\n\\n    /// @notice Maximum input size (~2 megabytes).\\n    /// @dev The offset and size fields use up the extra 64 bytes.\\n    uint256 constant INPUT_MAX_SIZE = (1 << 21) - 64;\\n\\n    /// @notice Maximum voucher metadata memory range (2 megabytes).\\n    Log2Size constant VOUCHER_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum notice metadata memory range (2 megabytes).\\n    Log2Size constant NOTICE_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum epoch voucher memory range (128 megabytes).\\n    Log2Size constant EPOCH_VOUCHER_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Maximum epoch notice memory range (128 megabytes).\\n    Log2Size constant EPOCH_NOTICE_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Unwrap `s` into its underlying uint64 value.\\n    /// @param s Base-2 logarithm of some number of bytes\\n    function uint64OfSize(Log2Size s) internal pure returns (uint64) {\\n        return Log2Size.unwrap(s);\\n    }\\n\\n    /// @notice Return the position of an intra memory range on a memory range\\n    ///         with contents with the same size.\\n    /// @param index Index of intra memory range\\n    /// @param log2Size Base-2 logarithm of intra memory range size\\n    function getIntraMemoryRangePosition(\\n        uint64 index,\\n        Log2Size log2Size\\n    ) internal pure returns (uint64) {\\n        return index << Log2Size.unwrap(log2Size);\\n    }\\n}\\n\",\"keccak256\":\"0x97cdce56cdb4f0b4164e6be3a72e50469a3124e4716e753a1792aa70eac614f5\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/common/OutputEncoding.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Output Encoding Library\\n///\\n/// @notice Defines the encoding of outputs generated by the off-chain machine.\\nlibrary OutputEncoding {\\n    /// @notice Encode a notice.\\n    /// @param notice The notice\\n    /// @return The encoded output\\n    function encodeNotice(\\n        bytes calldata notice\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(notice);\\n    }\\n\\n    /// @notice Encode a voucher.\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @return The encoded output\\n    function encodeVoucher(\\n        address destination,\\n        bytes calldata payload\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(destination, payload);\\n    }\\n}\\n\",\"keccak256\":\"0xfbf8bd40a11aeb380c77910ef7a8c3a4b358dddbd8bc795529de39c955dd6f60\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/consensus/IConsensus.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Consensus interface\\n///\\n/// @notice This contract defines a generic interface for consensuses.\\n/// We use the word \\\"consensus\\\" to designate a contract that provides claims\\n/// in the base layer regarding the state of off-chain machines running in\\n/// the execution layer. How this contract is able to reach consensus, who is\\n/// able to submit claims, and how are claims stored in the base layer are\\n/// some of the implementation details left unspecified by this interface.\\n///\\n/// From the point of view of a DApp, these claims are necessary to validate\\n/// on-chain action allowed by the off-chain machine in the form of vouchers\\n/// and notices. Each claim is composed of three parts: an epoch hash, a first\\n/// index, and a last index. We'll explain each of these parts below.\\n///\\n/// First, let us define the word \\\"epoch\\\". For finality reasons, we need to\\n/// divide the stream of inputs being fed into the off-chain machine into\\n/// batches of inputs, which we call \\\"epoches\\\". At the end of every epoch,\\n/// we summarize the state of the off-chain machine in a single hash, called\\n/// \\\"epoch hash\\\". Please note that this interface does not define how this\\n/// stream of inputs is being chopped up into epoches.\\n///\\n/// The other two parts are simply the indices of the first and last inputs\\n/// accepted during the epoch. Logically, the first index MUST BE less than\\n/// or equal to the last index. As a result, every epoch MUST accept at least\\n/// one input. This assumption stems from the fact that the state of a machine\\n/// can only change after an input is fed into it.\\n///\\n/// Examples of possible implementations of this interface include:\\n///\\n/// * An authority consensus, controlled by a single address who has full\\n///   control over epoch boundaries, claim submission, asset management, etc.\\n///\\n/// * A quorum consensus, controlled by a limited set of validators, that\\n///   vote on the state of the machine at the end of every epoch. Also, epoch\\n///   boundaries are determined by the timestamp in the base layer, and assets\\n///   are split equally amongst the validators.\\n///\\n/// * An NxN consensus, which allows anyone to submit and dispute claims\\n///   in the base layer. Epoch boundaries are determined in the same fashion\\n///   as in the quorum example.\\n///\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set.\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join`.\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a specific claim regarding a specific DApp.\\n    ///         The encoding of `_proofContext` might vary\\n    ///         depending on the implementation.\\n    /// @param _dapp The DApp address\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The claimed epoch hash\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Signal the consensus that the message sender wants to join its validation set.\\n    /// @dev MUST fire an `ApplicationJoined` event with the message sender as argument.\\n    function join() external;\\n}\\n\",\"keccak256\":\"0xc9d295fada66eb0602e0f1e2e236708e52f959927abb4ab6b04173a98b92ac16\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {ICartesiDApp, Proof} from \\\"./ICartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {LibOutputValidation, OutputValidityProof} from \\\"../library/LibOutputValidation.sol\\\";\\nimport {Bitmask} from \\\"@cartesi/util/contracts/Bitmask.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Cartesi DApp\\n///\\n/// @notice This contract acts as the base layer incarnation of a DApp running on the execution layer.\\n/// The DApp is hereby able to interact with other smart contracts through the execution of vouchers\\n/// and the validation of notices. These outputs are generated by the DApp backend on the execution\\n/// layer and can be proven in the base layer thanks to claims submitted by a consensus contract.\\n///\\n/// A voucher is a one-time message call to another contract. It can encode asset transfers, approvals,\\n/// or any other message call that doesn't require Ether to be sent along. A voucher will only be consumed\\n/// if the underlying message call succeeds (that is, it doesn't revert). Furthermore, the return data of\\n/// the message call is discarded entirely. As a protective measure against reentrancy attacks, nested\\n/// voucher executions are prohibited.\\n///\\n/// A notice, on the other hand, constitutes an arbitrary piece of data that can be proven any number of times.\\n/// On their own, they do not trigger any type of contract-to-contract interaction.\\n/// Rather, they merely serve to attest off-chain results, e.g. which player won a particular chess match.\\n///\\n/// Every DApp is subscribed to a consensus contract, and governed by a single address, the owner.\\n/// The consensus has the power of submitting claims, which, in turn, are used to validate vouchers and notices.\\n/// Meanwhile, the owner has complete power over the DApp, as it can replace the consensus at any time.\\n/// Therefore, the users of a DApp must trust both the consensus and the DApp owner.\\n///\\n/// The DApp developer can choose whichever ownership and consensus models it wants.\\n///\\n/// Examples of DApp ownership models include:\\n///\\n/// * no owner (address zero)\\n/// * individual signer (externally-owned account)\\n/// * multiple signers (multi-sig)\\n/// * DAO (decentralized autonomous organization)\\n/// * self-owned DApp (off-chain governance logic)\\n///\\n/// See `IConsensus` for examples of consensus models.\\n///\\n/// This contract inherits the following OpenZeppelin contracts.\\n/// For more information, please consult OpenZeppelin's official documentation.\\n///\\n/// * `Ownable`\\n/// * `ERC721Holder`\\n/// * `ERC1155Holder`\\n/// * `ReentrancyGuard`\\n///\\ncontract CartesiDApp is\\n    ICartesiDApp,\\n    Ownable,\\n    ERC721Holder,\\n    ERC1155Holder,\\n    ReentrancyGuard\\n{\\n    using Bitmask for mapping(uint256 => uint256);\\n    using LibOutputValidation for OutputValidityProof;\\n\\n    /// @notice Raised when executing an already executed voucher.\\n    error VoucherReexecutionNotAllowed();\\n\\n    /// @notice Raised when the transfer fails.\\n    error EtherTransferFailed();\\n\\n    /// @notice Raised when a mehtod is not called by DApp itself.\\n    error OnlyDApp();\\n\\n    /// @notice The initial machine state hash.\\n    /// @dev See the `getTemplateHash` function.\\n    bytes32 internal immutable templateHash;\\n\\n    /// @notice The executed voucher bitmask, which keeps track of which vouchers\\n    ///         were executed already in order to avoid re-execution.\\n    /// @dev See the `wasVoucherExecuted` function.\\n    mapping(uint256 => uint256) internal voucherBitmask;\\n\\n    /// @notice The current consensus contract.\\n    /// @dev See the `getConsensus` and `migrateToConsensus` functions.\\n    IConsensus internal consensus;\\n\\n    /// @notice Creates a `CartesiDApp` contract.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _owner The initial DApp owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @dev Calls the `join` function on `_consensus`.\\n    constructor(IConsensus _consensus, address _owner, bytes32 _templateHash) {\\n        transferOwnership(_owner);\\n        templateHash = _templateHash;\\n        consensus = _consensus;\\n\\n        _consensus.join();\\n    }\\n\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external override nonReentrant returns (bool) {\\n        bytes32 epochHash;\\n        uint256 firstInputIndex;\\n        uint256 lastInputIndex;\\n        uint256 inputIndex;\\n\\n        // query the current consensus for the desired claim\\n        (epochHash, firstInputIndex, lastInputIndex) = getClaim(_proof.context);\\n\\n        // validate input index range and calculate the input index\\n        // based on the input index range provided by the consensus\\n        inputIndex = _proof.validity.validateInputIndexRange(\\n            firstInputIndex,\\n            lastInputIndex\\n        );\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateVoucher(_destination, _payload, epochHash);\\n\\n        uint256 voucherPosition = LibOutputValidation.getBitMaskPosition(\\n            _proof.validity.outputIndexWithinInput,\\n            inputIndex\\n        );\\n\\n        // check if voucher has been executed\\n        if (_wasVoucherExecuted(voucherPosition)) {\\n            revert VoucherReexecutionNotAllowed();\\n        }\\n\\n        // execute voucher\\n        (bool succ, ) = _destination.call(_payload);\\n\\n        // if properly executed, mark it as executed and emit event\\n        if (succ) {\\n            voucherBitmask.setBit(voucherPosition, true);\\n            emit VoucherExecuted(voucherPosition);\\n        }\\n\\n        return succ;\\n    }\\n\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view override returns (bool) {\\n        uint256 voucherPosition = LibOutputValidation.getBitMaskPosition(\\n            _outputIndexWithinInput,\\n            _inputIndex\\n        );\\n        return _wasVoucherExecuted(voucherPosition);\\n    }\\n\\n    function _wasVoucherExecuted(\\n        uint256 _voucherPosition\\n    ) internal view returns (bool) {\\n        return voucherBitmask.getBit(_voucherPosition);\\n    }\\n\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view override returns (bool) {\\n        bytes32 epochHash;\\n        uint256 firstInputIndex;\\n        uint256 lastInputIndex;\\n\\n        // query the current consensus for the desired claim\\n        (epochHash, firstInputIndex, lastInputIndex) = getClaim(_proof.context);\\n\\n        // validate the epoch input index based on the input index range\\n        // provided by the consensus\\n        _proof.validity.validateInputIndexRange(\\n            firstInputIndex,\\n            lastInputIndex\\n        );\\n\\n        // reverts if proof isn't valid\\n        _proof.validity.validateNotice(_notice, epochHash);\\n\\n        return true;\\n    }\\n\\n    /// @notice Retrieve a claim about the DApp from the current consensus.\\n    ///         The encoding of `_proofContext` might vary depending on the implementation.\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return The claimed epoch hash\\n    /// @return The index of the first input of the epoch in the input box\\n    /// @return The index of the last input of the epoch in the input box\\n    function getClaim(\\n        bytes calldata _proofContext\\n    ) internal view returns (bytes32, uint256, uint256) {\\n        return consensus.getClaim(address(this), _proofContext);\\n    }\\n\\n    function migrateToConsensus(\\n        IConsensus _newConsensus\\n    ) external override onlyOwner {\\n        consensus = _newConsensus;\\n\\n        _newConsensus.join();\\n\\n        emit NewConsensus(_newConsensus);\\n    }\\n\\n    function getTemplateHash() external view override returns (bytes32) {\\n        return templateHash;\\n    }\\n\\n    function getConsensus() external view override returns (IConsensus) {\\n        return consensus;\\n    }\\n\\n    /// @notice Accept Ether transfers.\\n    /// @dev If you wish to transfer Ether to a DApp while informing\\n    ///      the DApp backend of it, then please do so through the Ether portal contract.\\n    receive() external payable {}\\n\\n    /// @notice Transfer some amount of Ether to some recipient.\\n    /// @param _receiver The address which will receive the amount of Ether\\n    /// @param _value The amount of Ether to be transferred in Wei\\n    /// @dev This function can only be called by the DApp itself through vouchers.\\n    ///      If this method is not called by DApp itself, `OnlyDApp` error is raised.\\n    ///      If the transfer fails, `EtherTransferFailed` error is raised.\\n    function withdrawEther(address _receiver, uint256 _value) external {\\n        if (msg.sender != address(this)) {\\n            revert OnlyDApp();\\n        }\\n\\n        (bool sent, ) = _receiver.call{value: _value}(\\\"\\\");\\n\\n        if (!sent) {\\n            revert EtherTransferFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe54766db1afcbb9578fffc1a87927d95673f1a630d88a7889941878a89761128\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\nimport {OutputValidityProof} from \\\"../library/LibOutputValidation.sol\\\";\\n\\n/// @notice Data for validating outputs.\\n/// @param validity A validity proof for the output\\n/// @param context Data for querying the right claim from the current consensus contract\\n/// @dev The encoding of `context` might vary depending on the implementation of the consensus contract.\\nstruct Proof {\\n    OutputValidityProof validity;\\n    bytes context;\\n}\\n\\n/// @title Cartesi DApp interface\\ninterface ICartesiDApp {\\n    // Events\\n\\n    /// @notice The DApp has migrated to another consensus contract.\\n    /// @param newConsensus The new consensus contract\\n    /// @dev MUST be triggered on a successful call to `migrateToConsensus`.\\n    event NewConsensus(IConsensus newConsensus);\\n\\n    /// @notice A voucher was executed from the DApp.\\n    /// @param voucherId A number that uniquely identifies the voucher\\n    ///                  amongst all vouchers emitted by this DApp\\n    event VoucherExecuted(uint256 voucherId);\\n\\n    // Permissioned functions\\n\\n    /// @notice Migrate the DApp to a new consensus.\\n    /// @param _newConsensus The new consensus\\n    /// @dev Can only be called by the DApp owner.\\n    function migrateToConsensus(IConsensus _newConsensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Try to execute a voucher.\\n    ///\\n    /// Reverts if voucher was already successfully executed.\\n    ///\\n    /// @param _destination The address that will receive the payload through a message call\\n    /// @param _payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param _proof The proof used to validate the voucher against\\n    ///               a claim submitted by the current consensus contract\\n    /// @return Whether the execution was successful or not\\n    /// @dev On a successful execution, emits a `VoucherExecuted` event.\\n    ///      Execution of already executed voucher will raise a `VoucherReexecutionNotAllowed` error.\\n    function executeVoucher(\\n        address _destination,\\n        bytes calldata _payload,\\n        Proof calldata _proof\\n    ) external returns (bool);\\n\\n    /// @notice Check whether a voucher has been executed.\\n    /// @param _inputIndex The index of the input in the input box\\n    /// @param _outputIndexWithinInput The index of output emitted by the input\\n    /// @return Whether the voucher has been executed before\\n    function wasVoucherExecuted(\\n        uint256 _inputIndex,\\n        uint256 _outputIndexWithinInput\\n    ) external view returns (bool);\\n\\n    /// @notice Validate a notice.\\n    /// @param _notice The notice\\n    /// @param _proof Data for validating outputs\\n    /// @return Whether the notice is valid or not\\n    function validateNotice(\\n        bytes calldata _notice,\\n        Proof calldata _proof\\n    ) external view returns (bool);\\n\\n    /// @notice Get the DApp's template hash.\\n    /// @return The DApp's template hash\\n    function getTemplateHash() external view returns (bytes32);\\n\\n    /// @notice Get the current consensus.\\n    /// @return The current consensus\\n    function getConsensus() external view returns (IConsensus);\\n}\\n\",\"keccak256\":\"0x7bb375a4deb593af06955bbf1d88e096f4288f25fa032349796f93705d29386f\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/dapp/ICartesiDAppFactory.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CartesiDApp} from \\\"./CartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"../consensus/IConsensus.sol\\\";\\n\\n/// @title Cartesi DApp Factory interface\\ninterface ICartesiDAppFactory {\\n    // Events\\n\\n    /// @notice A new application was deployed.\\n    /// @param consensus The initial consensus contract\\n    /// @param dappOwner The initial DApp owner\\n    /// @param templateHash The initial machine state hash\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `newApplication`.\\n    event ApplicationCreated(\\n        IConsensus indexed consensus,\\n        address dappOwner,\\n        bytes32 templateHash,\\n        CartesiDApp application\\n    );\\n\\n    // Permissionless functions\\n\\n    /// @notice Deploy a new application.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _dappOwner The initial DApp owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash\\n    ) external returns (CartesiDApp);\\n\\n    /// @notice Deploy a new application deterministically.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _dappOwner The initial DApp owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @param _salt The salt used to deterministically generate the DApp address\\n    /// @return The application\\n    /// @dev On success, MUST emit an `ApplicationCreated` event.\\n    function newApplication(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external returns (CartesiDApp);\\n\\n    /// @notice Calculate the address of an application to be deployed deterministically.\\n    /// @param _consensus The initial consensus contract\\n    /// @param _dappOwner The initial DApp owner\\n    /// @param _templateHash The initial machine state hash\\n    /// @param _salt The salt used to deterministically generate the DApp address\\n    /// @return The deterministic application address\\n    /// @dev Beware that only the `newApplication` function with the `_salt` parameter\\n    ///      is able to deterministically deploy an application.\\n    function calculateApplicationAddress(\\n        IConsensus _consensus,\\n        address _dappOwner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb6d6ae44b2195f54a5c5ac85dc1c33801036878982c6b9aafe8fb66a3103517b\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/rollups/contracts/library/LibOutputValidation.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\nimport {MerkleV2} from \\\"@cartesi/util/contracts/MerkleV2.sol\\\";\\nimport {OutputEncoding} from \\\"../common/OutputEncoding.sol\\\";\\n\\n/// @param inputIndexWithinEpoch Which input, inside the epoch, the output belongs to\\n/// @param outputIndexWithinInput Index of output emitted by the input\\n/// @param outputHashesRootHash Merkle root of hashes of outputs emitted by the input\\n/// @param vouchersEpochRootHash Merkle root of all epoch's voucher metadata hashes\\n/// @param noticesEpochRootHash Merkle root of all epoch's notice metadata hashes\\n/// @param machineStateHash Hash of the machine state claimed this epoch\\n/// @param outputHashInOutputHashesSiblings Proof that this output metadata is in metadata memory range\\n/// @param outputHashesInEpochSiblings Proof that this output metadata is in epoch's output memory range\\nstruct OutputValidityProof {\\n    uint64 inputIndexWithinEpoch;\\n    uint64 outputIndexWithinInput;\\n    bytes32 outputHashesRootHash;\\n    bytes32 vouchersEpochRootHash;\\n    bytes32 noticesEpochRootHash;\\n    bytes32 machineStateHash;\\n    bytes32[] outputHashInOutputHashesSiblings;\\n    bytes32[] outputHashesInEpochSiblings;\\n}\\n\\n/// @title Output Validation Library\\nlibrary LibOutputValidation {\\n    using CanonicalMachine for CanonicalMachine.Log2Size;\\n\\n    /// @notice Raised when some `OutputValidityProof` variables does not match\\n    ///         the presented finalized epoch.\\n    error IncorrectEpochHash();\\n\\n    /// @notice Raised when `OutputValidityProof` metadata memory range is NOT\\n    ///         contained in epoch's output memory range.\\n    error IncorrectOutputsEpochRootHash();\\n\\n    /// @notice Raised when Merkle root of output hash is NOT contained\\n    ///         in the output metadata array memory range.\\n    error IncorrectOutputHashesRootHash();\\n\\n    /// @notice Raised when epoch input index is NOT compatible with the\\n    ///         provided input index range.\\n    error InputIndexOutOfClaimBounds();\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param encodedOutput The encoded output\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    /// @param outputsEpochRootHash Either `v.vouchersEpochRootHash` (for vouchers)\\n    ///                             or `v.noticesEpochRootHash` (for notices)\\n    /// @param outputEpochLog2Size Either `EPOCH_VOUCHER_LOG2_SIZE` (for vouchers)\\n    ///                            or `EPOCH_NOTICE_LOG2_SIZE` (for notices)\\n    /// @param outputHashesLog2Size Either `VOUCHER_METADATA_LOG2_SIZE` (for vouchers)\\n    ///                             or `NOTICE_METADATA_LOG2_SIZE` (for notices)\\n    function validateEncodedOutput(\\n        OutputValidityProof calldata v,\\n        bytes memory encodedOutput,\\n        bytes32 epochHash,\\n        bytes32 outputsEpochRootHash,\\n        uint256 outputEpochLog2Size,\\n        uint256 outputHashesLog2Size\\n    ) internal pure {\\n        // prove that outputs hash is represented in a finalized epoch\\n        if (\\n            keccak256(\\n                abi.encodePacked(\\n                    v.vouchersEpochRootHash,\\n                    v.noticesEpochRootHash,\\n                    v.machineStateHash\\n                )\\n            ) != epochHash\\n        ) {\\n            revert IncorrectEpochHash();\\n        }\\n\\n        // prove that output metadata memory range is contained in epoch's output memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.inputIndexWithinEpoch,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputEpochLog2Size,\\n                v.outputHashesRootHash,\\n                v.outputHashesInEpochSiblings\\n            ) != outputsEpochRootHash\\n        ) {\\n            revert IncorrectOutputsEpochRootHash();\\n        }\\n\\n        // The hash of the output is converted to bytes (abi.encode) and\\n        // treated as data. The metadata output memory range stores that data while\\n        // being indifferent to its contents. To prove that the received\\n        // output is contained in the metadata output memory range we need to\\n        // prove that x, where:\\n        // x = keccak(\\n        //          keccak(\\n        //              keccak(hashOfOutput[0:7]),\\n        //              keccak(hashOfOutput[8:15])\\n        //          ),\\n        //          keccak(\\n        //              keccak(hashOfOutput[16:23]),\\n        //              keccak(hashOfOutput[24:31])\\n        //          )\\n        //     )\\n        // is contained in it. We can't simply use hashOfOutput because the\\n        // log2size of the leaf is three (8 bytes) not  five (32 bytes)\\n        bytes32 merkleRootOfHashOfOutput = MerkleV2.getMerkleRootFromBytes(\\n            abi.encodePacked(keccak256(encodedOutput)),\\n            CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize()\\n        );\\n\\n        // prove that Merkle root of bytes(hashOfOutput) is contained\\n        // in the output metadata array memory range\\n        if (\\n            MerkleV2.getRootAfterReplacementInDrive(\\n                CanonicalMachine.getIntraMemoryRangePosition(\\n                    v.outputIndexWithinInput,\\n                    CanonicalMachine.KECCAK_LOG2_SIZE\\n                ),\\n                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),\\n                outputHashesLog2Size,\\n                merkleRootOfHashOfOutput,\\n                v.outputHashInOutputHashesSiblings\\n            ) != v.outputHashesRootHash\\n        ) {\\n            revert IncorrectOutputHashesRootHash();\\n        }\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param destination The address that will receive the payload through a message call\\n    /// @param payload The payload, which\\u2014in the case of Solidity contracts\\u2014encodes a function call\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateVoucher(\\n        OutputValidityProof calldata v,\\n        address destination,\\n        bytes calldata payload,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedVoucher = OutputEncoding.encodeVoucher(\\n            destination,\\n            payload\\n        );\\n        validateEncodedOutput(\\n            v,\\n            encodedVoucher,\\n            epochHash,\\n            v.vouchersEpochRootHash,\\n            CanonicalMachine.EPOCH_VOUCHER_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.VOUCHER_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Make sure the output proof is valid, otherwise revert.\\n    /// @param v The output validity proof\\n    /// @param notice The notice\\n    /// @param epochHash The hash of the epoch in which the output was generated\\n    function validateNotice(\\n        OutputValidityProof calldata v,\\n        bytes calldata notice,\\n        bytes32 epochHash\\n    ) internal pure {\\n        bytes memory encodedNotice = OutputEncoding.encodeNotice(notice);\\n        validateEncodedOutput(\\n            v,\\n            encodedNotice,\\n            epochHash,\\n            v.noticesEpochRootHash,\\n            CanonicalMachine.EPOCH_NOTICE_LOG2_SIZE.uint64OfSize(),\\n            CanonicalMachine.NOTICE_METADATA_LOG2_SIZE.uint64OfSize()\\n        );\\n    }\\n\\n    /// @notice Get the position of a voucher on the bit mask.\\n    /// @param voucher The index of voucher from those generated by such input\\n    /// @param input The index of the input in the DApp's input box\\n    /// @return Position of the voucher on the bit mask\\n    function getBitMaskPosition(\\n        uint256 voucher,\\n        uint256 input\\n    ) internal pure returns (uint256) {\\n        // voucher * 2 ** 128 + input\\n        // this shouldn't overflow because it is impossible to have > 2**128 vouchers\\n        // and because we are assuming there will be < 2 ** 128 inputs on the input box\\n        return (((voucher << 128) | input));\\n    }\\n\\n    /// @notice Validate input index range and get the input index.\\n    /// @param v The output validity proof\\n    /// @param firstInputIndex The index of the first input of the epoch in the input box\\n    /// @param lastInputIndex The index of the last input of the epoch in the input box\\n    /// @return The index of the input in the DApp's input box\\n    /// @dev Reverts if epoch input index is not compatible with the provided input index range.\\n    function validateInputIndexRange(\\n        OutputValidityProof calldata v,\\n        uint256 firstInputIndex,\\n        uint256 lastInputIndex\\n    ) internal pure returns (uint256) {\\n        uint256 inputIndex = firstInputIndex + v.inputIndexWithinEpoch;\\n\\n        if (inputIndex > lastInputIndex) {\\n            revert InputIndexOutOfClaimBounds();\\n        }\\n\\n        return inputIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x874ef478bd265acc94f2480a97191da907f05c6b46dc9e901c534b6acab14e03\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"@cartesi/util/contracts/Bitmask.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Bit Mask Library\\n/// @author Stephen Chen\\n/// @notice Implements bit mask with dynamic array\\nlibrary Bitmask {\\n    /// @notice Set a bit in the bit mask\\n    function setBit(mapping(uint256 => uint256) storage bitmask, uint256 _bit, bool _value) public {\\n        // calculate the number of bits has been store in bitmask now\\n        uint256 positionOfMask = uint256(_bit / 256);\\n        uint256 positionOfBit = _bit % 256;\\n\\n        if (_value) {\\n            bitmask[positionOfMask] = bitmask[positionOfMask] | (1 << positionOfBit);\\n        } else {\\n            bitmask[positionOfMask] = bitmask[positionOfMask] & ~(1 << positionOfBit);\\n        }\\n    }\\n\\n    /// @notice Get a bit in the bit mask\\n    function getBit(mapping(uint256 => uint256) storage bitmask, uint256 _bit) public view returns (bool) {\\n        // calculate the number of bits has been store in bitmask now\\n        uint256 positionOfMask = uint256(_bit / 256);\\n        uint256 positionOfBit = _bit % 256;\\n\\n        return ((bitmask[positionOfMask] & (1 << positionOfBit)) != 0);\\n    }\\n}\\n\",\"keccak256\":\"0x606a3967f7444ce1dc07726e6c5cdcf48360000817c65b631e6ebd8fb96f6e1d\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/CartesiMathV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.8.0;\\n\\nlibrary CartesiMathV2 {\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    /// @return approximate log2 times 1M\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading * uint256(1000000)) + (getLog2TableTimes1M(_num));\\n    }\\n\\n    /// @notice navigates log2tableTimes1M\\n    /// @param _num number to take log2 of\\n    /// @return result after table look-up\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n\\n    /// @notice get floor of log2 of number\\n    /// @param _num number to take floor(log2) of\\n    /// @return floor(log2) of _num\\n    function getLog2Floor(uint256 _num) public pure returns (uint8) {\\n        require(_num != 0, \\\"log of zero is undefined\\\");\\n\\n        return uint8(255 - clz(_num));\\n    }\\n\\n    /// @notice checks if a number is Power of 2\\n    /// @param _num number to check\\n    /// @return true if number is power of 2, false if not\\n    function isPowerOf2(uint256 _num) public pure returns (bool) {\\n        if (_num == 0) return false;\\n\\n        return _num & (_num - 1) == 0;\\n    }\\n\\n    /// @notice count trailing zeros\\n    /// @param _num number you want the ctz of\\n    /// @dev this a binary search implementation\\n    function ctz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n            n = n + 128;\\n            _num = _num >> 128;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF == 0) {\\n            n = n + 64;\\n            _num = _num >> 64;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF == 0) {\\n            n = n + 32;\\n            _num = _num >> 32;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000FFFF == 0) {\\n            n = n + 16;\\n            _num = _num >> 16;\\n        }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000000000FF == 0) {\\n            n = n + 8;\\n            _num = _num >> 8;\\n        }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000000F == 0) {\\n            n = n + 4;\\n            _num = _num >> 4;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000003 == 0) {\\n            n = n + 2;\\n            _num = _num >> 2;\\n        }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000001 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n            n = n + 128;\\n            _num = _num << 128;\\n        }\\n        if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 64;\\n            _num = _num << 64;\\n        }\\n        if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 32;\\n            _num = _num << 32;\\n        }\\n        if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 16;\\n            _num = _num << 16;\\n        }\\n        if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 8;\\n            _num = _num << 8;\\n        }\\n        if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 4;\\n            _num = _num << 4;\\n        }\\n        if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 2;\\n            _num = _num << 2;\\n        }\\n        if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n            n = n + 1;\\n        }\\n\\n        return n;\\n    }\\n}\\n\",\"keccak256\":\"0x98fb8d20c05b7c39c44171b6c524cf023da646749eb90157463538da8b2e13d3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/MerkleV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CartesiMathV2.sol\\\";\\n\\nlibrary MerkleV2 {\\n    using CartesiMathV2 for uint256;\\n\\n    uint128 constant L_WORD_SIZE = 3; // word = 8 bytes, log = 3\\n    // number of hashes in EMPTY_TREE_HASHES\\n    uint128 constant EMPTY_TREE_SIZE = 1952; // 61*32=1952. 32 bytes per 61 indexes (64 words)\\n\\n    // merkle root hashes of trees of zero concatenated\\n    // 32 bytes for each root, first one is keccak(0), second one is\\n    // keccak(keccack(0), keccak(0)) and so on\\n\\n    bytes constant EMPTY_TREE_HASHES =\\n        hex\\\"011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce4d9470a821fbe90117ec357e30bad9305732fb19ddf54a07dd3e29f440619254ae39ce8537aca75e2eff3e38c98011dfe934e700a0967732fc07b430dd656a233fc9a15f5b4869c872f81087bb6104b7d63e6f9ab47f2c43f3535eae7172aa7f17d2dd614cddaa4d879276b11e0672c9560033d3e8453a1d045339d34ba601b9c37b8b13ca95166fb7af16988a70fcc90f38bf9126fd833da710a47fb37a55e68e7a427fa943d9966b389f4f257173676090c6e95f43e2cb6d65f8758111e30930b0b9deb73e155c59740bacf14a6ff04b64bb8e201a506409c3fe381ca4ea90cd5deac729d0fdaccc441d09d7325f41586ba13c801b7eccae0f95d8f3933efed8b96e5b7f6f459e9cb6a2f41bf276c7b85c10cd4662c04cbbb365434726c0a0c9695393027fb106a8153109ac516288a88b28a93817899460d6310b71cf1e6163e8806fa0d4b197a259e8c3ac28864268159d0ac85f8581ca28fa7d2c0c03eb91e3eee5ca7a3da2b3053c9770db73599fb149f620e3facef95e947c0ee860b72122e31e4bbd2b7c783d79cc30f60c6238651da7f0726f767d22747264fdb046f7549f26cc70ed5e18baeb6c81bb0625cb95bb4019aeecd40774ee87ae29ec517a71f6ee264c5d761379b3d7d617ca83677374b49d10aec50505ac087408ca892b573c267a712a52e1d06421fe276a03efb1889f337201110fdc32a81f8e152499af665835aabfdc6740c7e2c3791a31c3cdc9f5ab962f681b12fc092816a62f27d86025599a41233848702f0cfc0437b445682df51147a632a0a083d2d38b5e13e466a8935afff58bb533b3ef5d27fba63ee6b0fd9e67ff20af9d50deee3f8bf065ec220c1fd4ba57e341261d55997f85d66d32152526736872693d2b437a233e2337b715f6ac9a6a272622fdc2d67fcfe1da3459f8dab4ed7e40a657a54c36766c5e8ac9a88b35b05c34747e6507f6b044ab66180dc76ac1a696de03189593fedc0d0dbbd855c8ead673544899b0960e4a5a7ca43b4ef90afe607de7698caefdc242788f654b57a4fb32a71b335ef6ff9a4cc118b282b53bdd6d6192b7a82c3c5126b9c7e33c8e5a5ac9738b8bd31247fb7402054f97b573e8abb9faad219f4fd085aceaa7f542d787ee4196d365f3cc566e7bbcfbfd451230c48d804c017d21e2d8fa914e2559bb72bf0ab78c8ab92f00ef0d0d576eccdd486b64138a4172674857e543d1d5b639058dd908186597e366ad5f3d9c7ceaff44d04d1550b8d33abc751df07437834ba5acb32328a396994aebb3c40f759c2d6d7a3cb5377e55d5d218ef5a296dda8ddc355f3f50c3d0b660a51dfa4d98a6a5a33564556cf83c1373a814641d6a1dcef97b883fee61bb84fe60a3409340217e629cc7e4dcc93b85d8820921ff5826148b60e6939acd7838e1d7f20562bff8ee4b5ec4a05ad997a57b9796fdcb2eda87883c2640b072b140b946bfdf6575cacc066fdae04f6951e63624cbd316a677cad529bbe4e97b9144e4bc06c4afd1de55dd3e1175f90423847a230d34dfb71ed56f2965a7f6c72e6aa33c24c303fd67745d632656c5ef90bec80f4f5d1daa251988826cef375c81c36bf457e09687056f924677cb0bccf98dff81e014ce25f2d132497923e267363963cdf4302c5049d63131dc03fd95f65d8b6aa5934f817252c028c90f56d413b9d5d10d89790707dae2fabb249f649929927c21dd71e3f656826de5451c5da375aadecbd59d5ebf3a31fae65ac1b316a1611f1b276b26530f58d7247df459ce1f86db1d734f6f811932f042cee45d0e455306d01081bc3384f82c5fb2aacaa19d89cdfa46cc916eac61121475ba2e6191b4feecbe1789717021a158ace5d06744b40f551076b67cd63af60007f8c99876e1424883a45ec49d497ddaf808a5521ca74a999ab0b3c7aa9c80f85e93977ec61ce68b20307a1a81f71ca645b568fcd319ccbb5f651e87b707d37c39e15f945ea69e2f7c7d2ccc85b7e654c07e96f0636ae4044fe0e38590b431795ad0f8647bdd613713ada493cc17efd313206380e6a685b8198475bbd021c6e9d94daab2214947127506073e44d5408ba166c512a0b86805d07f5a44d3c41706be2bc15e712e55805248b92e8677d90f6d284d1d6ffaff2c430657042a0e82624fa3717b06cc0a6fd12230ea586dae83019fb9e06034ed2803c98d554b93c9a52348cafff75c40174a91f9ae6b8647854a156029f0b88b83316663ce574a4978277bb6bb27a31085634b6ec78864b6d8201c7e93903d75815067e378289a3d072ae172dafa6a452470f8d645bebfad9779594fc0784bb764a22e3a8181d93db7bf97893c414217a618ccb14caa9e92e8c61673afc9583662e812adba1f87a9c68202d60e909efab43c42c0cb00695fc7f1ffe67c75ca894c3c51e1e5e731360199e600f6ced9a87b2a6a87e70bf251bb5075ab222138288164b2eda727515ea7de12e2496d4fe42ea8d1a120c03cf9c50622c2afe4acb0dad98fd62d07ab4e828a94495f6d1ab973982c7ccbe6c1fae02788e4422ae22282fa49cbdb04ba54a7a238c6fc41187451383460762c06d1c8a72b9cd718866ad4b689e10c9a8c38fe5ef045bd785b01e980fc82c7e3532ce81876b778dd9f1ceeba4478e86411fb6fdd790683916ca832592485093644e8760cd7b4c01dba1ccc82b661bf13f0e3f34acd6b88\\\";\\n\\n    /// @notice Gets merkle root hash of drive with a replacement\\n    /// @param _position position of _drive\\n    /// @param _logSizeOfReplacement log2 of size the replacement\\n    /// @param _logSizeOfFullDrive log2 of size the full drive, which can be the entire machine\\n    /// @param _replacement hash of the replacement\\n    /// @param siblings of replacement that merkle root can be calculated\\n    function getRootAfterReplacementInDrive(\\n        uint256 _position,\\n        uint256 _logSizeOfReplacement,\\n        uint256 _logSizeOfFullDrive,\\n        bytes32 _replacement,\\n        bytes32[] calldata siblings\\n    ) public pure returns (bytes32) {\\n        require(\\n            _logSizeOfFullDrive >= _logSizeOfReplacement && _logSizeOfReplacement >= 3 && _logSizeOfFullDrive <= 64,\\n            \\\"3 <= logSizeOfReplacement <= logSizeOfFullDrive <= 64\\\"\\n        );\\n\\n        uint256 size = 1 << _logSizeOfReplacement;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == _logSizeOfFullDrive - _logSizeOfReplacement, \\\"Proof length does not match\\\");\\n\\n        for (uint256 i; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                _replacement = keccak256(abi.encodePacked(_replacement, siblings[i]));\\n            } else {\\n                _replacement = keccak256(abi.encodePacked(siblings[i], _replacement));\\n            }\\n        }\\n\\n        return _replacement;\\n    }\\n\\n    /// @notice Gets precomputed hash of zero in empty tree hashes\\n    /// @param _index of hash wanted\\n    /// @dev first index is keccak(0), second index is keccak(keccak(0), keccak(0))\\n    function getEmptyTreeHashAtIndex(uint256 _index) public pure returns (bytes32) {\\n        uint256 start = _index * 32;\\n        require(EMPTY_TREE_SIZE >= start + 32, \\\"index out of bounds\\\");\\n        bytes32 hashedZeros;\\n        bytes memory zeroTree = EMPTY_TREE_HASHES;\\n\\n        // first word is length, then skip index words\\n        assembly {\\n            hashedZeros := mload(add(add(zeroTree, 0x20), start))\\n        }\\n        return hashedZeros;\\n    }\\n\\n    /// @notice get merkle root of generic array of bytes\\n    /// @param _data array of bytes to be merklelized\\n    /// @param _log2Size log2 of total size of the drive\\n    /// @dev _data is padded with zeroes until is multiple of 8\\n    /// @dev root is completed with zero tree until log2size is complete\\n    /// @dev hashes are taken word by word (8 bytes by 8 bytes)\\n    function getMerkleRootFromBytes(bytes calldata _data, uint256 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3 && _log2Size <= 64, \\\"range of log2Size: [3,64]\\\");\\n\\n        // if _data is empty return pristine drive of size log2size\\n        if (_data.length == 0) return getEmptyTreeHashAtIndex(_log2Size - 3);\\n\\n        // total size of the drive in words\\n        uint256 size = 1 << (_log2Size - 3);\\n        require(size << L_WORD_SIZE >= _data.length, \\\"data is bigger than drive\\\");\\n        // the stack depth is log2(_data.length / 8) + 2\\n        uint256 stack_depth = 2 + ((_data.length) >> L_WORD_SIZE).getLog2Floor();\\n        bytes32[] memory stack = new bytes32[](stack_depth);\\n\\n        uint256 numOfHashes; // total number of hashes on stack (counting levels)\\n        uint256 stackLength; // total length of stack\\n        uint256 numOfJoins; // number of hashes of the same level on stack\\n        uint256 topStackLevel; // hash level of the top of the stack\\n\\n        while (numOfHashes < size) {\\n            if ((numOfHashes << L_WORD_SIZE) < _data.length) {\\n                // we still have words to hash\\n                stack[stackLength] = getHashOfWordAtIndex(_data, numOfHashes);\\n                numOfHashes++;\\n\\n                numOfJoins = numOfHashes;\\n            } else {\\n                // since padding happens in hashOfWordAtIndex function\\n                // we only need to complete the stack with pre-computed\\n                // hash(0), hash(hash(0),hash(0)) and so on\\n                topStackLevel = numOfHashes.ctz();\\n\\n                stack[stackLength] = getEmptyTreeHashAtIndex(topStackLevel);\\n\\n                //Empty Tree Hash summarizes many hashes\\n                numOfHashes = numOfHashes + (1 << topStackLevel);\\n                numOfJoins = numOfHashes >> topStackLevel;\\n            }\\n\\n            stackLength++;\\n\\n            // while there are joins, hash top of stack together\\n            while (numOfJoins & 1 == 0) {\\n                bytes32 h2 = stack[stackLength - 1];\\n                bytes32 h1 = stack[stackLength - 2];\\n\\n                stack[stackLength - 2] = keccak256(abi.encodePacked(h1, h2));\\n                stackLength = stackLength - 1; // remove hashes from stack\\n\\n                numOfJoins = numOfJoins >> 1;\\n            }\\n        }\\n        require(stackLength == 1, \\\"stack error\\\");\\n\\n        return stack[0];\\n    }\\n\\n    /// @notice Get the hash of a word in an array of bytes\\n    /// @param _data array of bytes\\n    /// @param _wordIndex index of word inside the bytes to get the hash of\\n    /// @dev if word is incomplete (< 8 bytes) it gets padded with zeroes\\n    function getHashOfWordAtIndex(bytes calldata _data, uint256 _wordIndex) public pure returns (bytes32) {\\n        uint256 start = _wordIndex << L_WORD_SIZE;\\n        uint256 end = start + (1 << L_WORD_SIZE);\\n\\n        // TODO: in .lua this just returns zero, but this might be more consistent\\n        require(start <= _data.length, \\\"word out of bounds\\\");\\n\\n        if (end <= _data.length) {\\n            return keccak256(abi.encodePacked(_data[start:end]));\\n        }\\n\\n        // word is incomplete\\n        // fill paddedSlice with incomplete words - the rest is going to be bytes(0)\\n        bytes memory paddedSlice = new bytes(8);\\n        uint256 remaining = _data.length - start;\\n\\n        for (uint256 i; i < remaining; i++) {\\n            paddedSlice[i] = _data[start + i];\\n        }\\n\\n        return keccak256(paddedSlice);\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require((hashes.length).isPowerOf2(), \\\"array len not power of 2\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        } else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73d86cb2dfa2ca887987c6da8d193d523c6a65ea89e296d1f47f190ebda7fa9b\",\"license\":\"Apache-2.0\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57d28e5791b4b44650a00f5ef6c725af53698ec33faeeaa3591f0dbd939559a\"},\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/marketplace/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Marketplace interface\\npragma solidity ^0.8.13;\\n\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IReaderNodeProvider, IValidatorNodeProvider} from \\\"../provider/INodeProvider.sol\\\";\\n\\n/// @notice Interface for creating new ERC20 based node provider\\ninterface IMarketplace {\\n    /// @notice A new provider was created\\n    /// @param provider The address of the provider\\n    /// @param consensus The consensus associated with the provider\\n    /// @param token The token used for billing\\n    /// @param payee The address that will receive the payments\\n    /// @param price The price per second of application node execution\\n    event ValidatorNodeProviderCreated(\\n        IValidatorNodeProvider provider,\\n        IConsensus consensus,\\n        IERC20 token,\\n        address payee,\\n        uint256 price\\n    );\\n\\n    /// @notice A new provider was created\\n    /// @param provider The address of the provider\\n    /// @param token The token used for billing\\n    /// @param payee The address that will receive the payments\\n    /// @param price The price per second of application node execution\\n    event ReaderNodeProviderCreated(\\n        IReaderNodeProvider provider,\\n        IERC20 token,\\n        address payee,\\n        uint256 price\\n    );\\n\\n    /// @notice Create a new ERC20 based ValidatorNodeProvider using the specified token\\n    /// @param consensus The consensus associated with the provider\\n    /// @param token The token used for billing\\n    /// @param payee The address that will receive the payments\\n    /// @param price The price per second of application node execution\\n    function newValidatorNodeProvider(\\n        IConsensus consensus,\\n        IERC20 token,\\n        address payee,\\n        uint256 price\\n    ) external returns (IValidatorNodeProvider);\\n\\n    /// @notice Create a new ERC20 based ReaderNodeProvider using the specified token\\n    /// @param token The token used for billing\\n    /// @param payee The address that will receive the payments\\n    /// @param price The price per second of application node execution\\n    function newReaderNodeProvider(\\n        IERC20 token,\\n        address payee,\\n        uint256 price\\n    ) external returns (IReaderNodeProvider);\\n}\\n\",\"keccak256\":\"0xcb8cd5cc076396c543796bf8015c2d3ce1c0eb95f904731335269005443f2aeb\",\"license\":\"Apache-2.0\"},\"contracts/marketplace/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Marketplace\\npragma solidity ^0.8.13;\\n\\nimport {ICartesiDAppFactory} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDAppFactory.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\nimport {ENS} from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IMarketplace} from \\\"./IMarketplace.sol\\\";\\nimport {IReaderNodeProvider, IValidatorNodeProvider} from \\\"../provider/INodeProvider.sol\\\";\\nimport {IVault} from \\\"../payment/IVault.sol\\\";\\nimport {ReaderNodeProvider, ValidatorNodeProvider} from \\\"../provider/NodeProvider.sol\\\";\\nimport {Vault} from \\\"../payment/Vault.sol\\\";\\n\\n/// @notice Factory for creating new ERC20 based providers\\ncontract Marketplace is IMarketplace {\\n    ENS public immutable ens;\\n    ICartesiDAppFactory public immutable factory;\\n\\n    constructor(ENS _ens, ICartesiDAppFactory _factory) {\\n        ens = _ens;\\n        factory = _factory;\\n    }\\n\\n    /// @notice Create a new ERC20 based ValidatorNodeProvider using the specified token\\n    function newValidatorNodeProvider(\\n        IConsensus _consensus,\\n        IERC20 _token,\\n        address _payee,\\n        uint256 _price\\n    ) external returns (IValidatorNodeProvider) {\\n        address owner = msg.sender;\\n\\n        // create factory using that token\\n        ValidatorNodeProvider provider = new ValidatorNodeProvider(\\n            owner,\\n            ens,\\n            _token,\\n            _payee,\\n            _price,\\n            factory,\\n            _consensus\\n        );\\n\\n        // emit event\\n        emit ValidatorNodeProviderCreated(\\n            provider,\\n            _consensus,\\n            _token,\\n            _payee,\\n            _price\\n        );\\n\\n        return provider;\\n    }\\n\\n    /// @notice Create a new ERC20 based ReaderNodeProvider using the specified token\\n    function newReaderNodeProvider(\\n        IERC20 _token,\\n        address _payee,\\n        uint256 _price\\n    ) external returns (IReaderNodeProvider) {\\n        address owner = msg.sender;\\n\\n        // create provider using that token\\n        IReaderNodeProvider provider = new ReaderNodeProvider(\\n            owner,\\n            ens,\\n            _token,\\n            _payee,\\n            _price\\n        );\\n\\n        // emit event\\n        emit ReaderNodeProviderCreated(provider, _token, _payee, _price);\\n\\n        return provider;\\n    }\\n}\\n\",\"keccak256\":\"0xf3d8c5a6eb3befafedaed2d0ef7349521d9221bef210d4be2b499e229cb515ff\",\"license\":\"Apache-2.0\"},\"contracts/payment/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Vault interface\\npragma solidity ^0.8.13;\\n\\nimport {ICartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Vault interface that adds a payment specification for the execution of application nodes\\n/// @dev The implementation should specify a token as payment method, and calculate the price for a\\n/// specified amount of execution time of the application node.\\ninterface IVault {\\n    // Permissionless functions\\n\\n    /// @notice Returns the cost of running an application for a given time\\n    /// @param _time The time in seconds\\n    /// @return The cost in amount of ERC-20 tokens\\n    function cost(uint256 _time) external view returns (uint256);\\n\\n    /// @notice The token used by the vault\\n    function token() external view returns (IERC20);\\n\\n    /// @notice The address which will receive payments for the application node execution\\n    function payee() external view returns (address);\\n\\n    /// @notice Returns the runway of a given application\\n    /// @dev Runway is the amount of time (in seconds) an application node has funds to run\\n    /// @param _application The application address\\n    function runway(ICartesiDApp _application) external view returns (uint256);\\n\\n    /// @notice Extend the runway of a given application by an amount of time\\n    /// @dev The user must approve the token transfer from the caller to the payee beforehand.\\n    /// @param _application The application\\n    /// @param _time The amount of time to extend the runway (will trigger transfer)\\n    function extendRunway(\\n        ICartesiDApp _application,\\n        uint256 _time\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x950269e625ca082abb083cf64cbcb9a922bf76f57abbd91a549d442450e6e390\",\"license\":\"Apache-2.0\"},\"contracts/payment/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Vault\\npragma solidity ^0.8.13;\\n\\nimport {ICartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {IFinancialProtocol} from \\\"../protocol/IFinancialProtocol.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/// @notice This contract implements an IVault, using an ERC-20 token and a fixed price per unit of time.\\ncontract Vault is IVault, IFinancialProtocol, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    uint256 public immutable price;\\n    IERC20 public immutable token;\\n    address public immutable payee;\\n\\n    mapping(ICartesiDApp => uint256) public runway;\\n\\n    /// @notice Construct a new Vault with the given token as payment method and price\\n    /// @param _owner The owner of the vault, who can pause its operation\\n    /// @param _token The token to use as payment method\\n    /// @param _payee The receiver of the payments to applications managed by this vault\\n    /// @param _price The price per second of execution of the application node\\n    constructor(address _owner, IERC20 _token, address _payee, uint256 _price) {\\n        token = _token;\\n        payee = _payee;\\n        price = _price;\\n\\n        // transfer ownership to the given owner\\n        _transferOwnership(_owner);\\n    }\\n\\n    function cost(uint256 _time) public view returns (uint256) {\\n        return _time * price;\\n    }\\n\\n    function extendRunway(\\n        ICartesiDApp _application,\\n        uint256 _time\\n    ) external override whenNotPaused returns (uint256) {\\n        return _extendRunway(msg.sender, _application, _time);\\n    }\\n\\n    function _extendRunway(\\n        address _msgSender,\\n        ICartesiDApp _application,\\n        uint256 _time\\n    ) internal returns (uint256) {\\n        // calculate the token cost of the runway time\\n        uint256 _cost = cost(_time);\\n\\n        // transfer tokens from sender to payee\\n        token.safeTransferFrom(_msgSender, payee, _cost);\\n\\n        uint256 currentRunway = runway[_application];\\n\\n        // if runway was in the past, reset to now\\n        if (currentRunway < block.timestamp) {\\n            currentRunway = block.timestamp;\\n        }\\n\\n        // update application runway\\n        uint256 newRunway = currentRunway + _time;\\n        runway[_application] = newRunway;\\n\\n        // emit event so offchain gets notified\\n        emit FinancialRunway(address(_application), newRunway);\\n\\n        return newRunway;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xbbbe120561c31d67e142ccd6f86f6f1c97ad32f12d8923d6afe6d7a01451597c\",\"license\":\"Apache-2.0\"},\"contracts/protocol/IFinancialProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Financial Protocol\\npragma solidity ^0.8.13;\\n\\n/// @notice Interface that should be implemented by any contract which dictates the financial incentives\\n/// of the execution of validator nodes for Cartesi applications.\\ninterface IFinancialProtocol {\\n    // Events\\n\\n    /// @notice Signals until when a application has enough funds to be validated\\n    /// @dev This event signals until when the validator node for the application should be running.\\n    /// The offchain implementation which controls the execution of validator nodes is free\\n    /// to choose which implementation contracts they will rely on for this information.\\n    /// @param application The application address\\n    /// @param until The point in time when the application will run out of funds (seconds since epoch)\\n    event FinancialRunway(address indexed application, uint256 until);\\n}\\n\",\"keccak256\":\"0xb59a202e5267f354d0f8cde77943952393cc933385e5c319c8a7d484dc25b554\",\"license\":\"Apache-2.0\"},\"contracts/protocol/IMachineProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title Cartesi Machine Protocol\\npragma solidity ^0.8.13;\\n\\n/// @notice Interface that should be implemented by any contract which controls the association\\n/// of a deployed Cartesi application to its offchain Cartesi Machine snapshot.\\ninterface IMachineProtocol {\\n    // Events\\n\\n    /// @notice Signals the association of a application to its offchain Cartesi Machine\\n    /// @dev This event signals the association of an on-chain deployed Cartesi application to the offchain location of the\\n    /// snapshot of the Cartesi machine corresponding to the template hash stored on-chain. The format or protocol of\\n    /// the location field is not enforced on-chain and can follow any format, like a URL or an IPFS CID.\\n    /// @param application The application address\\n    /// @param location The storage location of the Cartesi machine snapshot\\n    event MachineLocation(address indexed application, string location);\\n}\\n\",\"keccak256\":\"0x283a3eab894679114807ca5921bc1f768245fce3f2f8ac14a43f19ac7d645a78\",\"license\":\"Apache-2.0\"},\"contracts/provider/INodeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title NodeProvider interfaces\\npragma solidity ^0.8.13;\\n\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {ICartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\n\\nimport {IVault} from \\\"../payment/IVault.sol\\\";\\n\\ninterface INodeProvider is IVault {\\n    /// @notice Register an application with the node provider\\n    /// @param application The application to be registered\\n    /// @param location The Cartesi machine snapshot location\\n    function register(\\n        ICartesiDApp application,\\n        string calldata location\\n    ) external;\\n\\n    /// @notice Sets a name for the provider using ENS service\\n    /// @param _name The name of the provider\\n    function setName(string calldata _name) external;\\n}\\n\\ninterface IReaderNodeProvider is INodeProvider {}\\n\\ninterface IValidatorNodeProvider is IReaderNodeProvider {\\n    /// @notice The consensus wired to the provider\\n    function consensus() external view returns (IConsensus);\\n\\n    /// @notice Deploy a new application deterministically\\n    /// @param _owner The address that will own the application\\n    /// @param _templateHash The hash of the initial state of the Cartesi Machine\\n    /// @param _location The Cartesi machine snapshot location\\n    /// @param _initialRunway The initial runway of the application in seconds\\n    /// @param _salt The salt used to deterministically generate the application address\\n    /// @return The application\\n    function deploy(\\n        address _owner,\\n        bytes32 _templateHash,\\n        string calldata _location,\\n        uint256 _initialRunway,\\n        bytes32 _salt\\n    ) external returns (CartesiDApp);\\n\\n    /// @notice Calculate the address of an application to be deployed deterministically.\\n    /// @param _owner The address that will own the application\\n    /// @param _templateHash The hash of the initial state of the Cartesi Machine\\n    /// @param _salt The salt used to deterministically generate the application address\\n    /// @return The application address\\n    /// @dev Beware that only the `deploy` function with the `salt` parameter\\n    ///      is able to deterministically deploy an application.\\n    function calculateApplicationAddress(\\n        address _owner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x005670a767eb78052e09acec38a73931234e6e5156bbd913de974340933ebb32\",\"license\":\"Apache-2.0\"},\"contracts/provider/NodeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n/// @title NodeProvider\\npragma solidity ^0.8.13;\\n\\nimport {CartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/CartesiDApp.sol\\\";\\nimport {ICartesiDApp} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDApp.sol\\\";\\nimport {ICartesiDAppFactory} from \\\"@cartesi/rollups/contracts/dapp/ICartesiDAppFactory.sol\\\";\\nimport {IConsensus} from \\\"@cartesi/rollups/contracts/consensus/IConsensus.sol\\\";\\nimport {ENS} from \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport {ADDR_REVERSE_NODE} from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseRegistrar.sol\\\";\\nimport {IReverseRegistrar} from \\\"@ensdomains/ens-contracts/contracts/reverseRegistrar/IReverseRegistrar.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IMachineProtocol} from \\\"../protocol/IMachineProtocol.sol\\\";\\nimport {INodeProvider} from \\\"./INodeProvider.sol\\\";\\nimport {IReaderNodeProvider} from \\\"./INodeProvider.sol\\\";\\nimport {IValidatorNodeProvider} from \\\"./INodeProvider.sol\\\";\\nimport {Vault} from \\\"../payment/Vault.sol\\\";\\n\\nabstract contract NodeProvider is INodeProvider, Vault {\\n    ENS public immutable ens;\\n\\n    constructor(\\n        address _owner,\\n        ENS _ens,\\n        IERC20 _token,\\n        address _payee,\\n        uint256 _price\\n    ) Vault(_owner, _token, _payee, _price) {\\n        ens = _ens;\\n    }\\n\\n    function setName(string calldata name) external override onlyOwner {\\n        IReverseRegistrar ensReverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n\\n        // call the ENS reverse registrar to register name of address\\n        ensReverseRegistrar.setName(name);\\n    }\\n}\\n\\ncontract ReaderNodeProvider is\\n    NodeProvider,\\n    IReaderNodeProvider,\\n    IMachineProtocol\\n{\\n    constructor(\\n        address _owner,\\n        ENS _ens,\\n        IERC20 _token,\\n        address _payee,\\n        uint256 _price\\n    ) NodeProvider(_owner, _ens, _token, _payee, _price) {}\\n\\n    function register(\\n        ICartesiDApp application,\\n        string calldata location\\n    ) external {\\n        emit MachineLocation(address(application), location);\\n    }\\n}\\n\\ncontract ValidatorNodeProvider is\\n    NodeProvider,\\n    IMachineProtocol,\\n    IValidatorNodeProvider\\n{\\n    ICartesiDAppFactory public immutable factory;\\n    IConsensus public immutable consensus;\\n\\n    constructor(\\n        address _owner,\\n        ENS _ens,\\n        IERC20 _token,\\n        address _payee,\\n        uint256 _price,\\n        ICartesiDAppFactory _factory,\\n        IConsensus _consensus\\n    ) NodeProvider(_owner, _ens, _token, _payee, _price) {\\n        factory = _factory;\\n        consensus = _consensus;\\n    }\\n\\n    function register(\\n        ICartesiDApp application,\\n        string calldata location\\n    ) external {\\n        require(\\n            application.getConsensus() == consensus,\\n            \\\"ValidatorNodeProvider: wrong consensus\\\"\\n        );\\n        emit MachineLocation(address(application), location);\\n    }\\n\\n    /// @dev This function deploys a new application deterministically, and registers it with the payment system\\n    function deploy(\\n        address _owner,\\n        bytes32 _templateHash,\\n        string calldata _location,\\n        uint256 _initialRunway,\\n        bytes32 _salt\\n    ) external override whenNotPaused returns (CartesiDApp) {\\n        // delegate call to factory\\n        CartesiDApp application = factory.newApplication(\\n            consensus,\\n            _owner,\\n            _templateHash,\\n            _salt\\n        );\\n\\n        // emit event with machine location\\n        emit MachineLocation(address(application), _location);\\n\\n        // set initial runway\\n        _extendRunway(msg.sender, application, _initialRunway);\\n\\n        return application;\\n    }\\n\\n    /// @dev This function calculates the application deterministically\\n    function calculateApplicationAddress(\\n        address _owner,\\n        bytes32 _templateHash,\\n        bytes32 _salt\\n    ) external view returns (address) {\\n        return\\n            factory.calculateApplicationAddress(\\n                consensus,\\n                _owner,\\n                _templateHash,\\n                _salt\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf58a2879a39a5462d5e46bd7501af106b40642e10be3a1aa86330531052e144f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405162004c9b38038062004c9b83398181016040528101906100349190610156565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050610196565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d3826100a8565b9050919050565b60006100e5826100c8565b9050919050565b6100f5816100da565b811461010057600080fd5b50565b600081519050610112816100ec565b92915050565b6000610123826100c8565b9050919050565b61013381610118565b811461013e57600080fd5b50565b6000815190506101508161012a565b92915050565b6000806040838503121561016d5761016c6100a3565b5b600061017b85828601610103565b925050602061018c85828601610141565b9150509250929050565b60805160a051614aca620001d16000396000818161015a01526102c00152600081816101090152818161013601526102130152614aca6000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80633f15457f146200005757806355ad014c14620000795780636fd0271c14620000af578063c45a015514620000e5575b600080fd5b6200006162000107565b60405162000070919062000389565b60405180910390f35b620000976004803603810190620000919190620004b5565b6200012b565b604051620000a691906200054c565b60405180910390f35b620000cd6004803603810190620000c7919062000569565b62000208565b604051620000dc9190620005ea565b60405180910390f35b620000ef620002be565b604051620000fe91906200062c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000803390506000817f00000000000000000000000000000000000000000000000000000000000000008787877f00000000000000000000000000000000000000000000000000000000000000008c6040516200018890620002e2565b6200019a9796959493929190620006b5565b604051809103906000f080158015620001b7573d6000803e3d6000fd5b5090507f0e2b88107197b560f03a59714a3b7fcced2035fc2f645c44f71491f96c0035418188888888604051620001f395949392919062000757565b60405180910390a18092505050949350505050565b6000803390506000817f00000000000000000000000000000000000000000000000000000000000000008787876040516200024390620002f0565b62000253959493929190620007b4565b604051809103906000f08015801562000270573d6000803e3d6000fd5b5090507fd62c70f9eea181e29756725d47a538b551cfa71ad040a8163a2bf629b17e146281878787604051620002aa949392919062000811565b60405180910390a180925050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b612594806200085f83390190565b611ca28062002df383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000349620003436200033d84620002fe565b6200031e565b620002fe565b9050919050565b60006200035d8262000328565b9050919050565b6000620003718262000350565b9050919050565b620003838162000364565b82525050565b6000602082019050620003a0600083018462000378565b92915050565b600080fd5b6000620003b882620002fe565b9050919050565b6000620003cc82620003ab565b9050919050565b620003de81620003bf565b8114620003ea57600080fd5b50565b600081359050620003fe81620003d3565b92915050565b60006200041182620003ab565b9050919050565b620004238162000404565b81146200042f57600080fd5b50565b600081359050620004438162000418565b92915050565b6200045481620003ab565b81146200046057600080fd5b50565b600081359050620004748162000449565b92915050565b6000819050919050565b6200048f816200047a565b81146200049b57600080fd5b50565b600081359050620004af8162000484565b92915050565b60008060008060808587031215620004d257620004d1620003a6565b5b6000620004e287828801620003ed565b9450506020620004f58782880162000432565b9350506040620005088782880162000463565b92505060606200051b878288016200049e565b91505092959194509250565b6000620005348262000350565b9050919050565b620005468162000527565b82525050565b60006020820190506200056360008301846200053b565b92915050565b600080600060608486031215620005855762000584620003a6565b5b6000620005958682870162000432565b9350506020620005a88682870162000463565b9250506040620005bb868287016200049e565b9150509250925092565b6000620005d28262000350565b9050919050565b620005e481620005c5565b82525050565b6000602082019050620006016000830184620005d9565b92915050565b6000620006148262000350565b9050919050565b620006268162000607565b82525050565b60006020820190506200064360008301846200061b565b92915050565b6200065481620003ab565b82525050565b6000620006678262000350565b9050919050565b62000679816200065a565b82525050565b6200068a816200047a565b82525050565b60006200069d8262000350565b9050919050565b620006af8162000690565b82525050565b600060e082019050620006cc600083018a62000649565b620006db602083018962000378565b620006ea60408301886200066e565b620006f9606083018762000649565b6200070860808301866200067f565b6200071760a08301856200061b565b6200072660c0830184620006a4565b98975050505050505050565b60006200073f8262000350565b9050919050565b620007518162000732565b82525050565b600060a0820190506200076e600083018862000746565b6200077d6020830187620006a4565b6200078c60408301866200066e565b6200079b606083018562000649565b620007aa60808301846200067f565b9695505050505050565b600060a082019050620007cb600083018862000649565b620007da602083018762000378565b620007e960408301866200066e565b620007f8606083018562000649565b6200080760808301846200067f565b9695505050505050565b6000608082019050620008286000830187620005d9565b6200083760208301866200066e565b62000846604083018562000649565b6200085560608301846200067f565b9594505050505056fe6101406040523480156200001257600080fd5b506040516200259438038062002594833981810160405281019062000038919062000435565b8686868686848383836200006162000055620001b060201b60201c565b620001b860201b60201c565b60008060146101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508060808181525050620000fc84620001b860201b60201c565b505050508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505050505050508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff168152505050505050505050620004e8565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ae8262000281565b9050919050565b620002c081620002a1565b8114620002cc57600080fd5b50565b600081519050620002e081620002b5565b92915050565b6000620002f382620002a1565b9050919050565b6200030581620002e6565b81146200031157600080fd5b50565b6000815190506200032581620002fa565b92915050565b60006200033882620002a1565b9050919050565b6200034a816200032b565b81146200035657600080fd5b50565b6000815190506200036a816200033f565b92915050565b6000819050919050565b620003858162000370565b81146200039157600080fd5b50565b600081519050620003a5816200037a565b92915050565b6000620003b882620002a1565b9050919050565b620003ca81620003ab565b8114620003d657600080fd5b50565b600081519050620003ea81620003bf565b92915050565b6000620003fd82620002a1565b9050919050565b6200040f81620003f0565b81146200041b57600080fd5b50565b6000815190506200042f8162000404565b92915050565b600080600080600080600060e0888a0312156200045757620004566200027c565b5b6000620004678a828b01620002cf565b97505060206200047a8a828b0162000314565b96505060406200048d8a828b0162000359565b9550506060620004a08a828b01620002cf565b9450506080620004b38a828b0162000394565b93505060a0620004c68a828b01620003d9565b92505060c0620004d98a828b016200041e565b91505092959891949750929550565b60805160a05160c05160e051610100516101205161201d620005776000396000818161037a015281816105860152818161064e01526106ba01526000818161054a0152818161067e01526108410152600081816104cb015261086f01526000818161081d0152610c59015260008181610a350152610c7b0152600081816107ae01526107f9015261201d6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638ef3f761116100ad578063ae90b21311610071578063ae90b213146102e6578063c45a015514610304578063c47f002714610322578063f2fde38b1461033e578063fc0c546a1461035a57610121565b80638ef3f7611461021a5780638ff7fc68146102385780639097548d1461026857806394a3362514610298578063a035b1fe146102c857610121565b8063715018a6116100f4578063715018a614610188578063783d53ca14610192578063803f7e6d146101c25780638456cb59146101f25780638da5cb5b146101fc57610121565b806332434a2e146101265780633f15457f146101425780633f4ba83a146101605780635c975abb1461016a575b600080fd5b610140600480360381019061013b9190611270565b610378565b005b61014a6104c9565b604051610157919061132f565b60405180910390f35b6101686104ed565b005b6101726104ff565b60405161017f9190611365565b60405180910390f35b610190610515565b005b6101ac60048036038101906101a791906113b6565b610529565b6040516101b99190611405565b60405180910390f35b6101dc60048036038101906101d79190611482565b610546565b6040516101e991906114e4565b60405180910390f35b6101fa610611565b005b610204610623565b60405161021191906114e4565b60405180910390f35b61022261064c565b60405161022f9190611520565b60405180910390f35b610252600480360381019061024d919061153b565b610670565b60405161025f9190611608565b60405180910390f35b610282600480360381019061027d9190611623565b6107aa565b60405161028f9190611405565b60405180910390f35b6102b260048036038101906102ad9190611650565b6107df565b6040516102bf9190611405565b60405180910390f35b6102d06107f7565b6040516102dd9190611405565b60405180910390f35b6102ee61081b565b6040516102fb91906114e4565b60405180910390f35b61030c61083f565b604051610319919061169e565b60405180910390f35b61033c600480360381019061033791906116b9565b610863565b005b61035860048036038101906103539190611706565b6109b0565b005b610362610a33565b60405161036f9190611754565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663179e740b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e91906117ad565b73ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b9061185d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f22f244e839c97faca31341c9c2bb7a09f94a81fb309a36a85c8465bafeb69ffc83836040516104bc9291906118ca565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104f5610a57565b6104fd610ad5565b565b60008060149054906101000a900460ff16905090565b61051d610a57565b6105276000610b37565b565b6000610533610bfb565b61053e338484610c45565b905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd4f12197f00000000000000000000000000000000000000000000000000000000000000008686866040518563ffffffff1660e01b81526004016105c794939291906118fd565b602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190611957565b90509392505050565b610619610a57565b610621610dbf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061067a610bfb565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630e1a07f57f00000000000000000000000000000000000000000000000000000000000000008a8a876040518563ffffffff1660e01b81526004016106fb94939291906118fd565b6020604051808303816000875af115801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e91906119d4565b90508073ffffffffffffffffffffffffffffffffffffffff167f22f244e839c97faca31341c9c2bb7a09f94a81fb309a36a85c8465bafeb69ffc87876040516107889291906118ca565b60405180910390a261079b338286610c45565b50809150509695505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826107d89190611a30565b9050919050565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61086b610a57565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b81526004016108e99190611a72565b602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190611957565b90508073ffffffffffffffffffffffffffffffffffffffff1663c47f002784846040518363ffffffff1660e01b81526004016109679291906118ca565b6020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190611aa2565b50505050565b6109b8610a57565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90611b41565b60405180910390fd5b610a3081610b37565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a5f610e22565b73ffffffffffffffffffffffffffffffffffffffff16610a7d610623565b73ffffffffffffffffffffffffffffffffffffffff1614610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90611bad565b60405180910390fd5b565b610add610e2a565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610b20610e22565b604051610b2d91906114e4565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610c036104ff565b15610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90611c19565b60405180910390fd5b565b600080610c51836107aa565b9050610cc0857f0000000000000000000000000000000000000000000000000000000000000000837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e73909392919063ffffffff16565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905042811015610d10574290505b60008482610d1e9190611c39565b905080600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167f206c488a3e590d91a82467a0072d112dfe901a99ae561b30c89ff2509fadde3582604051610daa9190611405565b60405180910390a28093505050509392505050565b610dc7610bfb565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e0b610e22565b604051610e1891906114e4565b60405180910390a1565b600033905090565b610e326104ff565b610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890611cb9565b60405180910390fd5b565b610ef6846323b872dd60e01b858585604051602401610e9493929190611cd9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efc565b50505050565b6000610f5e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fc49092919063ffffffff16565b9050600081511480610f80575080806020019051810190610f7f9190611d3c565b5b610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690611ddb565b60405180910390fd5b505050565b6060610fd38484600085610fdc565b90509392505050565b606082471015611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890611e6d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104a9190611efe565b60006040518083038185875af1925050503d8060008114611087576040519150601f19603f3d011682016040523d82523d6000602084013e61108c565b606091505b509150915061109d878383876110a9565b92505050949350505050565b6060831561110b576000835103611103576110c38561111e565b611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f990611f61565b60405180910390fd5b5b829050611116565b6111158383611141565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156111545781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111889190611fc5565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111c68261119b565b9050919050565b60006111d8826111bb565b9050919050565b6111e8816111cd565b81146111f357600080fd5b50565b600081359050611205816111df565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126112305761122f61120b565b5b8235905067ffffffffffffffff81111561124d5761124c611210565b5b60208301915083600182028301111561126957611268611215565b5b9250929050565b60008060006040848603121561128957611288611191565b5b6000611297868287016111f6565b935050602084013567ffffffffffffffff8111156112b8576112b7611196565b5b6112c48682870161121a565b92509250509250925092565b6000819050919050565b60006112f56112f06112eb8461119b565b6112d0565b61119b565b9050919050565b6000611307826112da565b9050919050565b6000611319826112fc565b9050919050565b6113298161130e565b82525050565b60006020820190506113446000830184611320565b92915050565b60008115159050919050565b61135f8161134a565b82525050565b600060208201905061137a6000830184611356565b92915050565b6000819050919050565b61139381611380565b811461139e57600080fd5b50565b6000813590506113b08161138a565b92915050565b600080604083850312156113cd576113cc611191565b5b60006113db858286016111f6565b92505060206113ec858286016113a1565b9150509250929050565b6113ff81611380565b82525050565b600060208201905061141a60008301846113f6565b92915050565b611429816111bb565b811461143457600080fd5b50565b60008135905061144681611420565b92915050565b6000819050919050565b61145f8161144c565b811461146a57600080fd5b50565b60008135905061147c81611456565b92915050565b60008060006060848603121561149b5761149a611191565b5b60006114a986828701611437565b93505060206114ba8682870161146d565b92505060406114cb8682870161146d565b9150509250925092565b6114de816111bb565b82525050565b60006020820190506114f960008301846114d5565b92915050565b600061150a826112fc565b9050919050565b61151a816114ff565b82525050565b60006020820190506115356000830184611511565b92915050565b60008060008060008060a0878903121561155857611557611191565b5b600061156689828a01611437565b965050602061157789828a0161146d565b955050604087013567ffffffffffffffff81111561159857611597611196565b5b6115a489828a0161121a565b945094505060606115b789828a016113a1565b92505060806115c889828a0161146d565b9150509295509295509295565b60006115e0826112da565b9050919050565b60006115f2826115d5565b9050919050565b611602816115e7565b82525050565b600060208201905061161d60008301846115f9565b92915050565b60006020828403121561163957611638611191565b5b6000611647848285016113a1565b91505092915050565b60006020828403121561166657611665611191565b5b6000611674848285016111f6565b91505092915050565b6000611688826112fc565b9050919050565b6116988161167d565b82525050565b60006020820190506116b3600083018461168f565b92915050565b600080602083850312156116d0576116cf611191565b5b600083013567ffffffffffffffff8111156116ee576116ed611196565b5b6116fa8582860161121a565b92509250509250929050565b60006020828403121561171c5761171b611191565b5b600061172a84828501611437565b91505092915050565b600061173e826112fc565b9050919050565b61174e81611733565b82525050565b60006020820190506117696000830184611745565b92915050565b600061177a826111bb565b9050919050565b61178a8161176f565b811461179557600080fd5b50565b6000815190506117a781611781565b92915050565b6000602082840312156117c3576117c2611191565b5b60006117d184828501611798565b91505092915050565b600082825260208201905092915050565b7f56616c696461746f724e6f646550726f76696465723a2077726f6e6720636f6e60008201527f73656e7375730000000000000000000000000000000000000000000000000000602082015250565b60006118476026836117da565b9150611852826117eb565b604082019050919050565b600060208201905081810360008301526118768161183a565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006118a983856117da565b93506118b683858461187d565b6118bf8361188c565b840190509392505050565b600060208201905081810360008301526118e581848661189d565b90509392505050565b6118f78161144c565b82525050565b60006080820190506119126000830187611511565b61191f60208301866114d5565b61192c60408301856118ee565b61193960608301846118ee565b95945050505050565b60008151905061195181611420565b92915050565b60006020828403121561196d5761196c611191565b5b600061197b84828501611942565b91505092915050565b600061198f8261119b565b9050919050565b60006119a182611984565b9050919050565b6119b181611996565b81146119bc57600080fd5b50565b6000815190506119ce816119a8565b92915050565b6000602082840312156119ea576119e9611191565b5b60006119f8848285016119bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a3b82611380565b9150611a4683611380565b9250828202611a5481611380565b91508282048414831517611a6b57611a6a611a01565b5b5092915050565b6000602082019050611a8760008301846118ee565b92915050565b600081519050611a9c81611456565b92915050565b600060208284031215611ab857611ab7611191565b5b6000611ac684828501611a8d565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b2b6026836117da565b9150611b3682611acf565b604082019050919050565b60006020820190508181036000830152611b5a81611b1e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b976020836117da565b9150611ba282611b61565b602082019050919050565b60006020820190508181036000830152611bc681611b8a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611c036010836117da565b9150611c0e82611bcd565b602082019050919050565b60006020820190508181036000830152611c3281611bf6565b9050919050565b6000611c4482611380565b9150611c4f83611380565b9250828201905080821115611c6757611c66611a01565b5b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000611ca36014836117da565b9150611cae82611c6d565b602082019050919050565b60006020820190508181036000830152611cd281611c96565b9050919050565b6000606082019050611cee60008301866114d5565b611cfb60208301856114d5565b611d0860408301846113f6565b949350505050565b611d198161134a565b8114611d2457600080fd5b50565b600081519050611d3681611d10565b92915050565b600060208284031215611d5257611d51611191565b5b6000611d6084828501611d27565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611dc5602a836117da565b9150611dd082611d69565b604082019050919050565b60006020820190508181036000830152611df481611db8565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611e576026836117da565b9150611e6282611dfb565b604082019050919050565b60006020820190508181036000830152611e8681611e4a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611ec1578082015181840152602081019050611ea6565b60008484015250505050565b6000611ed882611e8d565b611ee28185611e98565b9350611ef2818560208601611ea3565b80840191505092915050565b6000611f0a8284611ecd565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611f4b601d836117da565b9150611f5682611f15565b602082019050919050565b60006020820190508181036000830152611f7a81611f3e565b9050919050565b600081519050919050565b6000611f9782611f81565b611fa181856117da565b9350611fb1818560208601611ea3565b611fba8161188c565b840191505092915050565b60006020820190508181036000830152611fdf8184611f8c565b90509291505056fea26469706673582212200971a65d40ba95cf7f9f3a082835f5b365093e2096a0b74920074123829168e564736f6c634300081400336101006040523480156200001257600080fd5b5060405162001ca238038062001ca283398181016040528101906200003891906200033f565b84848484848483838362000061620000556200014460201b60201c565b6200014c60201b60201c565b60008060146101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508060808181525050620000fc846200014c60201b60201c565b505050508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505050505050505050505050620003c7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002428262000215565b9050919050565b620002548162000235565b81146200026057600080fd5b50565b600081519050620002748162000249565b92915050565b6000620002878262000235565b9050919050565b62000299816200027a565b8114620002a557600080fd5b50565b600081519050620002b9816200028e565b92915050565b6000620002cc8262000235565b9050919050565b620002de81620002bf565b8114620002ea57600080fd5b50565b600081519050620002fe81620002d3565b92915050565b6000819050919050565b620003198162000304565b81146200032557600080fd5b50565b60008151905062000339816200030e565b92915050565b600080600080600060a086880312156200035e576200035d62000210565b5b60006200036e8882890162000263565b95505060206200038188828901620002a8565b94505060406200039488828901620002ed565b9350506060620003a78882890162000263565b9250506080620003ba8882890162000328565b9150509295509295909350565b60805160a05160c05160e0516118856200041d60003960008181610307015261045e0152600081816104300152610848015260008181610624015261086a0152600081816103c1015261040c01526118856000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063ae90b21311610066578063ae90b2131461023c578063c47f00271461025a578063f2fde38b14610276578063fc0c546a14610292576100f5565b80638da5cb5b146101a05780639097548d146101be57806394a33625146101ee578063a035b1fe1461021e576100f5565b80635c975abb116100d35780635c975abb1461013e578063715018a61461015c578063783d53ca146101665780638456cb5914610196576100f5565b806332434a2e146100fa5780633f15457f146101165780633f4ba83a14610134575b600080fd5b610114600480360381019061010f9190610e5f565b6102b0565b005b61011e610305565b60405161012b9190610f1e565b60405180910390f35b61013c610329565b005b61014661033b565b6040516101539190610f54565b60405180910390f35b610164610351565b005b610180600480360381019061017b9190610fa5565b610365565b60405161018d9190610ff4565b60405180910390f35b61019e610382565b005b6101a8610394565b6040516101b5919061101e565b60405180910390f35b6101d860048036038101906101d39190611039565b6103bd565b6040516101e59190610ff4565b60405180910390f35b61020860048036038101906102039190611066565b6103f2565b6040516102159190610ff4565b60405180910390f35b61022661040a565b6040516102339190610ff4565b60405180910390f35b61024461042e565b604051610251919061101e565b60405180910390f35b610274600480360381019061026f9190611093565b610452565b005b610290600480360381019061028b919061110c565b61059f565b005b61029a610622565b6040516102a7919061115a565b60405180910390f35b8273ffffffffffffffffffffffffffffffffffffffff167f22f244e839c97faca31341c9c2bb7a09f94a81fb309a36a85c8465bafeb69ffc83836040516102f89291906111d3565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610331610646565b6103396106c4565b565b60008060149054906101000a900460ff16905090565b610359610646565b6103636000610726565b565b600061036f6107ea565b61037a338484610834565b905092915050565b61038a610646565b6103926109ae565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000826103eb9190611226565b9050919050565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61045a610646565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b81526004016104d89190611281565b602060405180830381865afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051991906112b1565b90508073ffffffffffffffffffffffffffffffffffffffff1663c47f002784846040518363ffffffff1660e01b81526004016105569291906111d3565b6020604051808303816000875af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610599919061130a565b50505050565b6105a7610646565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d906113a9565b60405180910390fd5b61061f81610726565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b61064e610a11565b73ffffffffffffffffffffffffffffffffffffffff1661066c610394565b73ffffffffffffffffffffffffffffffffffffffff16146106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b990611415565b60405180910390fd5b565b6106cc610a19565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61070f610a11565b60405161071c919061101e565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107f261033b565b15610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611481565b60405180910390fd5b565b600080610840836103bd565b90506108af857f0000000000000000000000000000000000000000000000000000000000000000837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a62909392919063ffffffff16565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050428110156108ff574290505b6000848261090d91906114a1565b905080600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167f206c488a3e590d91a82467a0072d112dfe901a99ae561b30c89ff2509fadde35826040516109999190610ff4565b60405180910390a28093505050509392505050565b6109b66107ea565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586109fa610a11565b604051610a07919061101e565b60405180910390a1565b600033905090565b610a2161033b565b610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790611521565b60405180910390fd5b565b610ae5846323b872dd60e01b858585604051602401610a8393929190611541565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610aeb565b50505050565b6000610b4d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bb39092919063ffffffff16565b9050600081511480610b6f575080806020019051810190610b6e91906115a4565b5b610bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba590611643565b60405180910390fd5b505050565b6060610bc28484600085610bcb565b90509392505050565b606082471015610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c07906116d5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c399190611766565b60006040518083038185875af1925050503d8060008114610c76576040519150601f19603f3d011682016040523d82523d6000602084013e610c7b565b606091505b5091509150610c8c87838387610c98565b92505050949350505050565b60608315610cfa576000835103610cf257610cb285610d0d565b610cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce8906117c9565b60405180910390fd5b5b829050610d05565b610d048383610d30565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610d435781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d77919061182d565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610db582610d8a565b9050919050565b6000610dc782610daa565b9050919050565b610dd781610dbc565b8114610de257600080fd5b50565b600081359050610df481610dce565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e1f57610e1e610dfa565b5b8235905067ffffffffffffffff811115610e3c57610e3b610dff565b5b602083019150836001820283011115610e5857610e57610e04565b5b9250929050565b600080600060408486031215610e7857610e77610d80565b5b6000610e8686828701610de5565b935050602084013567ffffffffffffffff811115610ea757610ea6610d85565b5b610eb386828701610e09565b92509250509250925092565b6000819050919050565b6000610ee4610edf610eda84610d8a565b610ebf565b610d8a565b9050919050565b6000610ef682610ec9565b9050919050565b6000610f0882610eeb565b9050919050565b610f1881610efd565b82525050565b6000602082019050610f336000830184610f0f565b92915050565b60008115159050919050565b610f4e81610f39565b82525050565b6000602082019050610f696000830184610f45565b92915050565b6000819050919050565b610f8281610f6f565b8114610f8d57600080fd5b50565b600081359050610f9f81610f79565b92915050565b60008060408385031215610fbc57610fbb610d80565b5b6000610fca85828601610de5565b9250506020610fdb85828601610f90565b9150509250929050565b610fee81610f6f565b82525050565b60006020820190506110096000830184610fe5565b92915050565b61101881610daa565b82525050565b6000602082019050611033600083018461100f565b92915050565b60006020828403121561104f5761104e610d80565b5b600061105d84828501610f90565b91505092915050565b60006020828403121561107c5761107b610d80565b5b600061108a84828501610de5565b91505092915050565b600080602083850312156110aa576110a9610d80565b5b600083013567ffffffffffffffff8111156110c8576110c7610d85565b5b6110d485828601610e09565b92509250509250929050565b6110e981610daa565b81146110f457600080fd5b50565b600081359050611106816110e0565b92915050565b60006020828403121561112257611121610d80565b5b6000611130848285016110f7565b91505092915050565b600061114482610eeb565b9050919050565b61115481611139565b82525050565b600060208201905061116f600083018461114b565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006111b28385611175565b93506111bf838584611186565b6111c883611195565b840190509392505050565b600060208201905081810360008301526111ee8184866111a6565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123182610f6f565b915061123c83610f6f565b925082820261124a81610f6f565b91508282048414831517611261576112606111f7565b5b5092915050565b6000819050919050565b61127b81611268565b82525050565b60006020820190506112966000830184611272565b92915050565b6000815190506112ab816110e0565b92915050565b6000602082840312156112c7576112c6610d80565b5b60006112d58482850161129c565b91505092915050565b6112e781611268565b81146112f257600080fd5b50565b600081519050611304816112de565b92915050565b6000602082840312156113205761131f610d80565b5b600061132e848285016112f5565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611393602683611175565b915061139e82611337565b604082019050919050565b600060208201905081810360008301526113c281611386565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006113ff602083611175565b915061140a826113c9565b602082019050919050565b6000602082019050818103600083015261142e816113f2565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061146b601083611175565b915061147682611435565b602082019050919050565b6000602082019050818103600083015261149a8161145e565b9050919050565b60006114ac82610f6f565b91506114b783610f6f565b92508282019050808211156114cf576114ce6111f7565b5b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061150b601483611175565b9150611516826114d5565b602082019050919050565b6000602082019050818103600083015261153a816114fe565b9050919050565b6000606082019050611556600083018661100f565b611563602083018561100f565b6115706040830184610fe5565b949350505050565b61158181610f39565b811461158c57600080fd5b50565b60008151905061159e81611578565b92915050565b6000602082840312156115ba576115b9610d80565b5b60006115c88482850161158f565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061162d602a83611175565b9150611638826115d1565b604082019050919050565b6000602082019050818103600083015261165c81611620565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006116bf602683611175565b91506116ca82611663565b604082019050919050565b600060208201905081810360008301526116ee816116b2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561172957808201518184015260208101905061170e565b60008484015250505050565b6000611740826116f5565b61174a8185611700565b935061175a81856020860161170b565b80840191505092915050565b60006117728284611735565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006117b3601d83611175565b91506117be8261177d565b602082019050919050565b600060208201905081810360008301526117e2816117a6565b9050919050565b600081519050919050565b60006117ff826117e9565b6118098185611175565b935061181981856020860161170b565b61182281611195565b840191505092915050565b6000602082019050818103600083015261184781846117f4565b90509291505056fea2646970667358221220732d4aa8821eb314fa6dbd8dab2c23199c0c71a9b100e03f61ad9e871cd2467c64736f6c63430008140033a2646970667358221220f7b10aa4ce3ae4b66cc0277476e80476c88fc8715d14071d1d813ca0db474b7e64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "ReaderNodeProviderCreated(address,address,address,uint256)": {
        "params": {
          "payee": "The address that will receive the payments",
          "price": "The price per second of application node execution",
          "provider": "The address of the provider",
          "token": "The token used for billing"
        }
      },
      "ValidatorNodeProviderCreated(address,address,address,address,uint256)": {
        "params": {
          "consensus": "The consensus associated with the provider",
          "payee": "The address that will receive the payments",
          "price": "The price per second of application node execution",
          "provider": "The address of the provider",
          "token": "The token used for billing"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "ReaderNodeProviderCreated(address,address,address,uint256)": {
        "notice": "A new provider was created"
      },
      "ValidatorNodeProviderCreated(address,address,address,address,uint256)": {
        "notice": "A new provider was created"
      }
    },
    "kind": "user",
    "methods": {
      "newReaderNodeProvider(address,address,uint256)": {
        "notice": "Create a new ERC20 based ReaderNodeProvider using the specified token"
      },
      "newValidatorNodeProvider(address,address,address,uint256)": {
        "notice": "Create a new ERC20 based ValidatorNodeProvider using the specified token"
      }
    },
    "notice": "Factory for creating new ERC20 based providers",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}