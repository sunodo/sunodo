version: "3.9"

services:
    anvil:
        image: sunodo/devnet:1.1.1
        command:
            [
                "anvil",
                "--block-time",
                "${BLOCK_TIME:-5}",
                "--load-state",
                "/usr/share/sunodo/anvil_state.json",
                "${ANVIL_VERBOSITY:---silent}",
            ]
        healthcheck:
            test: ["CMD", "eth_isready"]
            interval: 10s
            timeout: 1s
            retries: 5
        environment:
            ANVIL_IP_ADDR: 0.0.0.0
        volumes:
            - blockchain-data:/usr/share/sunodo
        ports:
            - 8545:8545

    database:
        image: postgres:13-alpine
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5
        environment:
            - POSTGRES_PASSWORD=password

    dapp_deployer:
        image: cartesi/rollups-cli:1.0.2
        restart: on-failure
        depends_on:
            anvil:
                condition: service_started
        command:
            [
                "create",
                "--rpc",
                "http://anvil:8545",
                "--deploymentFile",
                "/usr/share/sunodo/localhost.json",
                "--mnemonic",
                "test test test test test test test test test test test junk",
                "--templateHashFile",
                "/var/opt/cartesi/machine-snapshots/0_0/hash",
                "--outputFile",
                "/usr/share/sunodo/dapp.json",
            ]
        volumes:
            - blockchain-data:/usr/share/sunodo

    validator:
        image: sunodo/rollups-node:0.5.1
        depends_on:
            dapp_deployer:
                condition: service_completed_successfully
        volumes:
            - blockchain-data:/usr/share/sunodo:ro
        healthcheck:
            test: ["CMD", "is_ready"]
            interval: 10s
            timeout: 1s
            retries: 5
        expose:
            - 4000
            - 5004
            - 5005
        env_file:
            - ${SUNODO_BIN_PATH}/node/default.env

    proxy:
        image: traefik:v2.10
        depends_on:
            validator:
                condition: service_healthy
            traefik-config-generator:
                condition: service_completed_successfully
        healthcheck:
            test: ["CMD", "traefik", "healthcheck", "--ping"]
            interval: 5s
            timeout: 1s
            retries: 5
        command:
            [
                "--ping=true",
                "--entryPoints.web.address=:8088",
                "--entryPoints.traefik.address=:8080",
                "--metrics.prometheus=true",
                "--metrics.prometheus.addServicesLabels=true",
                "--providers.file.directory=/etc/traefik/conf.d",
                "--providers.file.watch=true"
            ]
        ports:
            - 8080:8088
        volumes:
            - traefik-conf:/etc/traefik/conf.d

    prompt:
        image: debian:bookworm-slim
        environment:
            PROMPT_TXT_01_ANVIL: "Anvil running at http://localhost:8545"
            PROMPT_TXT_02_GRAPHQL: "GraphQL running at http://localhost:8080/graphql"
            PROMPT_TXT_03_INSPECT: "Inspect running at http://localhost:8080/inspect/"
            PROMPT_TXT_04_EXPLORER: "Explorer running at http://localhost:8080/explorer/"
            PROMPT_TXT_10_EXIT: "Press Ctrl+C to stop the node"
        command:
            - /bin/bash
            - -c
            - |
                for txt_file in $${!PROMPT_TXT_*}
                do
                    declare -n txt_content=$$txt_file
                    _txt_file=$${txt_file:11}
                    echo "$$txt_content"
                done
                trap exit INT TERM; sleep infinity & wait
        working_dir: /prompt
        depends_on:
            proxy:
                condition: service_healthy

    traefik-config-generator:
        environment:
            TRAEFIK_CONFIG_INSPECT_SERVER: |
                http:
                    routers:
                        inspect_server:
                            rule: "PathPrefix(`/inspect`)"
                            service: inspect_server
                    services:
                        inspect_server:
                            loadBalancer:
                                servers:
                                    - url: "http://validator:5005/inspect"
            TRAEFIK_CONFIG_GRAPHQL_SERVER: |
                http:
                    routers:
                        graphql_server:
                            rule: "PathPrefix(`/graphql`)"
                            service: graphql_server
                    services:
                        graphql_server:
                            loadBalancer:
                                servers:
                                    - url: "http://validator:4000/graphql"

volumes:
    blockchain-data: {}
    traefik-conf: {}
