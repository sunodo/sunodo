"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
    """
    The URL that specifies the behaviour of this scalar.
    """
    url: String!
) on SCALAR

type AuthoritiesConnection {
    edges: [AuthorityEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type Authority {
    id: String!
}

type AuthorityEdge {
    node: Authority!
    cursor: String!
}

enum AuthorityOrderByInput {
    id_ASC
    id_DESC
}

input AuthorityWhereInput {
    id_isNull: Boolean
    id_eq: String
    id_not_eq: String
    id_gt: String
    id_gte: String
    id_lt: String
    id_lte: String
    id_in: [String!]
    id_not_in: [String!]
    id_contains: String
    id_not_contains: String
    id_containsInsensitive: String
    id_not_containsInsensitive: String
    id_startsWith: String
    id_not_startsWith: String
    id_endsWith: String
    id_not_endsWith: String
    AND: [AuthorityWhereInput!]
    OR: [AuthorityWhereInput!]
}

"""
Big number integer
"""
scalar BigInt

type FactoriesConnection {
    edges: [FactoryEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type Factory {
    id: String!
    authority: Authority!
    token: Token!
    price: BigInt!
}

type FactoryEdge {
    node: Factory!
    cursor: String!
}

enum FactoryOrderByInput {
    id_ASC
    id_DESC
    authority_id_ASC
    authority_id_DESC
    token_id_ASC
    token_id_DESC
    token_symbol_ASC
    token_symbol_DESC
    token_name_ASC
    token_name_DESC
    token_decimals_ASC
    token_decimals_DESC
    price_ASC
    price_DESC
}

input FactoryWhereInput {
    id_isNull: Boolean
    id_eq: String
    id_not_eq: String
    id_gt: String
    id_gte: String
    id_lt: String
    id_lte: String
    id_in: [String!]
    id_not_in: [String!]
    id_contains: String
    id_not_contains: String
    id_containsInsensitive: String
    id_not_containsInsensitive: String
    id_startsWith: String
    id_not_startsWith: String
    id_endsWith: String
    id_not_endsWith: String
    authority_isNull: Boolean
    authority: AuthorityWhereInput
    token_isNull: Boolean
    token: TokenWhereInput
    price_isNull: Boolean
    price_eq: BigInt
    price_not_eq: BigInt
    price_gt: BigInt
    price_gte: BigInt
    price_lt: BigInt
    price_lte: BigInt
    price_in: [BigInt!]
    price_not_in: [BigInt!]
    AND: [FactoryWhereInput!]
    OR: [FactoryWhereInput!]
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type Query {
    authorities(
        where: AuthorityWhereInput
        orderBy: [AuthorityOrderByInput!]
        offset: Int
        limit: Int
    ): [Authority!]!
    authorityById(id: String!): Authority
    authorityByUniqueInput(where: WhereIdInput!): Authority
        @deprecated(reason: "Use authorityById")
    authoritiesConnection(
        orderBy: [AuthorityOrderByInput!]!
        after: String
        first: Int
        where: AuthorityWhereInput
    ): AuthoritiesConnection!
    tokens(
        where: TokenWhereInput
        orderBy: [TokenOrderByInput!]
        offset: Int
        limit: Int
    ): [Token!]!
    tokenById(id: String!): Token
    tokenByUniqueInput(where: WhereIdInput!): Token
        @deprecated(reason: "Use tokenById")
    tokensConnection(
        orderBy: [TokenOrderByInput!]!
        after: String
        first: Int
        where: TokenWhereInput
    ): TokensConnection!
    factories(
        where: FactoryWhereInput
        orderBy: [FactoryOrderByInput!]
        offset: Int
        limit: Int
    ): [Factory!]!
    factoryById(id: String!): Factory
    factoryByUniqueInput(where: WhereIdInput!): Factory
        @deprecated(reason: "Use factoryById")
    factoriesConnection(
        orderBy: [FactoryOrderByInput!]!
        after: String
        first: Int
        where: FactoryWhereInput
    ): FactoriesConnection!
    squidStatus: SquidStatus
}

type SquidStatus {
    """
    The height of the processed part of the chain
    """
    height: Int
}

type Token {
    id: String!
    symbol: String!
    name: String!
    decimals: Int!
}

type TokenEdge {
    node: Token!
    cursor: String!
}

enum TokenOrderByInput {
    id_ASC
    id_DESC
    symbol_ASC
    symbol_DESC
    name_ASC
    name_DESC
    decimals_ASC
    decimals_DESC
}

type TokensConnection {
    edges: [TokenEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

input TokenWhereInput {
    id_isNull: Boolean
    id_eq: String
    id_not_eq: String
    id_gt: String
    id_gte: String
    id_lt: String
    id_lte: String
    id_in: [String!]
    id_not_in: [String!]
    id_contains: String
    id_not_contains: String
    id_containsInsensitive: String
    id_not_containsInsensitive: String
    id_startsWith: String
    id_not_startsWith: String
    id_endsWith: String
    id_not_endsWith: String
    symbol_isNull: Boolean
    symbol_eq: String
    symbol_not_eq: String
    symbol_gt: String
    symbol_gte: String
    symbol_lt: String
    symbol_lte: String
    symbol_in: [String!]
    symbol_not_in: [String!]
    symbol_contains: String
    symbol_not_contains: String
    symbol_containsInsensitive: String
    symbol_not_containsInsensitive: String
    symbol_startsWith: String
    symbol_not_startsWith: String
    symbol_endsWith: String
    symbol_not_endsWith: String
    name_isNull: Boolean
    name_eq: String
    name_not_eq: String
    name_gt: String
    name_gte: String
    name_lt: String
    name_lte: String
    name_in: [String!]
    name_not_in: [String!]
    name_contains: String
    name_not_contains: String
    name_containsInsensitive: String
    name_not_containsInsensitive: String
    name_startsWith: String
    name_not_startsWith: String
    name_endsWith: String
    name_not_endsWith: String
    decimals_isNull: Boolean
    decimals_eq: Int
    decimals_not_eq: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_lt: Int
    decimals_lte: Int
    decimals_in: [Int!]
    decimals_not_in: [Int!]
    AND: [TokenWhereInput!]
    OR: [TokenWhereInput!]
}

input WhereIdInput {
    id: String!
}
